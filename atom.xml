<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Robert Pearce's blog</title>
    <link href="https://robertwpearce.com/atom.xml" rel="self" />
    <link href="https://robertwpearce.com" />
    <id>https://robertwpearce.com/atom.xml</id>
    <author>
        <name>Robert Pearce</name>
        <email>me@robertwpearce.com</email>
    </author>
    <updated>2024-11-11T12:01:00Z</updated>
    <entry>
    <title>Neovim: All In</title>
    <link href="https://robertwpearce.com/neovim-all-in.html" />
    <id>https://robertwpearce.com/neovim-all-in.html</id>
    <published>2024-11-11T00:00:00Z</published>
    <updated>2024-11-11T12:01:00Z</updated>
    <summary type="html"><![CDATA[<p>This is an accounting of how I recently went all-in on
<a href="https://neovim.io">Neovim</a> with its Lua-based configuration ecosystem.</p>
<p>Here is my <a href="https://github.com/rpearce/dotfiles/tree/a2c9e46bb413039cbf98d7ea1ab90bf6ca023178/tools/conf/nvim">nvim config at time of
writing</a>.
This folder just needs to live in <code>$XDG_CONFIG_HOME</code> (typically, <code>~/.config</code>),
and in my case, <a href="https://github.com/rpearce/dotfiles/blob/a2c9e46bb413039cbf98d7ea1ab90bf6ca023178/tools/conf/install#L55">I symlink it from my dotfiles to there</a>.</p>
<p>In this short post, I’ll share about the switch, some screenshots, and list the
tools I’m using at the time of writing.</p>
<h2 id="backstory">Backstory</h2>
<p>I’ve used Neovim for years now, but I’ve always had one
foot in the <a href="https://www.vim.org">VIM</a> world: a somewhat lengthy <code>.vimrc</code>
(standard fare), plus <a href="https://github.com/junegunn/vim-plug">vim-plug</a> for
managing plugins. I also used <a href="https://github.com/dense-analysis/ale">ale</a> and
<a href="https://github.com/neoclide/coc.nvim">coc-nvim</a> for managing linters and LSPs.</p>
<p>This worked great for years, but I ran into an issue at work where <code>ale</code> and
<code>coc-nvim</code> seemed to no longer play well together. After trying to fix it in my
spare time and failing, I decided to completely burn things down and start fresh
with <em>The Neovim Way</em>.</p>
<h2 id="how-the-switch-went">How the switch went</h2>
<p>Most of the experience was dancing between reading official docs, reading blog
posts, watching YouTube videos, reading source code, searching through GitHub
issues, noting <code>CHANGELOG</code> differences since these kindly-written resources
were created, etc. It was a complete hodgepodge approach, but it’s typically how
I learn things, and it worked out over ~5 nights.</p>
<p>If you want a breakdown of how to structure your files and write plugin configs,
send me an email, and I’ll consider writing some more about this!</p>
<h2 id="the-verdict">The verdict</h2>
<p>This tooling is incredible: the configs are almost completely declarative,
updating tools is easy as pie, and it is all unbelievably fast.</p>
<p>At work, the ability to lint and typecheck a massive JS/TS project immediately,
while I’m typing (and without any weird UI freezes…looking at you, VSCode), is
critical. I am especially surprised by how good
<a href="https://github.com/nvim-telescope/telescope.nvim">Telescope</a> is; it’s file
finding and live grep are <em>fast</em> and quite pleasant to use.</p>
<h2 id="screenshots">Screenshots</h2>
<p><a href="./images/neovim-01-home.webp">
<img
    alt="neovim start screen with customized alpha.nvim"
    decoding="async"
    height="1740"
    loading="lazy"
    src="./images/neovim-01-home.webp"
    width="3022"
  />
</a></p>
<p><a href="./images/neovim-02-code-tree.webp">
<img
    alt="neotree sidebar plus haskell code example"
    decoding="async"
    height="1818"
    loading="lazy"
    src="./images/neovim-02-code-tree.webp"
    width="3024"
  />
</a></p>
<p><a href="./images/neovim-03-ff.webp">
<img
    alt="fuzzy file finding with telescope"
    decoding="async"
    height="1820"
    loading="lazy"
    src="./images/neovim-03-ff.webp"
    width="3024"
  />
</a></p>
<p><a href="./images/neovim-04-fg.webp">
<img
    alt="fuzzy live grep with telescope"
    decoding="async"
    height="1818"
    loading="lazy"
    src="./images/neovim-04-fg.webp"
    width="3024"
  />
</a></p>
<p><a href="./images/neovim-05-lazy.webp">
<img
    alt="lazy.nvim interface"
    decoding="async"
    height="1816"
    loading="lazy"
    src="./images/neovim-05-lazy.webp"
    width="3024"
  />
</a></p>
<p><a href="./images/neovim-06-mason.webp">
<img
    alt="mason interface"
    decoding="async"
    height="1818"
    loading="lazy"
    src="./images/neovim-06-mason.webp"
    width="3024"
  />
</a></p>
<h2 id="list-of-the-tools-i-used">List of the tools I used</h2>
<p>Tool managers:</p>
<ul>
<li><a href="https://github.com/folke/lazy.nvim">Lazy.nvim</a> (this underpins just about
everything else)</li>
<li><a href="https://github.com/williamboman/mason.nvim">williamboman/mason.nvim</a></li>
<li><a href="https://github.com/WhoIsSethDaniel/mason-tool-installer.nvim">WhoIsSethDaniel/mason-tool-installer.nvim</a></li>
</ul>
<p>Look and feel:</p>
<ul>
<li><a href="https://github.com/goolord/alpha-nvim">goolord/alpha-nvim</a> (neovim start page)</li>
<li><a href="https://github.com/nvim-lualine/lualine.nvim">nvim-lualine/lualine.nvim</a>
(statusline)</li>
<li><a href="https://github.com/lewis6991/gitsigns.nvim">lewis6991/gitsigns.nvim</a> (buffer
git integration)</li>
<li><a href="https://github.com/dracula/vim">dracula/vim</a> (theme)</li>
<li><a href="https://github.com/folke/tokyonight.nvim">folke/tokyonight.nvim</a> (theme)</li>
</ul>
<p>Sidebar folder tree:</p>
<ul>
<li><a href="https://github.com/nvim-neo-tree/neo-tree.nvim">vim-neo-tree/neo-tree.nvim</a></li>
</ul>
<p>Language things:</p>
<ul>
<li><a href="https://github.com/neovim/nvim-lspconfig">neovim/nvim-lspconfig</a></li>
<li><a href="https://github.com/williamboman/mason-lspconfig.nvim">williamboman/mason-lspconfig.nvim</a></li>
<li><a href="https://github.com/nvim-treesitter/nvim-treesitter">nvim-treesitter/nvim-treesitter</a></li>
<li><a href="https://github.com/norcalli/nvim-colorizer.lua">norcalli/nvim-colorizer.lua</a></li>
<li><a href="https://github.com/hrsh7th/cmp-nvim-lsp">hrsh7th/cmp-nvim-lsp</a></li>
<li><a href="https://github.com/hrsh7th/nvim-cmp">hrsh7th/nvim-cmp</a></li>
<li><a href="https://github.com/mfussenegger/nvim-lint">mfussenegger/nvim-lint</a></li>
<li><a href="https://github.com/stevearc/conform.nvim">stevearc/conform.nvim</a></li>
</ul>
<p>Finding things:</p>
<ul>
<li><a href="https://github.com/nvim-telescope/telescope.nvim">nvim-telescope/telescope.nvim</a></li>
</ul>
<p>Misc:</p>
<ul>
<li><a href="https://github.com/folke/todo-comments.nvim">folke/todo-comments.nvim</a></li>
<li><a href="https://github.com/kylechui/nvim-surround">kylechui/nvim-surround</a></li>
</ul>
<h2 id="section"></h2>
<hr />
<p>Thanks for reading!<br />
— Robert</p>]]></summary>
</entry>
<entry>
    <title>Content hashing static assets to break caches with md5sum and bash</title>
    <link href="https://robertwpearce.com/content-hashing-static-assets-to-break-caches-with-md5sum-and-bash.html" />
    <id>https://robertwpearce.com/content-hashing-static-assets-to-break-caches-with-md5sum-and-bash.html</id>
    <published>2024-01-30T00:00:00Z</published>
    <updated>2024-01-31T01:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="the-problem">The Problem</h2>
<p>When I make something for the web, I have plenty of “static assets”: CSS files,
JS files, and images. In my HTML files, I reference their sources as you might
expect:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">link</span> <span class="pl-na">rel</span><span class="pl-o">=</span><span class="pl-s">&#34;stylesheet&#34;</span> <span class="pl-na">href</span><span class="pl-o">=</span><span class="pl-s">&#34;./styles.css&#34;</span> <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">async</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;./scripts.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">img</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;./cool-image.avif&#34;</span> <span class="pl-p">/&gt;</span></span></span></code></pre>
<p>But when a browser downloads these, it will note the source URLs and cache the
static assets, typically for a time set by the server via headers like
<code>Expires: &lt;some date&gt;</code> or <code>Cache-Control: public, max-age=15552000</code> (6 months).
This is exactly what we want the browser to do, but what happens if I change the
contents of the file?</p>
<p>Nothing! The last-cached content is served!</p>
<p>The browser caching is doing its job to help the user by not re-downloading the
same content, but if we have updated static asset content, we need to give the
browser a way to know that the content is different. Then it should go download
and use that updated asset.</p>
<p>One option, if I’m using a CDN, is to manually purge the assets. There are also
some additional headers, like <code>ETag</code> and <code>Last-Modified</code>, that can help hint to
a browser that it can keep its cache or not for an asset, but if you don’t want
to mess with request headers and/or want to guarantee the browser gets the
latest version of an asset, you can provide a <em>different</em> file name for each
version of an asset. Since the URL to the resource is different, the browser
should always go and try to download it.</p>
<p>Yes, frameworks like <a href="https://rubyonrails.org">Ruby on Rails</a> and
<a href="https://www.phoenixframework.org">Phoenix</a> will automatically do this sort of
thing for you, but we’re exploring here and trying to keep things simple! (That
will remain to be seen… 😅)</p>
<p>Let’s talk about how we can DIY (do it yourself).</p>
<h2 id="what-our-assets-should-look-like-when-were-done">What our assets should look like when we’re done</h2>
<p>What we want to do is take a file like <code>styles.css</code>, get an <a href="https://en.wikipedia.org/wiki/MD5">MD5 fingerprint
(checksum/digest/hash)</a> based on the file’s
contents, and output something like <code>styles.78f7f2c2d416e59525938565dd6dd565.css</code>.
This way, if <em>anything</em> in our file changes, we’ll get a new hash and therefore
a new file name.</p>
<p>Given we have these files:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">index.html
</span></span><span class="pl-line"><span class="pl-cl">cool-image.avif
</span></span><span class="pl-line"><span class="pl-cl">scripts.js
</span></span><span class="pl-line"><span class="pl-cl">styles.css</span></span></code></pre>
<p>and our <code>index.html</code> file contains this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">link</span> <span class="pl-na">rel</span><span class="pl-o">=</span><span class="pl-s">&#34;stylesheet&#34;</span> <span class="pl-na">href</span><span class="pl-o">=</span><span class="pl-s">&#34;./styles.css&#34;</span> <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">async</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;./scripts.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">img</span> <span class="pl-na">alt</span><span class="pl-o">=</span><span class="pl-s">&#34;&#34;</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;./cool-image.avif&#34;</span> <span class="pl-p">/&gt;</span></span></span></code></pre>
<p>then we should create a <code>dist/</code> directory with files that resemble these:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">index.html
</span></span><span class="pl-line"><span class="pl-cl">cool-image.dadb0e162005e9b241a13ca5f871e250.avif
</span></span><span class="pl-line"><span class="pl-cl">scripts.9efef7ad3d06e7703c7563dbc1ed78a9.js
</span></span><span class="pl-line"><span class="pl-cl">styles.78f7f2c2d416e59525938565dd6dd565.css</span></span></code></pre>
<p>and our <code>index.html</code> file should have its assets’ paths updated to resemble
these:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">link</span> <span class="pl-na">rel</span><span class="pl-o">=</span><span class="pl-s">&#34;stylesheet&#34;</span> <span class="pl-na">href</span><span class="pl-o">=</span><span class="pl-s">&#34;./styles.78f7f2c2d416e59525938565dd6dd565.css&#34;</span> <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">async</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;./scripts.9efef7ad3d06e7703c7563dbc1ed78a9.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">img</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;./cool-image.dadb0e162005e9b241a13ca5f871e250.avif&#34;</span> <span class="pl-p">/&gt;</span></span></span></code></pre>
<h2 id="using-md5sum-to-get-file-content-hashes">Using md5sum to get file content hashes</h2>
<p>If you haven’t used <code>md5sum</code> before, go ahead and run <code>man md5sum</code> in your
terminal. There are some neat things you can use this for, like storing a list
of file checksums in a file, then detecting which files changed, having your
build system make decisions based on that, and avoiding costly project rebuilds
by only rebuilding files or directories and their dependencies that changed. But
we only need the top-level, most basic thing from <code>md5sum</code>: computing an MD5
message digest.</p>
<p>Let’s say this is what our project folder looks like:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ tree -a -L 1
</span></span><span class="pl-line"><span class="pl-cl">.
</span></span><span class="pl-line"><span class="pl-cl">├── .git
</span></span><span class="pl-line"><span class="pl-cl">├── .gitignore
</span></span><span class="pl-line"><span class="pl-cl">├── cool-image.avif
</span></span><span class="pl-line"><span class="pl-cl">├── dist
</span></span><span class="pl-line"><span class="pl-cl">├── index.html
</span></span><span class="pl-line"><span class="pl-cl">├── scripts.js
</span></span><span class="pl-line"><span class="pl-cl">└── styles.css</span></span></code></pre>
<p>If I want to get an MD5 content hash for <code>styles.css</code>, I pass the filename to
<code>md5sm</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ md5sum styles.css
</span></span><span class="pl-line"><span class="pl-cl">e6dd05b39c5fb97218130638c0a374de  styles.css</span></span></code></pre>
<p>Sweet! If we want to query by a bunch of different file extensions, <code>md5sum</code> can
handle that:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ md5sum *.{avif,css,js}
</span></span><span class="pl-line"><span class="pl-cl">dadb0e162005e9b241a13ca5f871e250  cool-image.avif
</span></span><span class="pl-line"><span class="pl-cl">e6dd05b39c5fb97218130638c0a374de  styles.css
</span></span><span class="pl-line"><span class="pl-cl">78f7f2c2d416e59525938565dd6dd565  bingo.js</span></span></code></pre>
<p>But if we want <code>md5sum</code> to ignore certain directories, find a bunch of different
file types, and maybe do so a bit more efficiently, we can lean on the <code>find</code>
tool. Run <code>man find</code> if you’re unfamiliar with it or can’t remember its syntax!</p>
<p>Let’s run it with some options and then break down what we did:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ find . \
</span></span><span class="pl-line"><span class="pl-cl">  -type f \
</span></span><span class="pl-line"><span class="pl-cl">  ! -path &#34;./.git/*&#34; \
</span></span><span class="pl-line"><span class="pl-cl">  ! -path &#34;./dist/*&#34; \
</span></span><span class="pl-line"><span class="pl-cl">  \( -iname &#34;*.css&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.js&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.avif&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.bmp&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.gif&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.heif&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.jpeg&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.jpg&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.png&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.svg&#34; -o \
</span></span><span class="pl-line"><span class="pl-cl">     -iname &#34;*.webp&#34; \
</span></span><span class="pl-line"><span class="pl-cl">  \) \
</span></span><span class="pl-line"><span class="pl-cl">  -exec md5sum &#39;{}&#39; +
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">e6dd05b39c5fb97218130638c0a374de  ./styles.css
</span></span><span class="pl-line"><span class="pl-cl">dadb0e162005e9b241a13ca5f871e250  ./cool-image.avif
</span></span><span class="pl-line"><span class="pl-cl">78f7f2c2d416e59525938565dd6dd565  ./bingo.js</span></span></code></pre>
<p>Above, we told the find command to find all files in this directory, excluding
the <code>.git/</code> and <code>dist/</code> directories, where the file extension ends in one of a
handful of extensions of likely static assets, and then we tell it to execute
<code>md5sum</code> on each one. At the bottom, we see the results!</p>
<p>Next, we want to take that MD5 hash on the left and output a new file where the
filename has the hash just before the extension. For that, we’re going to want
to start putting this into a <code>build</code> script.</p>
<h2 id="starting-our-build-script">Starting our build script</h2>
<p>In your terminal, run the following commands to create a build file with some
scaffolding, then change it to an executable file (don’t copy the λ):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ cat &lt;&lt;EOF &gt; ./build
</span></span><span class="pl-line"><span class="pl-cl">#!/usr/bin/env bash
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">set -o errexit
</span></span><span class="pl-line"><span class="pl-cl">set -o errtrace
</span></span><span class="pl-line"><span class="pl-cl">set -o nounset
</span></span><span class="pl-line"><span class="pl-cl">set -eou pipefail
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">function main {
</span></span><span class="pl-line"><span class="pl-cl">}
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">main
</span></span><span class="pl-line"><span class="pl-cl">EOF
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">λ chmod +x ./build</span></span></code></pre>
<p>Once you’ve done that open the file, and let’s add our find function in there:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1"># ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">BUILD_DIR</span><span class="pl-o">=</span><span class="pl-s2">&#34;./dist&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">function</span> get_asset_md5sums <span class="pl-o">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  find . <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    -type f <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    ! -path <span class="pl-s2">&#34;./.git/*&#34;</span> <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    ! -path <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">BUILD_DIR</span><span class="pl-si">}</span><span class="pl-s2">/*&#34;</span> <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    <span class="pl-se">\(</span> -iname <span class="pl-s2">&#34;*.css&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.js&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.avif&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.bmp&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.gif&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.heif&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.jpeg&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.jpg&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.png&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.svg&#34;</span> -o <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>       -iname <span class="pl-s2">&#34;*.webp&#34;</span> <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    <span class="pl-se">\)</span> <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    -exec md5sum <span class="pl-s1">&#39;{}&#39;</span> +
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-o">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">function</span> main <span class="pl-o">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  get_asset_md5sums
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-o">}</span></span></span></code></pre>
<p>If you then run that file via <code>./build</code>, you’ll get back the same results as
before.</p>
<h2 id="outputting-hashed-static-asset-file-names">Outputting hashed static asset file names</h2>
<p>Update your <code>main</code> function with the following. We’ll use code comments to
explain most of this part:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-k">function</span> main <span class="pl-o">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># Recreate build dir</span>
</span></span><span class="pl-line"><span class="pl-cl">  rm -rf <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">BUILD_DIR</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-o">&amp;&amp;</span> mkdir -p <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">BUILD_DIR</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># Create a bash array for holding # &#34;file=file_with_sum&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># pairs for use later. Yes, I know bash 4 has associative arrays.</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># E.g.: &#34;styles.css=styles.78f7f2c2d416e59525938565dd6dd565.css&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">assets_array</span><span class="pl-o">=()</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># Get all asset MD5 checksums, put them into an assets</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># array for later use, and write each file to a new</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># file with the checksum in the name.</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">while</span> <span class="pl-nb">read</span> -r sum file<span class="pl-p">;</span> <span class="pl-k">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">file_name</span><span class="pl-o">=</span><span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">file</span><span class="pl-p">%.*</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-c1"># Extract the file&#39;s name</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">file_ext</span><span class="pl-o">=</span><span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">file</span><span class="pl-p">##*.</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-c1"># Extract the file&#39;s extension</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">file_with_sum</span><span class="pl-o">=</span><span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">file_name</span><span class="pl-si">}</span><span class="pl-s2">.</span><span class="pl-si">${</span><span class="pl-nv">sum</span><span class="pl-si">}</span><span class="pl-s2">.</span><span class="pl-si">${</span><span class="pl-nv">file_ext</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-c1"># Hashed file name</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1"># Append to the assets array</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">assets_array</span><span class="pl-o">+=(</span> <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">file</span><span class="pl-si">}</span><span class="pl-s2">=</span><span class="pl-si">${</span><span class="pl-nv">file_with_sum</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-o">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1"># Write the file&#39;s contents to the build directory</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1"># at the new, hashed file name.</span>
</span></span><span class="pl-line"><span class="pl-cl">    cat <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">file</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> &gt; <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">BUILD_DIR</span><span class="pl-si">}</span><span class="pl-s2">/</span><span class="pl-si">${</span><span class="pl-nv">file_with_sum</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">done</span> &lt; &lt;<span class="pl-o">(</span>get_asset_md5sums<span class="pl-o">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-o">}</span></span></span></code></pre>
<p>If you’re wondering about the <code>&lt;(get_asset_md5sums)</code> part, it uses
<a href="https://www.gnu.org/software/bash/manual/bash.html#Process-Substitution">process substitution</a>
to let us have access to the <code>assets_array</code> variable, which we wouldn’t have
access to if we piped <code>get_asset_md5sums</code> to <code>while read ...</code>, for the <code>while</code>
loop would be ran in a <a href="https://www.gnu.org/software/bash/manual/html_node/Command-Execution-Environment.html">subshell environment</a>.
Instead, with process substitution, the result of that function is stored in a
named pipe/special temporary file (in <code>/dev/fd/</code> on my system), the file name is
passed, and then its contents are read and attached to the standard input by the
<code>&lt;</code> input file descriptor. To sum this aside up, if we did <code>get_asset_md5sums | while read...</code>,
we’d get an <code>assets_array[@]: unbound variable</code> error, so we’re using process
substitution to get around that.</p>
<p>If you run <code>./build</code> again, you won’t see any terminal output, but you will see
a shiny new <code>./dist</code> folder with your files in it!</p>
<p>The next part is a little more involved, for we need to create new HTML files
that have updated values for asset source locations.</p>
<h2 id="including-the-hashed-file-names-in-our-html-files">Including the hashed file names in our HTML file(s)</h2>
<p>Before we can copy, update, and output our HTML files (of which we only have one
in this example), we first need a way to find them! Add this below your
<code>get_asset_md5sums</code> function:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-k">function</span> get_html_files <span class="pl-o">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  find . <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    -type f <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    ! -path <span class="pl-s2">&#34;./.git/*&#34;</span> <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    ! -path <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">BUILD_DIR</span><span class="pl-si">}</span><span class="pl-s2">/*&#34;</span> <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    -iname <span class="pl-s2">&#34;*.html&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-o">}</span></span></span></code></pre>
<p>Next, at the bottom of your <code>main</code> function, add this code, and we’ll use
comments to try to explain each piece in context:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1"># For each HTML file...</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">while</span> <span class="pl-nb">read</span> -r file<span class="pl-p">;</span> <span class="pl-k">do</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># For each line in the current HTML file...</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">while</span> <span class="pl-nv">IFS</span><span class="pl-o">=</span><span class="pl-s1">&#39;&#39;</span> <span class="pl-nb">read</span> -r line<span class="pl-p">;</span> <span class="pl-k">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">line_updated</span><span class="pl-o">=</span><span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">line</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1"># For each &#34;file=file_with_sum&#34; pairing...</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">for</span> val in <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">assets_array</span><span class="pl-p">[@]</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span><span class="pl-p">;</span> <span class="pl-k">do</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nv">file_name_original</span><span class="pl-o">=</span><span class="pl-k">$(</span><span class="pl-nb">echo</span> <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">val</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-p">|</span> cut -d <span class="pl-s2">&#34;=&#34;</span> -f 1<span class="pl-k">)</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nv">file_name_summed</span><span class="pl-o">=</span><span class="pl-k">$(</span><span class="pl-nb">echo</span> <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">val</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-p">|</span> cut -d <span class="pl-s2">&#34;=&#34;</span> -f 2<span class="pl-k">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-c1"># If the current line has the original file name...</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-k">if</span> <span class="pl-o">[[</span> <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">line</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-o">=</span>~ <span class="pl-si">${</span><span class="pl-nv">file_name_original</span><span class="pl-si">}</span> <span class="pl-o">]]</span><span class="pl-p">;</span> <span class="pl-k">then</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-c1"># ...then replace that file name with the hashed one</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nv">line_updated</span><span class="pl-o">=</span><span class="pl-k">$(</span><span class="pl-nb">echo</span> <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">line</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-p">|</span> sed -E <span class="pl-s1">&#39;s@&#39;</span><span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">file_name_original</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span><span class="pl-s1">&#39;@&#39;</span><span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">file_name_summed</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span><span class="pl-s1">&#39;@g&#39;</span><span class="pl-k">)</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nb">break</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-k">fi</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">done</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1"># Print the line</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nb">echo</span> <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">line_updated</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># Pass the file in, then once done, redirect the</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># printed file lines to a new file in our build dir</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">done</span> &lt; <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">file</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> &gt; <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">BUILD_DIR</span><span class="pl-si">}</span><span class="pl-s2">/</span><span class="pl-si">${</span><span class="pl-nv">file</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"># Pass the HTML files in via process substitution</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">done</span> &lt; &lt;<span class="pl-o">(</span>get_html_files<span class="pl-o">)</span></span></span></code></pre>
<p>Once this code runs, your HTML files should be copied over to your <code>dist/</code>
directory, but the lines referencing your static assets should all be updated!</p>
<p><em>This runs fast enough for my purposes, but if you have any performance tips or
explanation corrections, please email me.</em></p>
<h2 id="building-with-github-actions-and-deploying-to-github-pages">Building with GitHub Actions and deploying to GitHub Pages</h2>
<p>Once you’ve got this building, you <em>could</em> build it locally and push the <code>dist/</code>
folder up to your source control, but I want <code>./build</code> to run automatically, and
since I primarily use GitHub, I just want to deploy the <code>dist/</code> directory to
GitHub Pages.</p>
<p>To make this a reality, we can use Github Actions to deploy to GitHub Pages.
Create a <code>.github/workflows/main.yml</code> (the YAML file name can be whatever you
like) and add the following:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nt">name</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">CI</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w"></span><span class="pl-nt">on</span><span class="pl-p">:</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">  </span><span class="pl-nt">pull_request</span><span class="pl-p">:</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">  </span><span class="pl-nt">push</span><span class="pl-p">:</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w"></span><span class="pl-nt">jobs</span><span class="pl-p">:</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">  </span><span class="pl-nt">build</span><span class="pl-p">:</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">    </span><span class="pl-nt">runs-on</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">ubuntu-latest</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">    </span><span class="pl-nt">permissions</span><span class="pl-p">:</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">      </span><span class="pl-nt">contents</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">write</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">    </span><span class="pl-nt">steps</span><span class="pl-p">:</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">      </span>- <span class="pl-nt">name</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">Checkout repo under GH workspace</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">        </span><span class="pl-nt">uses</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">actions/checkout@v4</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">      </span>- <span class="pl-nt">name</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">Run build script</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">        </span><span class="pl-nt">run</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">./build</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">      </span>- <span class="pl-nt">name</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">Deploy to gh-pages</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">        </span><span class="pl-nt">uses</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">peaceiris/actions-gh-pages@v3</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">        </span><span class="pl-nt">if</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">${{ github.ref == &#39;refs/heads/main&#39; }}</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">        </span><span class="pl-nt">with</span><span class="pl-p">:</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">          </span><span class="pl-nt">github_token</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">${{ secrets.GITHUB_TOKEN }}</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">          </span><span class="pl-nt">publish_dir</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-l">./dist</span></span></span></code></pre>
<p>After you’ve committed and merged everything into your <code>main</code> branch, go to your
project’s “Settings” page, then click on “Pages” on the left, and set your
“Branch” to point to <code>gh-pages</code> and <code>/ (root)</code>. The page should tell you that
your site is live and give you a link and button to visit the site.</p>
<h2 id="example-project">Example project</h2>
<p>Here is a silly project where everything in this blog post was implemented:
<a href="https://github.com/rpearce/gom-jabbar-bingo" class="uri">https://github.com/rpearce/gom-jabbar-bingo</a>.</p>
<h2 id="wrapping-up">Wrapping up</h2>
<p>So… did we over-engineer our website? Maybe? But we’re also avoiding static
asset caching issues by automating away a guaranteed way of cache-busting our
static assets, so that’s something!</p>
<p>If you’d like to see more bash content or something else entirely, send me an
email!</p>
<hr />
<p>Thanks for reading!<br />
— Robert</p>]]></summary>
</entry>
<entry>
    <title>Theming static sites</title>
    <link href="https://robertwpearce.com/theming-static-sites.html" />
    <id>https://robertwpearce.com/theming-static-sites.html</id>
    <published>2024-01-02T00:00:00Z</published>
    <updated>2024-01-10T12:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In this post, we’re going to dive into some useful patterns for theming static
websites that we can start using today to respect users’ system preferences and
provide them with custom ways of viewing our content.</p>
<p>This post is sponsored by <a href="https://flaviocorpa.com">Flavio Corpa (kutyel)</a>, and
if you’re curious about Elm, Haskell, or functional JS, check out his work! If
you’d like to sponsor me writing about a topic, check out
<a href="https://github.com/sponsors/rpearce/">my GitHub Sponsors page</a>.</p>
<h2 id="a-little-about-static-sites">A little about static sites</h2>
<p>Static websites are typically <code>.html</code>-suffixed files that use only HTML,
CSS, and a little JS, and they have a number of advantages: they’re
<em>usually</em> cheap to maintain, easy to deploy, easy to cache via CDNs, and have
fewer security risks than dynamic web applications since they don’t have backend
application servers. Static sites fit perfectly in the old web style of blogs,
information sites, small business sites, personal photo galleries, etc. However,
when it comes to setting and storing readers’ preferences—a common expectation
these days—static sites are at a disadvantage, for they have no backend app
server with which to communicate to figure this out and render the page <em>just
right</em> for a viewer.</p>
<p>For me (and the purposes of this post), static sites do not refer to single-page
apps (SPAs) nor server-side rendered web apps.</p>
<h2 id="our-goals">Our goals</h2>
<ul>
<li>Provide readers with different theme options</li>
<li>Support readers’ light/dark mode system preferences</li>
<li>Use patterns that can be extended to providing preferences for font families,
text styling, animations, and anything you can imagine someone might want to
customize for your site. Note: always respect user system settings first, then
utilize this sort of customization on top of that! <a href="https://overlayfactsheet.com">Don’t make (or use) an
accessibility overlay</a> with this pattern.</li>
</ul>
<h2 id="the-example">The example</h2>
<p>Apart from this website, which demonstrates most everything we’ll cover, I made
<a href="./examples/theming-static-sites/index.html">a smaller example site here</a>. Go
ahead and open it up, make some selections, and refresh the page a few times,
if you like. We will reference this example throughout the rest of this post, so
keep the page open. The only bummer is that we’ll not be covering the font
changing in this post, but its code is available in the example and follows the
same patterns we’ll do here.</p>
<p>Here are some screenshots:</p>
<p><img
  alt="Black/dark theme example with a duotone moon graphic and some preference options"
  decoding="async"
  height="1044"
  src="./examples/theming-static-sites/images/moon.webp"
  width="1344"
/></p>
<p><img
  alt="Green/forest theme example with a gradient bar graphic and some preference options"
  decoding="async"
  height="1044"
  src="./examples/theming-static-sites/images/forest.webp"
  width="1344"
/></p>
<p><img
  alt="Light/ocean theme example with a gradient polygon graphic and some preference options"
  decoding="async"
  height="1044"
  src="./examples/theming-static-sites/images/ocean.webp"
  width="1344"
/></p>
<h2 id="sketching-our-html">Sketching our HTML</h2>
<p>Let’s sketch out some markup we’ll need to accomplish our goal:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">html</span> <span class="pl-na">lang</span><span class="pl-o">=</span><span class="pl-s">&#34;en&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c">&lt;!-- The usual title, meta, and link elements go here. --&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-cm">/*
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       * This is where we&#39;ll put some blocking JS
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       * that does a couple of things before the
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       * page is painted. Trust me!
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       */</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">main</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">&lt;</span><span class="pl-nt">h1</span><span class="pl-p">&gt;</span>Static site theming example<span class="pl-p">&lt;/</span><span class="pl-nt">h1</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-c">&lt;!--
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c">      This is where our &lt;select&gt; element
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c">      for changing the theme will go.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c">      --&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;/</span><span class="pl-nt">main</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">async</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-cm">/*
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       * This is where we&#39;ll add some event listeners
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       * to handle changes to our theming options. I
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       * did this part using the body of a script element,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       * but it could reference a script file using the
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       * `src` attribute, instead.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">       */</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span></span></span></code></pre>
<h2 id="theme-selector">Theme selector</h2>
<p>After our <code>&lt;h1&gt;</code> element, let’s add a form select input that we’ll provide the
reader for controlling their theme.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">form</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">label</span> <span class="pl-na">for</span><span class="pl-o">=</span><span class="pl-s">&#34;select-theme&#34;</span><span class="pl-p">&gt;</span>Theme<span class="pl-p">&lt;/</span><span class="pl-nt">label</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">select</span> <span class="pl-na">data-select-theme</span><span class="pl-o">=</span><span class="pl-s">&#34;&#34;</span> <span class="pl-na">id</span><span class="pl-o">=</span><span class="pl-s">&#34;select-theme&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">option</span> <span class="pl-na">value</span><span class="pl-o">=</span><span class="pl-s">&#34;moon&#34;</span><span class="pl-p">&gt;</span>That<span class="pl-ni">&amp;apos;</span>s No Moon<span class="pl-p">&lt;/</span><span class="pl-nt">option</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">option</span> <span class="pl-na">value</span><span class="pl-o">=</span><span class="pl-s">&#34;forest&#34;</span><span class="pl-p">&gt;</span>Forest<span class="pl-p">&lt;/</span><span class="pl-nt">option</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">option</span> <span class="pl-na">value</span><span class="pl-o">=</span><span class="pl-s">&#34;ocean&#34;</span><span class="pl-p">&gt;</span>Ocean<span class="pl-p">&lt;/</span><span class="pl-nt">option</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">select</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">form</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Let’s then add some JS to the <code>&lt;script async&gt;</code> element at the bottom to listen
for changes to our <code>&lt;select&gt;</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">(()</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">themeEl</span> <span class="pl-o">=</span> <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">querySelector</span><span class="pl-p">(</span><span class="pl-s1">&#39;[data-select-theme]&#39;</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">themeEl</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">themeEl</span><span class="pl-p">.</span><span class="pl-nx">addEventListener</span><span class="pl-p">(</span><span class="pl-s1">&#39;change&#39;</span><span class="pl-p">,</span> <span class="pl-nx">e</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">log</span><span class="pl-p">(</span><span class="pl-nx">e</span><span class="pl-p">.</span><span class="pl-nx">target</span><span class="pl-p">.</span><span class="pl-nx">value</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-c1">// We need to do something here!
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-p">});</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})();</span></span></span></code></pre>
<p>If we were using a backend server, we’d submit the readers’ selection to the
backend to store in a database or cookie, but since we don’t have a backend, we
need to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">localStorage</a>.</p>
<p>Where we have that <code>console.log</code> and code comment above, it would be nice if we
could call a function or method that would set the theme for us and do all that
work. Let’s do that!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">themeEl</span><span class="pl-p">.</span><span class="pl-nx">addEventListener</span><span class="pl-p">(</span><span class="pl-s1">&#39;change&#39;</span><span class="pl-p">,</span> <span class="pl-nx">e</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span><span class="pl-p">.</span><span class="pl-nx">setTheme</span><span class="pl-p">(</span><span class="pl-nx">e</span><span class="pl-p">.</span><span class="pl-nx">target</span><span class="pl-p">.</span><span class="pl-nx">value</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">});</span></span></span></code></pre>
<p>That feels better, but we don’t have a <code>site</code> object and therefore no <code>setTheme</code>
method on it. Since we’ll probably want <code>site</code> to be available when the page is
loading, we’re going to put this initialization code in the first <code>&lt;script&gt;</code>
element:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">(()</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">setTheme</span><span class="pl-o">:</span> <span class="pl-p">(</span><span class="pl-nx">name</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">     <span class="pl-c1">// Our theme-setting code will go here
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">});</span></span></span></code></pre>
<p>Before we add our theme-setting code, we need to talk about what we want it to
do:</p>
<ol>
<li>We want it to set a value somewhere that our CSS can use to know what the
theme is set to. How about a <code>data-</code> attribute on the <code>body</code>? Why not?</li>
<li>We want to store that theme value in <code>localStorage</code></li>
</ol>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">setTheme</span><span class="pl-o">:</span> <span class="pl-p">(</span><span class="pl-nx">name</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">body</span><span class="pl-p">.</span><span class="pl-nx">setAttribute</span><span class="pl-p">(</span><span class="pl-s1">&#39;data-theme&#39;</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">localStorage</span><span class="pl-p">.</span><span class="pl-nx">setItem</span><span class="pl-p">(</span><span class="pl-s1">&#39;prefTheme&#39;</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">};</span></span></span></code></pre>
<p>This means that in our HTML file above, we should go back and add a default
<code>data-theme</code> on <code>&lt;body&gt;</code> for when the page loads the first time:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">body</span> <span class="pl-na">data-theme</span><span class="pl-o">=</span><span class="pl-s">&#34;moon&#34;</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Then, when a reader makes a change to the theme, it’ll update that value to
whatever the value was set to in the <code>&lt;select&gt;</code>.</p>
<h2 id="a-note-about-the-css">A note about the CSS</h2>
<p>Feel free to poke around <a href="https://github.com/rpearce/robertwpearce.com/blob/main/src/examples/theming-static-sites/css/styles.css">the example’s
CSS</a>
to see this in full, but here’s the gist.</p>
<p>For our CSS, all we need to do is have our styles use CSS variables for the
things that can change, and then those CSS variables are defined like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nt">body</span><span class="pl-o">,</span> <span class="pl-c">/* Because moon is the default here...this is just in case */</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nt">body</span><span class="pl-o">[</span><span class="pl-nt">data-theme</span><span class="pl-o">=</span><span class="pl-s2">&#34;moon&#34;</span><span class="pl-o">]</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--alpha-link-visited</span><span class="pl-p">:</span> <span class="pl-mf">0.85</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-bg-body</span><span class="pl-p">:</span> <span class="pl-mi">21</span><span class="pl-p">,</span> <span class="pl-mi">21</span><span class="pl-p">,</span> <span class="pl-mi">21</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-bg-select</span><span class="pl-p">:</span> <span class="pl-mi">21</span><span class="pl-p">,</span> <span class="pl-mi">21</span><span class="pl-p">,</span> <span class="pl-mi">21</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-border-select</span><span class="pl-p">:</span> <span class="pl-mi">206</span><span class="pl-p">,</span> <span class="pl-mi">206</span><span class="pl-p">,</span> <span class="pl-mi">206</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-link</span><span class="pl-p">:</span> <span class="pl-mi">246</span><span class="pl-p">,</span> <span class="pl-mi">241</span><span class="pl-p">,</span> <span class="pl-mi">213</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-sponsor-hearts</span><span class="pl-p">:</span> <span class="pl-mi">206</span><span class="pl-p">,</span> <span class="pl-mi">206</span><span class="pl-p">,</span> <span class="pl-mi">206</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-o">--</span><span class="pl-kc">color</span><span class="pl-o">-</span><span class="pl-kc">text</span><span class="pl-o">:</span> <span class="pl-mi">206</span><span class="pl-p">,</span> <span class="pl-mi">206</span><span class="pl-p">,</span> <span class="pl-mi">206</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--icon-select</span><span class="pl-p">:</span> <span class="pl-nf">var</span><span class="pl-p">(</span><span class="pl-o">--</span><span class="pl-kc">icon</span><span class="pl-o">-</span><span class="pl-n">select</span><span class="pl-o">-</span><span class="pl-n">moon</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--link-underline-offset</span><span class="pl-p">:</span> <span class="pl-mf">0.2</span><span class="pl-kt">rem</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--link-underline-thickness</span><span class="pl-p">:</span> <span class="pl-nf">max</span><span class="pl-p">(</span><span class="pl-mf">0.1</span><span class="pl-kt">rem</span><span class="pl-p">,</span> <span class="pl-mi">1</span><span class="pl-kt">px</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--link-weight</span><span class="pl-p">:</span> <span class="pl-kc">bold</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nt">body</span><span class="pl-o">[</span><span class="pl-nt">data-theme</span><span class="pl-o">=</span><span class="pl-s2">&#34;forest&#34;</span><span class="pl-o">]</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--alpha-link-visited</span><span class="pl-p">:</span> <span class="pl-mf">0.9</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-bg-body</span><span class="pl-p">:</span> <span class="pl-mi">57</span><span class="pl-p">,</span> <span class="pl-mi">76</span><span class="pl-p">,</span> <span class="pl-mi">66</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-bg-select</span><span class="pl-p">:</span> <span class="pl-mi">57</span><span class="pl-p">,</span> <span class="pl-mi">76</span><span class="pl-p">,</span> <span class="pl-mi">66</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-border-select</span><span class="pl-p">:</span> <span class="pl-mi">255</span><span class="pl-p">,</span> <span class="pl-mi">255</span><span class="pl-p">,</span> <span class="pl-mi">255</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-link</span><span class="pl-p">:</span> <span class="pl-mi">238</span><span class="pl-p">,</span> <span class="pl-mi">213</span><span class="pl-p">,</span> <span class="pl-mi">174</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-sponsor-hearts</span><span class="pl-p">:</span> <span class="pl-mi">153</span><span class="pl-p">,</span> <span class="pl-mi">117</span><span class="pl-p">,</span> <span class="pl-mi">90</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-text</span><span class="pl-p">:</span> <span class="pl-mi">255</span><span class="pl-p">,</span> <span class="pl-mi">255</span><span class="pl-p">,</span> <span class="pl-mi">255</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--icon-select</span><span class="pl-p">:</span> <span class="pl-nf">var</span><span class="pl-p">(</span><span class="pl-o">--</span><span class="pl-kc">icon</span><span class="pl-o">-</span><span class="pl-n">select</span><span class="pl-o">-</span><span class="pl-n">forest</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--link-underline-offset</span><span class="pl-p">:</span> <span class="pl-mf">0.2</span><span class="pl-kt">rem</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--link-underline-thickness</span><span class="pl-p">:</span> <span class="pl-nf">max</span><span class="pl-p">(</span><span class="pl-mf">0.1</span><span class="pl-kt">rem</span><span class="pl-p">,</span> <span class="pl-mi">1</span><span class="pl-kt">px</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nt">body</span><span class="pl-o">[</span><span class="pl-nt">data-theme</span><span class="pl-o">=</span><span class="pl-s2">&#34;ocean&#34;</span><span class="pl-o">]</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--alpha-link-visited</span><span class="pl-p">:</span> <span class="pl-mf">0.85</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-bg-body</span><span class="pl-p">:</span> <span class="pl-mi">82</span><span class="pl-p">,</span> <span class="pl-mi">179</span><span class="pl-p">,</span> <span class="pl-mi">201</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-bg-select</span><span class="pl-p">:</span> <span class="pl-mi">123</span><span class="pl-p">,</span> <span class="pl-mi">203</span><span class="pl-p">,</span> <span class="pl-mi">222</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-border-select</span><span class="pl-p">:</span> <span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-mi">43</span><span class="pl-p">,</span> <span class="pl-mi">77</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-link</span><span class="pl-p">:</span> <span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-mi">43</span><span class="pl-p">,</span> <span class="pl-mi">77</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-sponsor-hearts</span><span class="pl-p">:</span> <span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-mi">43</span><span class="pl-p">,</span> <span class="pl-mi">77</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--color-text</span><span class="pl-p">:</span> <span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-mi">43</span><span class="pl-p">,</span> <span class="pl-mi">77</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--icon-select</span><span class="pl-p">:</span> <span class="pl-nf">var</span><span class="pl-p">(</span><span class="pl-o">--</span><span class="pl-kc">icon</span><span class="pl-o">-</span><span class="pl-n">select</span><span class="pl-o">-</span><span class="pl-n">ocean</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--link-underline-offset</span><span class="pl-p">:</span> <span class="pl-mf">0.3</span><span class="pl-kt">rem</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nv">--link-underline-thickness</span><span class="pl-p">:</span> <span class="pl-mf">0.2</span><span class="pl-kt">rem</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>With this approach, every time the <code>data-theme</code> on <code>body</code> changes to a known
value (<code>moon</code>, <code>forest</code>, or <code>ocean</code>), the CSS variables for that theme get used,
and boom! You have theming! Great!</p>
<p>But what happens if they refresh the page…?</p>
<h2 id="back-to-the-js">Back to the JS</h2>
<p>Oh no! The <code>&lt;select&gt;</code> isn’t populated with what the reader selected, and their
theme isn’t the one they chose, either!</p>
<p>No worries! Let’s get access to the <code>prefTheme</code> as the page is loading:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">prefTheme</span><span class="pl-o">:</span> <span class="pl-nx">getPrefTheme</span><span class="pl-p">(),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">getPrefTheme</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">localPrefTheme</span> <span class="pl-o">=</span> <span class="pl-nx">localStorage</span><span class="pl-p">.</span><span class="pl-nx">getItem</span><span class="pl-p">(</span><span class="pl-s1">&#39;prefTheme&#39;</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-cm">/*
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">   * Make sure only our current themes are the ones that
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">   * can be set.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">   *
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">   * Note: I should source the theme names elsewhere for a single
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">   * source of truth, but I&#39;ll figure that out another time. The
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">   * `&lt;select&gt;` isn&#39;t available at this point in the rendering
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">   * for us to look at the `&lt;option&gt;`s...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">   */</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">([</span><span class="pl-s1">&#39;moon&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;forest&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;ocean&#39;</span><span class="pl-p">].</span><span class="pl-nx">includes</span><span class="pl-p">(</span><span class="pl-nx">localPrefTheme</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">localPrefTheme</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span> <span class="pl-k">else</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">matchMedia</span><span class="pl-p">(</span><span class="pl-s1">&#39;(prefers-color-scheme: dark)&#39;</span><span class="pl-p">).</span><span class="pl-nx">matches</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-o">?</span> <span class="pl-s1">&#39;moon&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-o">:</span> <span class="pl-s1">&#39;ocean&#39;</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span><span class="pl-p">.</span><span class="pl-nx">setTheme</span><span class="pl-p">(</span><span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span><span class="pl-p">.</span><span class="pl-nx">prefTheme</span><span class="pl-p">);</span></span></span></code></pre>
<p>When the page is loading, we try to get the <code>prefTheme</code> from <code>localStorage</code>, and
if the value doesn’t match any of our current themes, then we use
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia"><code>matchMedia</code></a>
to figure out if we should serve up a dark or light theme to the user.</p>
<p>Once we have a theme value stored, we go ahead and call
<code>window.site.setTheme(window.site.prefTheme)</code> just in case to make sure we have
something stored for next time. We could do this in <code>getPrefTheme()</code> in the
<code>matchMedia</code> logic branch, but doing so feels a little dirty to me.</p>
<p>Lastly for themes, we need to use <code>window.site.prefTheme</code> to select the correct
dropdown option, and we can do that by sliding the work in where we have our
<code>&lt;select&gt;</code>’s <code>addEventListener</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">themeEl</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">themeEl</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">.</span><span class="pl-nx">querySelector</span><span class="pl-p">(</span><span class="pl-sb">`[value=&#34;</span><span class="pl-si">${</span><span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span><span class="pl-p">.</span><span class="pl-nx">prefTheme</span><span class="pl-si">}</span><span class="pl-sb">&#34;]`</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">.</span><span class="pl-nx">selected</span> <span class="pl-o">=</span> <span class="pl-s1">&#39;selected&#39;</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">themeEl</span><span class="pl-p">.</span><span class="pl-nx">addEventListener</span><span class="pl-p">(</span><span class="pl-s1">&#39;change&#39;</span><span class="pl-p">,</span> <span class="pl-nx">e</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span><span class="pl-p">.</span><span class="pl-nx">setTheme</span><span class="pl-p">(</span><span class="pl-nx">e</span><span class="pl-p">.</span><span class="pl-nx">target</span><span class="pl-p">.</span><span class="pl-nx">value</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">});</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<h2 id="code-recap">Code recap</h2>
<p>If you got lost along the way, no worries! Here’s a recap of all the code we
did, and if you want to see it in action, be sure to check out the code used in
<a href="./examples/theming-static-sites/index.html">the example</a>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">body</span> <span class="pl-na">data-theme</span><span class="pl-o">=</span><span class="pl-s">&#34;moon&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">(()</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">prefTheme</span><span class="pl-o">:</span> <span class="pl-nx">getPrefTheme</span><span class="pl-p">();</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">setTheme</span><span class="pl-o">:</span> <span class="pl-p">(</span><span class="pl-nx">name</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">body</span><span class="pl-p">.</span><span class="pl-nx">setAttribute</span><span class="pl-p">(</span><span class="pl-s1">&#39;data-theme&#39;</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-nx">localStorage</span><span class="pl-p">.</span><span class="pl-nx">setItem</span><span class="pl-p">(</span><span class="pl-s1">&#39;prefTheme&#39;</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-kd">function</span> <span class="pl-nx">getPrefTheme</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kr">const</span> <span class="pl-nx">localPrefTheme</span> <span class="pl-o">=</span> <span class="pl-nx">localStorage</span><span class="pl-p">.</span><span class="pl-nx">getItem</span><span class="pl-p">(</span><span class="pl-s1">&#39;prefTheme&#39;</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-k">if</span> <span class="pl-p">([</span><span class="pl-s1">&#39;moon&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;forest&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;ocean&#39;</span><span class="pl-p">].</span><span class="pl-nx">includes</span><span class="pl-p">(</span><span class="pl-nx">localPrefTheme</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-k">return</span> <span class="pl-nx">localPrefTheme</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">}</span> <span class="pl-k">else</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-k">return</span> <span class="pl-nx">matchMedia</span><span class="pl-p">(</span><span class="pl-s1">&#39;(prefers-color-scheme: dark)&#39;</span><span class="pl-p">).</span><span class="pl-nx">matches</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">?</span> <span class="pl-s1">&#39;moon&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">:</span> <span class="pl-s1">&#39;ocean&#39;</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span><span class="pl-p">.</span><span class="pl-nx">setTheme</span><span class="pl-p">(</span><span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span><span class="pl-p">.</span><span class="pl-nx">prefTheme</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">})();</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">main</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">h1</span><span class="pl-p">&gt;</span>Static site theming example<span class="pl-p">&lt;/</span><span class="pl-nt">h1</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">form</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">&lt;</span><span class="pl-nt">label</span> <span class="pl-na">for</span><span class="pl-o">=</span><span class="pl-s">&#34;select-theme&#34;</span><span class="pl-p">&gt;</span>Theme<span class="pl-p">&lt;/</span><span class="pl-nt">label</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">       <span class="pl-p">&lt;</span><span class="pl-nt">select</span> <span class="pl-na">data-select-theme</span><span class="pl-o">=</span><span class="pl-s">&#34;&#34;</span> <span class="pl-na">id</span><span class="pl-o">=</span><span class="pl-s">&#34;select-theme&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">         <span class="pl-p">&lt;</span><span class="pl-nt">option</span> <span class="pl-na">value</span><span class="pl-o">=</span><span class="pl-s">&#34;moon&#34;</span><span class="pl-p">&gt;</span>That<span class="pl-ni">&amp;apos;</span>s No Moon<span class="pl-p">&lt;/</span><span class="pl-nt">option</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">         <span class="pl-p">&lt;</span><span class="pl-nt">option</span> <span class="pl-na">value</span><span class="pl-o">=</span><span class="pl-s">&#34;forest&#34;</span><span class="pl-p">&gt;</span>Forest<span class="pl-p">&lt;/</span><span class="pl-nt">option</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">         <span class="pl-p">&lt;</span><span class="pl-nt">option</span> <span class="pl-na">value</span><span class="pl-o">=</span><span class="pl-s">&#34;ocean&#34;</span><span class="pl-p">&gt;</span>Ocean<span class="pl-p">&lt;/</span><span class="pl-nt">option</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">       <span class="pl-p">&lt;/</span><span class="pl-nt">select</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">     <span class="pl-p">&lt;/</span><span class="pl-nt">form</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">main</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">async</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">(()</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-kr">const</span> <span class="pl-nx">themeEl</span> <span class="pl-o">=</span> <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">querySelector</span><span class="pl-p">(</span><span class="pl-s1">&#39;[data-select-theme]&#39;</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">themeEl</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">themeEl</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-p">.</span><span class="pl-nx">querySelector</span><span class="pl-p">(</span><span class="pl-sb">`[value=&#34;</span><span class="pl-si">${</span><span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span><span class="pl-p">.</span><span class="pl-nx">prefTheme</span><span class="pl-si">}</span><span class="pl-sb">&#34;]`</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-p">.</span><span class="pl-nx">selected</span> <span class="pl-o">=</span> <span class="pl-s1">&#39;selected&#39;</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">themeEl</span><span class="pl-p">.</span><span class="pl-nx">addEventListener</span><span class="pl-p">(</span><span class="pl-s1">&#39;change&#39;</span><span class="pl-p">,</span> <span class="pl-nx">e</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">site</span><span class="pl-p">.</span><span class="pl-nx">setTheme</span><span class="pl-p">(</span><span class="pl-nx">e</span><span class="pl-p">.</span><span class="pl-nx">target</span><span class="pl-p">.</span><span class="pl-nx">value</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">});</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">})();</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span></span></span></code></pre>
<hr />
<p>Thanks for reading!<br />
— Robert</p>]]></summary>
</entry>
<entry>
    <title>People are so much more than cogs</title>
    <link href="https://robertwpearce.com/people-are-so-much-more-than-cogs.html" />
    <id>https://robertwpearce.com/people-are-so-much-more-than-cogs.html</id>
    <published>2023-07-21T00:00:00Z</published>
    <updated>2023-07-21T16:14:00Z</updated>
    <summary type="html"><![CDATA[<p>I’m re-reading the <em>Dune</em> series for the nth time, and this time, I’m doing it
with a group via the excellent <a href="https://www.loreparty.com/show/gom-jabbar/">Gom Jabbar
podcast</a>. There are some seriously
problematic themes in <i>God Emperor of Dune</i>, but the quote below has stuck with me
for weeks and has illuminated life for me in a way I haven’t experienced in
years.</p>
<figure>
  <blockquote>
    "I point out to you […] a lesson learned from past over-machined societies
    which you appear not to have learned. The devices themselves condition the
    users to employ each other the way they employ machines."
  </blockquote>
  <figcaption>
    — Leto II, <cite>God Emperor of Dune</cite>
  </figcaption>
</figure>
<p>This quote helped me wrap my head around ways we might inadvertantly dehumanize
one another by assigning those around us rigid roles in the context of our daily
lives and businesses. Like removing extra dough around a cookie cutter baking
shape, we may discard from others that wealth of life and creativity that makes
us human, leaving behind only the shapes we expect to see, and this limits and
devalues ourselves and everyone around us.</p>
<p>Machines are everywhere and, depending on where you live, are involved in nearly
everything we do. We give them commands, and they do something. When a part is
broken, we replace that part. When they no longer suit our needs or are broken
enough, we discard them. If we are exposed to this thinking every day for most
of our lives, how does that affect how we treat and interact with people around
us? Through force of habit, do we unintentionally treat others similarly to how
we treat machines? Have we always done this, but our current technology makes
this more ingrained since it is all-engrossing and demands our constant
attention?</p>
<p>The next time you find yourself about to eliminate someone’s “role” at work and
lay them off, ignore someone bagging your groceries, grow impatient with your
music teacher’s stories, or disregard someone’s ideas because of their station,
try to stop and remember that the person before you is a vibrant, autonomous,
wonderful being that brings their entire lifetime of valuable experiences before
you and exists far outside the box you and/or society put them in.</p>]]></summary>
</entry>
<entry>
    <title>One does not simply use GHCup on macOS M1</title>
    <link href="https://robertwpearce.com/one-does-not-simply-use-ghcup-on-macos-m1.html" />
    <id>https://robertwpearce.com/one-does-not-simply-use-ghcup-on-macos-m1.html</id>
    <published>2023-03-20T00:00:00Z</published>
    <updated>2023-03-22T11:51:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>The <a href="https://www.haskell.org/ghcup/">GHCup</a> tool is the official installer for
core <a href="https://www.haskell.org">Haskell</a> tools: <a href="https://cabal.readthedocs.io/en/stable/">cabal</a>,
<a href="https://docs.haskellstack.org/en/stable/">stack</a>,
<a href="https://haskell-language-server.readthedocs.io/en/latest/">haskell-language-server</a>,
and <a href="https://www.haskell.org/ghc/">ghc</a>.</p>
<p>I usually use Haskell through <a href="https://nixos.org">Nix</a> (I’m liking
<a href="https://devenv.sh/">devenv.sh</a>, too), and I’ve also used it through Docker, but
I was frustrated with build times and wanted to try the official Haskell way.</p>
<p>Unfortunately, I had a rough time trying to use GHCup on a macOS M1 (Ventura
13.2.1), so I documented trying to build a small Haskell project of mine,
<a href="https://hackage.haskell.org/package/slugger">slugger</a>, with it.</p>
<h2 id="a-note-about-homebrew">A note about Homebrew</h2>
<p>I use <a href="https://brew.sh/">Homebrew</a> for installing all sorts of CLI tools and
apps for macOS (here’s my personal
<a href="https://github.com/rpearce/dotfiles/blob/main/conf/Brewfile">Brewfile</a>).</p>
<p>While I will use it for something else later in this guide, I could not get
<code>ghcup</code> to work properly when installed via Homebrew, and trying to upgrade
GHCup through its interface conflicted with the Homebrew install. Instead, I
will use the installer found on <a href="https://www.haskell.org/ghcup/">the GHCup page</a>.</p>
<h2 id="the-library-i-tried-to-build">The library I tried to build</h2>
<p>The example library I tried building was my URI slug library,
<a href="https://github.com/rpearce/slugger">slugger</a>.</p>
<h2 id="installing-ghcup">Installing GHCup</h2>
<p>I like to keep my <code>$HOME</code> directory clean by having tools adhere to the <a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG
spec</a>.
I read that if I wanted GHCup to use <code>XDG</code>, I needed to export this variable in
the shell where the installer was going to run:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">export</span> <span class="pl-nv">GHCUP_USE_XDG_DIRS</span><span class="pl-o">=</span><span class="pl-s2">&#34;true&#34;</span></span></span></code></pre>
<p><em><a href="https://github.com/rpearce/dotfiles/blob/fbda507ce4908ec8689d388c6e4ffe0c4900d318/conf/zsh/.zshenv#L3-L8">Here are my XDG environment variables.</a></em></p>
<p>Since I always want this to be true, <a href="https://github.com/rpearce/dotfiles/blob/fbda507ce4908ec8689d388c6e4ffe0c4900d318/conf/zsh/.zshenv#L22">I include that in my <code>.zshenv</code> dotfile
just in case</a>.</p>
<p>Next, I installed GHCup:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh</span></span></code></pre>
<p>This is an interactive installer, so there was a bit of output and questions.</p>
<p><a href="./images/ghcup-install-llvm-note.webp">
<img
    alt="GHCup installer messages"
    decoding="async"
    height="482"
    loading="lazy"
    src="./images/ghcup-install-llvm-note.webp"
    width="600"
  />
</a></p>
<p>Tip: if you run this installer, make sure you read the messages.</p>
<h2 id="including-the-ghcup-environment">Including the GHCup environment</h2>
<p>The script asked if it could append something to the end of my <code>.zshrc</code>
file. I prefer to own my environment setup, so I let it do its thing, inspected
the file to make sure it looked good, then I changed the sourcing code into a
style I prefer:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">ghcup_script_path</span><span class="pl-o">=</span><span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">XDG_DATA_HOME</span><span class="pl-si">}</span><span class="pl-s2">/ghcup/env&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-o">[[</span> -f <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">ghcup_script_path</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span> <span class="pl-o">]]</span> <span class="pl-o">&amp;&amp;</span> <span class="pl-nb">source</span> <span class="pl-s2">&#34;</span><span class="pl-si">${</span><span class="pl-nv">ghcup_script_path</span><span class="pl-si">}</span><span class="pl-s2">&#34;</span></span></span></code></pre>
<p>This adds some Haskell bin-related directories to <code>$PATH</code> if they aren’t already
there.</p>
<h2 id="running-the-ghcup-terminal-user-interface">Running the GHCup terminal user interface</h2>
<p>Once this was all done, I opened a new shell window and ran</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">ghcup tui</span></span></code></pre>
<p>TUI is an acronym for “terminal user interface”.</p>
<p><a href="./images/ghcup-tui.webp">
<img
    alt="GHCup terminal user interface"
    decoding="async"
    height="386.5"
    loading="lazy"
    src="./images/ghcup-tui.webp"
    width="600"
  />
</a></p>
<p>I used the interface to install the recommended tool versions, and this was
really easy! Well done, GHCup crew.</p>
<p>Then I went to go see if I could build <code>slugger</code>.</p>
<h2 id="building-slugger-failure-1-llvm">Building slugger: failure #1 (LLVM)</h2>
<p>When I went to the <code>slugger</code> project directory, I ran <code>cabal v2-build</code>, and some
LLVM errors printed to the screen.</p>
<p><a href="./images/ghcup-cabal-build-fail-llvm.webp">
<img
    alt="LLVM not found when trying to build the slugger project"
    decoding="async"
    height="377"
    loading="lazy"
    src="./images/ghcup-cabal-build-fail-llvm.webp"
    width="600"
  />
</a></p>
<p>Notably:</p>
<blockquote>
<p>Warning: Couldn’t figure out LLVM version! Make sure you have installed LLVM
between [9 and 13]</p>
</blockquote>
<p>Remember how I said to make sure you read the installer messages? Yeah. I
didn’t.</p>
<blockquote>
<p>On Darwin M1 you might also need a working llvm installed (e.g. via brew) and
have the toolchain exposed in the PATH.</p>
</blockquote>
<p><em>Update: User bgamari on lobste.rs had a valuable insight into <a href="https://lobste.rs/s/cbl1yc/one_does_not_simply_use_ghcup_on_macos_m1#c_lcaxqm">why installing
LLVM is recommended by GHCup</a>.</em></p>
<h2 id="building-slugger-failures-2-4-also-llvm">Building slugger: failures #2-4 (also LLVM)</h2>
<p>As suggested by the warnings above, I added <code>brew llvm@9</code> to my <code>Brewfile</code>,
installed it, and tried to <code>cabal v2-build</code> the <code>slugger</code> project.</p>
<p>That didn’t work (same sort of issue).</p>
<p>I tried <code>llvm@10</code>, <code>llvm@11</code>, and <code>llvm@12</code>.</p>
<p>None of those worked, either! Would <code>llvm@13</code> work? Maybe, maybe, maybe…</p>
<h2 id="building-slugger-failure-5-ghc-and-llvm">Building slugger: failure #5 (GHC and LLVM)</h2>
<p><em>Update: This section may not be necessary. I went back, disabled this option,
and I’m able still able to build the library. I don’t recall this being my
experience the first time around, though.</em></p>
<p>It seems none of these will work if <code>ghc</code> doesn’t know to use LLVM.</p>
<p>I keep a <a href="https://github.com/rpearce/dotfiles/blob/main/conf/.cabal.conf">cabal config file in my
dotfiles</a> and it
had a section, <code>program-default-options</code>, that contained a <code>ghc-options</code> key for
passing flags to ghc.</p>
<p>Here’s how I told GHC about LLVM:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">program-default-options
</span></span><span class="pl-line"><span class="pl-cl">  ghc-options: -fllvm</span></span></code></pre>
<p>There’s more information about that on the <a href="https://downloads.haskell.org/ghc/latest/docs/users_guide/codegens.html#llvm-code-generator-fllvm">Haskell GHC Backends
doc</a>.</p>
<p>Did that make a difference? Yep!</p>
<h2 id="building-slugger-failure-6-missing-foreign-libraries">Building slugger: failure #6 (missing foreign libraries)</h2>
<p>Aha! A different error.</p>
<p><a href="./images/ghcup-cabal-build-fail-icu4c.webp">
<img
    alt="Missing foreign libraries terminal error"
    decoding="async"
    height="499.5"
    loading="lazy"
    src="./images/ghcup-cabal-build-fail-icu4c.webp"
    width="600"
  />
</a></p>
<blockquote>
<p>cabal-3.6.2.0 Missing dependencies on foreign libraries:<br />
Missing (or bad) C libraries: icuuc, icui18n, icudata</p>
</blockquote>
<p>This one stemmed from trying to build a dependency,
<a href="https://hackage.haskell.org/package/text-icu">text-icu</a>, and it seemed I was
missing some libraries it expected to find on the OS.</p>
<p>I saw some references on GitHub issues to the <code>icu4c</code> tool, but I was luckily
able to find <a href="https://guide.aelve.com/haskell/missing-dependency-on-a-foreign-library-vf6h3d0p#item-a06pn7xw">this archived “Missing dependency on a foreign library”
guide</a>
that simply told me what to do:</p>
<ol>
<li><p><code>brew install icu4c</code></p></li>
<li><p>If you’re using stack, add this to <code>~/.stack/config.yaml</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">extra-include-dirs:
</span></span><span class="pl-line"><span class="pl-cl">- /usr/local/opt/icu4c/include
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">extra-lib-dirs:
</span></span><span class="pl-line"><span class="pl-cl">- /usr/local/opt/icu4c/lib</span></span></code></pre></li>
</ol>
<p>Unfortunately, none of this worked out of the box for me for two reasons:</p>
<ol>
<li>I’m not using <code>stack</code></li>
<li>Homebrew uses <code>/opt/homebrew/</code> for Apple Silicon—not <code>/usr/local/</code></li>
</ol>
<p>But those config options looked <em>exactly the same</em> as the recommendation from
the build warning above, and that gave me some things to try:</p>
<blockquote>
<p>If the libraries are already installed but in a non-standard location then you
can use the flags <code>--extra-include-dirs=</code> and <code>--extra-lib-dirs=</code> to specify where
they are.</p>
</blockquote>
<h2 id="fixing-the-missing-foreign-libraries-issue">Fixing the missing foreign libraries issue</h2>
<p>It turns out that my <code>cabal.conf</code> file had <code>extra-include-dirs</code> and
<code>extra-lib-dirs</code> in it, so I didn’t need to pass paths every time I tried to
build with cabal.</p>
<p>I don’t regularly edit cabal config files, so I took the <code>stack</code> <em>YAML</em> config
above and tried it:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">extra-include-dirs:
</span></span><span class="pl-line"><span class="pl-cl">- /opt/homebrew/opt/icu4c/include
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">extra-lib-dirs:
</span></span><span class="pl-line"><span class="pl-cl">- /opt/homebrew/opt/icu4c/lib</span></span></code></pre>
<p>Nope, that didn’t work. I tried indenting the <code>-</code> to see if the config file
liked that.</p>
<p>Nope.</p>
<p>While this config file might, at a glance, resemble YAML, it isn’t—it seems to
resemble (or even be) a <code>.cabal</code> file (<a href="mailto:me@robertwpearce.com">email me</a> if
you know, please!). Here was a correct way to write them:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">extra-include-dirs:
</span></span><span class="pl-line"><span class="pl-cl">  /opt/homebrew/opt/icu4c/include
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">extra-lib-dirs:
</span></span><span class="pl-line"><span class="pl-cl">  /opt/homebrew/opt/icu4c/lib</span></span></code></pre>
<h2 id="sweet-success">Sweet success</h2>
<p>With high hopes, I ran <code>cabal v2-build</code> again, and it worked!</p>
<p><a href="./images/ghcup-cabal-build-success.webp">
<img
    alt="Successful build result and test of the slugger library"
    decoding="async"
    height="482"
    loading="lazy"
    src="./images/ghcup-cabal-build-success.webp"
    width="600"
  />
</a></p>
<p>I was successfully able to build my little library and test it out with <code>cabal</code>.</p>
<h2 id="personal-retrospective-on-the-experience">Personal retrospective on the experience</h2>
<p>There are a number of places here where, if I’d have paid closer attention to
(admittedly helpful) walls of text, I’d have been led to solutions faster.
That is unquestionably my fault!</p>
<p>That said, the errors don’t cover everything you have to do (like the <code>-fllvm</code>
GHC flag), and this overall experience on macOS was rough for me.</p>
<p><strong>I am grateful for all the effort put into GHCup, and I know it takes time and
money to make things simple.</strong></p>
<p>For now, even though Nix’s story isn’t one of simplicity, either, I’m going to
mostly stick with building Haskell projects that way. However, I’ll keep my
options open and periodically try things the GHCup way, as well.</p>
<hr />
<p>Thanks for reading!<br />
— Robert</p>]]></summary>
</entry>
<entry>
    <title>The hakyll-nix-template Tutorial</title>
    <link href="https://robertwpearce.com/the-hakyll-nix-template-tutorial.html" />
    <id>https://robertwpearce.com/the-hakyll-nix-template-tutorial.html</id>
    <published>2023-02-12T00:00:00Z</published>
    <updated>2023-02-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>If you’re looking to use <a href="https://jaspervdj.be/hakyll">hakyll</a> with
<a href="https://nixos.org">nix</a> to build static sites, this reference article was made
for you!</p>
<p>We will be working with the
<a href="https://github.com/rpearce/hakyll-nix-template/">hakyll-nix-template</a>, so go
ahead and pull that up in a new browser tab. Its README also contains info on
all the features that are provided.</p>
<h2 id="overview">Overview</h2>
<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#copying-the-template">Copying the template</a></li>
<li><a href="#building-the-project">Building the project</a></li>
<li><a href="#getting-into-the-haskell-and-nix-dev-environment">Getting into the haskell and nix dev environment</a></li>
<li><a href="#personalizing-the-project-build">Personalizing the project build</a></li>
<li><a href="#adding-your-first-post">Adding your first post</a></li>
<li><a href="#working-with-page-metadata">Working with page metadata</a></li>
<li><a href="#determining-what-static-files-are-copied-over">Determining what static files are copied over</a></li>
<li><a href="#understanding-the-github-action-workflow">Understanding the GitHub action workflow</a></li>
<li><a href="#enabling-github-pages">Enabling GitHub Pages</a></li>
<li><a href="#deploying-to-your-domain">Deploying to your domain</a></li>
<li><a href="#todos-for-hakyll-nix-template">TODOs for hakyll-nix-template</a>
<ul>
<li><a href="#todo-caching-and-hashing">TODO: Caching and hashing</a></li>
<li><a href="#todo-use-pygments-for-syntax-highlighting">TODO: Use pygments for syntax highlighting</a></li>
</ul></li>
<li><a href="#other-hakyll-posts">Other hakyll posts</a></li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>If you don’t have <a href="https://nixos.org">nix</a>, follow <a href="https://nixos.org/download.html">the nix installation
instructions</a>.</p>
<p>Once you have nix installed, follow the <a href="https://nixos.wiki/wiki/Flakes">nix flakes setup
instructions</a>, and then I highly recommend
installing <a href="https://www.cachix.org">cachix</a>, as well.</p>
<p>If it helps, here is <a href="https://github.com/rpearce/dotfiles/blob/809e8fc298291c9819d4d2ffcf1d99b74a3931fe/install#L184-L217">my <code>install_nix</code> bash
function</a>,
and here is my <a href="https://github.com/rpearce/dotfiles/blob/main/conf/.nix.conf"><code>${XDG_CONFIG_HOME}/nix/nix.conf</code>
file</a> (note: on
macOS, this will likely be <code>~/.config/nix/nix.conf</code>). Feel free
to copy the conf file, and just remove <code>https://rpearce.cachix.org</code> from
<code>substituters</code> and <code>rpearce.cachix.org-1:...=</code> from the <code>trusted-public-keys</code>
(or replace with your own cache from cachix!).</p>
<p>While you’re at it, we aren’t using <a href="https://devenv.sh">devenv.sh</a> nor
<a href="https://github.com/nix-community/nix-direnv">nix-direnv</a> in this example, but
you should check them out later, too.</p>
<h2 id="copying-the-template">Copying the template</h2>
<p>From the <a href="https://github.com/rpearce/hakyll-nix-template">hakyll-nix-template</a>
page, click “Use this template” and then select “Create a new repository” from
the popover menu.</p>
<p><img
  alt="GitHub's 'Use this template' menu"
  decoding="async"
  height="246"
  loading="lazy"
  src="./images/hnt-copy.webp"
  width="422"
/></p>
<p>Next, create a new repository from the template, filling in the details you want
for the repo.</p>
<p><img
  alt="GitHub form for creating a new repository from a template"
  decoding="async"
  height="600"
  loading="lazy"
  src="./images/hnt-create.webp"
  width="801"
/></p>
<p>After creating the repository, click the “&lt;&gt; Code” button, then choose
your method of cloning the repository.</p>
<p><img
  alt="GitHub's code cloning menu"
  decoding="async"
  height="500"
  loading="lazy"
  src="./images/hnt-clone.webp"
  width="547"
/></p>
<p>Once you’ve chosen your preferred cloning command and ran that in your terminal,
<code>cd</code> into the directory.</p>
<p><img
  alt="Terminal that has cloned the repository and cd'd into the directory"
  decoding="async"
  height="520"
  loading="lazy"
  src="./images/hnt-clone-result.webp"
  width="968"
/></p>
<p>Alright! We’re ready to build and personalize our project.</p>
<h2 id="building-the-project">Building the project</h2>
<p>Run <code>nix build</code>, answer any substituters trust prompts, and then go do something
else for a while. The first run takes a while, and how long it takes depends on
connection speed, processing speed, and — most importantly — what caches you
have set up in <code>nix.conf</code> (and/or <code>flake.nix</code>).</p>
<p>Once that is all done, you’ll have a brand new <code>result/</code> directory available
that is a symlink to <code>/nix/store/&lt;HASH&gt;-website/</code>. For this blog, it looks like
this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">result/
</span></span><span class="pl-line"><span class="pl-cl">└── dist/
</span></span><span class="pl-line"><span class="pl-cl">  ├── CNAME
</span></span><span class="pl-line"><span class="pl-cl">  ├── _config.yml
</span></span><span class="pl-line"><span class="pl-cl">  ├── announcing-react-medium-image-zoom-v4.html
</span></span><span class="pl-line"><span class="pl-cl">  ├── asynchronously-loading-scripts.html
</span></span><span class="pl-line"><span class="pl-cl">  ├── atom.xml
</span></span><span class="pl-line"><span class="pl-cl">  ├── be-better.html
</span></span><span class="pl-line"><span class="pl-cl">  ├── behaviour-your-team.html
</span></span><span class="pl-line"><span class="pl-cl">  ├── berlin.html
</span></span><span class="pl-line"><span class="pl-cl">  ├── build-your-team-an-accessible-shareable-component-library.html
</span></span><span class="pl-line"><span class="pl-cl">  ├── catch-low-hanging-accessibility-fruit-with-axe-core.html
</span></span><span class="pl-line"><span class="pl-cl">  ├── chief.html
</span></span><span class="pl-line"><span class="pl-cl">  ├── css
</span></span><span class="pl-line"><span class="pl-cl">  │   ├── article.css
</span></span><span class="pl-line"><span class="pl-cl">  │   ├── default.css
</span></span><span class="pl-line"><span class="pl-cl">  │   └── home.css
</span></span><span class="pl-line"><span class="pl-cl">  ├── delegate-dont-dump.html
</span></span><span class="pl-line"><span class="pl-cl">  ├── ...</span></span></code></pre>
<p>This is your static output! While you could run <code>cd result/dist</code> and either <code>npx serve .</code> or <code>python -m SimpleHTTPServer</code>, let’s do this the
<code>hakyll-nix-template</code> way:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ nix run . watch
</span></span><span class="pl-line"><span class="pl-cl">Listening on http://127.0.0.1:8000
</span></span><span class="pl-line"><span class="pl-cl">Initialising...
</span></span><span class="pl-line"><span class="pl-cl">  Creating store...
</span></span><span class="pl-line"><span class="pl-cl">  Creating provider...
</span></span><span class="pl-line"><span class="pl-cl">  Running rules...
</span></span><span class="pl-line"><span class="pl-cl">Checking for out-of-date items
</span></span><span class="pl-line"><span class="pl-cl">Compiling
</span></span><span class="pl-line"><span class="pl-cl">Success</span></span></code></pre>
<p>Lovely! If we navigate to <a href="http://127.0.0.1:8000" class="uri">http://127.0.0.1:8000</a>, we’ll see the default webpage
included in the project.</p>
<h2 id="getting-into-the-haskell-and-nix-dev-environment">Getting into the haskell and nix dev environment</h2>
<p>In a new terminal pane or window, run <code>nix develop</code> (note: this may take a
while the first time):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ nix develop
</span></span><span class="pl-line"><span class="pl-cl">[hakyll-nix]λ</span></span></code></pre>
<p>When you have <code>[hakyll-nix]λ</code> as your prompt, you know that you’re in a nix
shell. This comes preloaded with <em>most</em> of your existing CLI tools, plus
<code>cabal</code>, <code>ghc</code>, <code>haskell-language-server</code>, and <code>hlint</code>. If you want it to be
exactly your environment plus the nix develop shell, check out
<a href="https://github.com/nix-community/nix-direnv">nix-direnv</a>.</p>
<p>At this point, if you’re using Vim, for example, you can run <code>vim .</code> and open
the project up <em>with access to the aforementioned tools</em>.</p>
<p>Now, it’s time to customize the project for you.</p>
<h2 id="personalizing-the-project-build">Personalizing the project build</h2>
<p>First, go back to your window where you can <code>nix run . watch</code> and cancel that;
e.g., press <code>ctrl + c</code>.</p>
<p>Next, using your editor, open <code>ssg/src/Main.hs</code>, and read over the
<code>PERSONALIZATION</code> section near the top:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">------------------</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- PERSONALIZATION</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">mySiteName</span> <span class="pl-ow">::</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">mySiteName</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;My Site Name&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">mySiteRoot</span> <span class="pl-ow">::</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">mySiteRoot</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;https://my-site.com&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedTitle</span> <span class="pl-ow">::</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedTitle</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;My Site&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedDescription</span> <span class="pl-ow">::</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedDescription</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;My Site Description&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedAuthorName</span> <span class="pl-ow">::</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedAuthorName</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;My Name&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedAuthorEmail</span> <span class="pl-ow">::</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedAuthorEmail</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;me@myemail.com&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedRoot</span> <span class="pl-ow">::</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">myFeedRoot</span> <span class="pl-ow">=</span> <span class="pl-n">mySiteRoot</span></span></span></code></pre>
<p>This area contains all the high level, site-based customization text and root
URLs for you to update. Go ahead and do that.</p>
<p>Below this area, you’ll find the <code>CONFIG</code> section:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- Default configuration: https://github.com/jaspervdj/hakyll/blob/cd74877d41f41c4fba27768f84255e797748a31a/lib/Hakyll/Core/Configuration.hs#L101-L125</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">config</span> <span class="pl-ow">::</span> <span class="pl-kt">Configuration</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">config</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">defaultConfiguration</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-n">destinationDirectory</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;dist&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">ignoreFile</span> <span class="pl-ow">=</span> <span class="pl-n">ignoreFile&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">previewHost</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;127.0.0.1&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">previewPort</span> <span class="pl-ow">=</span> <span class="pl-mi">8000</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">providerDirectory</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;src&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">storeDirectory</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;ssg/_cache&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">tmpDirectory</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;ssg/_tmp&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">where</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">ignoreFile&#39;</span> <span class="pl-n">path</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-o">|</span> <span class="pl-s">&#34;.&#34;</span>    <span class="pl-p">`</span><span class="pl-n">isPrefixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">False</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-o">|</span> <span class="pl-s">&#34;#&#34;</span>    <span class="pl-p">`</span><span class="pl-n">isPrefixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">True</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-o">|</span> <span class="pl-s">&#34;~&#34;</span>    <span class="pl-p">`</span><span class="pl-n">isSuffixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">True</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-o">|</span> <span class="pl-s">&#34;.swp&#34;</span> <span class="pl-p">`</span><span class="pl-n">isSuffixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">True</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-o">|</span> <span class="pl-n">otherwise</span> <span class="pl-ow">=</span> <span class="pl-kt">False</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-kr">where</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-n">takeFileName</span> <span class="pl-n">path</span></span></span></code></pre>
<p>This section specifically deals with your hakyll config. If you want to change
the development server port, host, content, source directory, what files are or
aren’t ignored, and some caching things, then you can do so here.</p>
<p>The rest of the file is all related to hakyll and the build, so if you know
hakyll already, this should feel familiar, and feel free to customize it
however you like.</p>
<p>Do note that any changes you make inside of <code>ssg/</code> means you’ll need to turn
your dev server off and on again.</p>
<h2 id="adding-your-first-post">Adding your first post</h2>
<p>Now that we’ve customized our config, turn the dev server back on with <code>nix run . watch</code>. It’s time to add our first post!</p>
<p>Navigate to the <code>src/posts/</code> folder and add a new markdown file with this naming
format:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">2023-02-10-my-real-post.md</span></span></code></pre>
<p>As you can see from the other posts already in this directory, we have post
metadata (a.k.a. front-matter) and then the post content follows that. For
example:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">---
</span></span><span class="pl-line"><span class="pl-cl">author: &#34;Robert Pearce&#34;
</span></span><span class="pl-line"><span class="pl-cl">authorTwitter: &#34;@RobertWPearce&#34;
</span></span><span class="pl-line"><span class="pl-cl">desc: &#34;Welcome to the fun, probably over-engineered world of nix and haskell to make a website&#34;
</span></span><span class="pl-line"><span class="pl-cl">image: &#34;./images/some-image.webp&#34;
</span></span><span class="pl-line"><span class="pl-cl">keywords: &#34;hakyll, nix, haskell, static site generator&#34;
</span></span><span class="pl-line"><span class="pl-cl">lang: &#34;en&#34;
</span></span><span class="pl-line"><span class="pl-cl">title: &#34;Today, I used hakyll-nix-template&#34;
</span></span><span class="pl-line"><span class="pl-cl">---
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">Hello, world! I am here!</span></span></code></pre>
<p>…but customize this with your own content.</p>
<p>Save the file and watch your dev server reload and pick it up! If you refresh
your browser, you should now see your post on the index page.</p>
<h2 id="working-with-page-metadata">Working with page metadata</h2>
<p>The <code>author</code>, <code>desc</code>, <code>title</code>, and other meta fields from the prior section are
all completely customizable by you! These are fields that you can change,
remove, or add more of, and they are used in your HTML templates in the
<code>src/templates/</code> folder.</p>
<p>If you open <code>src/templates/post.html</code>, you’ll see something like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">main</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">article</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">header</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">&lt;</span><span class="pl-nt">h1</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">&lt;</span><span class="pl-nt">a</span> <span class="pl-na">href</span><span class="pl-o">=</span><span class="pl-s">&#34;.$url$&#34;</span><span class="pl-p">&gt;</span>$title$<span class="pl-p">&lt;/</span><span class="pl-nt">a</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">&lt;/</span><span class="pl-nt">h1</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">&lt;</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">&lt;</span><span class="pl-nt">small</span><span class="pl-p">&gt;</span>$date$<span class="pl-p">&lt;/</span><span class="pl-nt">small</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">        $if(updated)$
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">&lt;</span><span class="pl-nt">small</span><span class="pl-p">&gt;</span>(updated: $updated$)<span class="pl-p">&lt;/</span><span class="pl-nt">small</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">        $endif$
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;/</span><span class="pl-nt">header</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">section</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      $body$
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;/</span><span class="pl-nt">section</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">article</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">main</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>This is all a part of hakyll, but I’ll cover some of this here to make it
easier to understand all in one place.</p>
<p>See <code>$title$</code>? That comes from our post metadata, and <code>updated</code> looks like it’s
an optional field from our metadata, but where does <code>$date$</code> come from? Or
<code>$body$</code>?</p>
<p>In <code>ssg/src/Main.hs</code>, you’ll see <code>postCtx</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">postCtx</span> <span class="pl-ow">::</span> <span class="pl-kt">Context</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">postCtx</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">constField</span> <span class="pl-s">&#34;root&#34;</span> <span class="pl-n">mySiteRoot</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">&lt;&gt;</span> <span class="pl-n">constField</span> <span class="pl-s">&#34;siteName&#34;</span> <span class="pl-n">mySiteName</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">&lt;&gt;</span> <span class="pl-n">dateField</span> <span class="pl-s">&#34;date&#34;</span> <span class="pl-s">&#34;%Y-%m-%d&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">&lt;&gt;</span> <span class="pl-n">defaultContext</span></span></span></code></pre>
<p>This is a post context that gets built up and supplied to the template. Hakyll
has <a href="https://github.com/jaspervdj/hakyll/blob/909e1b3a89b5b3ba5f64840d23ada9b3ac393404/lib/Hakyll/Web/Template/Context.hs#L295-L343">a special <code>dateField</code> helper</a>
that parses a date from your post filename if it begins with a date. It also has
<a href="https://github.com/jaspervdj/hakyll/blob/909e1b3a89b5b3ba5f64840d23ada9b3ac393404/lib/Hakyll/Web/Template/Context.hs#L231-L249"><code>defaultContext</code></a>
which handles things like your post/web page’s body content.</p>
<p>What is significant about this example is that this is a place where you can
pass in values at a global level; note that <code>constField</code> is including some of
the personalization fields you filled out earlier. Passing those in the right
context gives your templates access to them.</p>
<p>You can read more on this from jaspervdj, themself:
<a href="https://jaspervdj.be/hakyll/tutorials/04-compilers.html" class="uri">https://jaspervdj.be/hakyll/tutorials/04-compilers.html</a></p>
<p>Before we wrap this section up, you should know that you can also add as many
templates as you like, as well, and reference them in other templates using this
format:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c">&lt;!-- Inside templates/post.html...  --&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">section</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;section-subscribe&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  $partial(&#34;templates/subscribe.html&#34;)$
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">section</span><span class="pl-p">&gt;</span></span></span></code></pre>
<h2 id="determining-what-static-files-are-copied-over">Determining what static files are copied over</h2>
<p>You will inevitably want to copy static files from your source code into your
outputted build, and this is easily with hakyll’s <code>copyFileCompiler</code> in
<code>ssg/src/Main.hs</code>, just inside the <code>main</code> function.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyllWith</span> <span class="pl-n">config</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">forM_</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">[</span> <span class="pl-s">&#34;CNAME&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-s">&#34;favicon.ico&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-s">&#34;robots.txt&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-s">&#34;_config.yml&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-s">&#34;images/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-s">&#34;js/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-s">&#34;fonts/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">$</span> <span class="pl-nf">\</span><span class="pl-n">f</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">match</span> <span class="pl-n">f</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">route</span> <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">compile</span> <span class="pl-n">copyFileCompiler</span></span></span></code></pre>
<p>Each file or folder glob here exists inside the <code>src/</code> directory. If you have
something you want copied over to the build, this is the place to do it.</p>
<p>If you find you need to ignore a certain file or extension, consult the
<code>ignoreFile'</code> function in the <code>config</code> and add your problematic file, prefix, or
extension to the guard. For example, my macOS likes to add <code>.DS_Store</code>
everywhere, so I did this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">ignoreFile&#39;</span> <span class="pl-n">path</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-o">|</span> <span class="pl-s">&#34;.DS_Store&#34;</span> <span class="pl-o">==</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">True</span> <span class="pl-c1">-- this line</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-o">|</span> <span class="pl-s">&#34;.&#34;</span>    <span class="pl-p">`</span><span class="pl-n">isPrefixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">False</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-o">|</span> <span class="pl-s">&#34;#&#34;</span>    <span class="pl-p">`</span><span class="pl-n">isPrefixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">True</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-o">|</span> <span class="pl-c1">-- ...</span></span></span></code></pre>
<h2 id="understanding-the-github-action-workflow">Understanding the GitHub action workflow</h2>
<p>There GitHub action workflow can be found in <code>.github/workflows/main.yml</code>. There
are two jobs here: <code>build-nix</code> and <code>deploy</code>, and <code>deploy</code> only runs on the
<code>main</code> branch.</p>
<h3 id="the-build-nix-job">The <code>build-nix</code> job</h3>
<p>This is the main job, and it does four things:</p>
<ol>
<li>Install nix</li>
<li>Setup the build to run with cachix</li>
<li>Run <code>nix-build</code></li>
<li>Temporarily upload the result of <code>nix-build</code> for use later (your website
output)</li>
</ol>
<h3 id="the-deploy-job">The <code>deploy</code> job</h3>
<p>When code is pushed to the <code>main</code> branch, the <code>deploy</code> job will:</p>
<ol>
<li>Run the <code>build-nix</code> job</li>
<li>Download the temporarily uploaded website output</li>
<li>If the prior step succeeds, it will checkout the <code>gh-pages</code> branch and
deploy your code to that branch</li>
</ol>
<h3 id="adding-your-cachix_auth_token">Adding your <code>CACHIX_AUTH_TOKEN</code></h3>
<p>You may have noticed a <code>{{ secrets.CACHIX_AUTH_TOKEN }}</code> used in this file. Here
are the steps to setting this up:</p>
<ol>
<li>Follow the <a href="https://docs.cachix.org/getting-started">cachix getting started
guide</a>, and get an auth token that
is explicitly to be used for your GitHub workflow.</li>
<li>On your project GitHub page, click the <code>Settings</code> tab, then click on <code>Secrets    and Variables</code>, then <code>Actions</code>, and add a repository secret called
<code>CACHIX_AUTH_TOKEN</code> where you set that variable. At present, a direct link to
this is <a href="https://github.com/youruser/yoursite.com/settings/secrets/actions" class="uri">https://github.com/youruser/yoursite.com/settings/secrets/actions</a></li>
</ol>
<h2 id="enabling-github-pages">Enabling GitHub Pages</h2>
<p>While you’re in the <code>Settings</code> tab, go to the <code>Pages</code> page, enable GitHub Pages,
set the <code>Source</code> to <code>Deploy from a branch</code>, set that branch to <code>gh-pages</code>, and
make sure the directory for that branch is <code>/ (root)</code>.</p>
<p><img
  alt="The GitHub Pages setup for this website"
  decoding="async"
  height="517"
  loading="lazy"
  src="./images/hnt-gh-pages.webp"
  width="600"
/></p>
<h2 id="deploying-to-your-domain">Deploying to your domain</h2>
<p>Follow the <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">GitHub Pages custom domain guide</a>
for heaps of info on how to deploy your site to your web domain.</p>
<h2 id="todos-for-hakyll-nix-template">TODOs for hakyll-nix-template</h2>
<h3 id="todo-caching-and-hashing">TODO: Caching and hashing</h3>
<p>When a CSS or JS file changes, we need a way to break browser caches to ensure
they get the latest version. The way to do this is to generate a hash of that
file’s contents, generate a file with that content hash in the filename when
building, and then make sure any output that references that CSS or JS file
reflects this updated filename, as well.</p>
<p>I have no idea how to do this yet, but I’ll figure it out!</p>
<h3 id="todo-use-pygments-for-syntax-highlighting">TODO: Use pygments for syntax highlighting</h3>
<p>See <a href="https://tony-zorman.com/posts/2023-01-21-pygmentising-hakyll.html">Tony Zorman’s post on pygmentising hakyll</a>
for details on some issues with the <a href="https://hackage.haskell.org/package/skylighting">skylighting
library</a>. I’ll likely follow
this post in order to switch up the syntax highlighting to something better, or
at least allow people to work with whatever they want.</p>
<h2 id="other-hakyll-posts">Other hakyll posts</h2>
<ul>
<li><a href="/hakyll-pt-1-setup-initial-customization.html">Pt. 1 – Setup &amp; Initial Customization</a></li>
<li><a href="/hakyll-pt-2-generating-a-sitemap-xml-file.html">Pt. 2 – Generating a Sitemap XML File</a></li>
<li><a href="/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html">Pt. 3 – Generating RSS and Atom XML Feeds</a></li>
<li><a href="/hakyll-pt-4-copying-static-files-for-your-build.html">Pt. 4 – Copying Static Files For Your Build</a></li>
<li><a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a></li>
<li><a href="/hakyll-pt-6-pure-builds-with-nix.html">Pt. 6 – Pure Builds With Nix</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>How To Lose Functional Programming At Work</title>
    <link href="https://robertwpearce.com/how-to-lose-functional-programming-at-work.html" />
    <id>https://robertwpearce.com/how-to-lose-functional-programming-at-work.html</id>
    <published>2023-01-30T00:00:00Z</published>
    <updated>2023-01-30T23:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Hi! If you’re looking to lose functional programming at work, here are a bunch
of mistakes I’ve made on JS-heavy web teams over the years that can help you do
the same.</p>
<p>Enjoy!</p>
<p><em>Note: if sarcasm and self-deprecation aren’t your thing, you can skip to the
<a href="#real-talk-takeaways">real-talk takeaways</a>.</em></p>
<h2 id="pdf-version">PDF version</h2>
<p>Here is the much prettier PDF version that is also useful for sending to your
teammates or using in your own lunch-n-learn tech talk.</p>
<p><em>Thanks to <a href="https://news.ycombinator.com/item?id=34569625">KronisLV on the orange
site</a> for helping me fix an issue
where the PDF was accidentally auto-downloading in Firefox.</em></p>
<object
  class="pdf"
  data="/pdfs/2023-01-24-how-to-lose-fp-at-work.pdf"
  title="How to Lose Functional Programming at Work - PDF"
  type="application/pdf"
>
<p><p>Your browser doesn’t support PDF, but you can download the file here: <a href="/pdfs/2023-01-24-how-to-lose-fp-at-work.pdf">How to Lose Functional Programming at Work - PDF</a></p>
</object></p>
<p><a class="pdf-link" href="/pdfs/2023-01-24-how-to-lose-fp-at-work.pdf">
How to Lose Functional Programming at Work - PDF
</a></p>
<h2 id="dont-have-static-type-checking">Don’t have static type checking</h2>
<ul>
<li>No <a href="https://www.typescriptlang.org">TypeScript</a></li>
<li>No <a href="https://flow.org">Flow</a></li>
<li>No <a href="https://reasonml.github.io">ReasonML</a></li>
<li>No <a href="https://elm-lang.org/">Elm</a></li>
<li>No (insert language with static type checking that compiles to JS)</li>
</ul>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">processData</span> <span class="pl-o">=</span> <span class="pl-nx">composeP</span><span class="pl-p">(</span><span class="pl-nx">syncWithBackend</span><span class="pl-p">,</span> <span class="pl-nx">cleansePII</span><span class="pl-p">,</span> <span class="pl-nx">validateData</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// * What arguments and their types are expected here?
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// * If each function is written like this, how can
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   one suss out what data are flowing where?
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// * How hard is this going to be to debug?
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   Use this everywhere: `(x) =&gt; (console.log(x), x)`
</span></span></span></code></pre>
<p>Oh, so point-free style programming is the problem? Not so fast:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">async</span> <span class="pl-kd">function</span> <span class="pl-nx">processData</span><span class="pl-p">(</span><span class="pl-nx">data</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">await</span> <span class="pl-nx">validateData</span><span class="pl-p">(</span><span class="pl-nx">data</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">cleansedData</span> <span class="pl-o">=</span> <span class="pl-nx">cleansePII</span><span class="pl-p">(</span><span class="pl-nx">data</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">await</span> <span class="pl-nx">syncWithBackend</span><span class="pl-p">(</span><span class="pl-nx">cleansedData</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">data</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// or for the Promise-chainers…
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">processData</span> <span class="pl-o">=</span> <span class="pl-nx">data</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">validateData</span><span class="pl-p">(</span><span class="pl-nx">data</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">cleansePII</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">syncWithBackend</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(()</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">data</span><span class="pl-p">)</span></span></span></code></pre>
<p>Do keep telling yourself that any of these 3, on their own, are easy for your
teammates to work with after 3 months.</p>
<h2 id="dont-use-well-known-code-documentation-tools">Don’t use well-known code documentation tools</h2>
<ul>
<li>No <a href="https://jsdoc.app">jsdoc</a></li>
<li>…are there any other contenders?</li>
</ul>
<p>Deprive your team of this clarity and helpful auto-completion:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// NOTE: this is an untested, small example
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">/**
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> * @typedef {Object} ReportingInfo
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> * @property {(&#34;light&#34;|&#34;dark&#34;)} userTheme - Current user&#39;s preferred theme
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> * @property {string} userName - Current user&#39;s name
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> * @property {UUID} postId - The current post&#39;s ID
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> */</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm">/**
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> * Validates that the reporting data (current user site prefences and post info)
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> * is OK, removes personally identifiable information, syncs this info with the
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> * backend, and gives us back the original data.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> *
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> * @param {ReportingInfo} data - The current user&#39;s site preferences and post info
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> * @returns {Promise&lt;ReportingInfo&gt;} - The original reporting data
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cm"> */</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">processData</span> <span class="pl-o">=</span> <span class="pl-nx">data</span> <span class="pl-p">=&gt;</span> <span class="pl-c1">// …
</span></span></span></code></pre>
<h2 id="dont-properly-train-new-and-existing-colleagues">Don’t properly train new and existing colleagues</h2>
<p>Truly believe, in your heart, that you can write a pile of blog posts, collect a
bunch of other great learning resources, hand them all to a new FP learner,
recommend they read as much as they can then come back with questions, and
expect them to come out the other side at all.</p>
<p>Conversely, spend all your time and energy on a couple of individuals, neglect
the others, fail to write any useful learnings down, and forget to encourage
these initiates to turn around and help teach their other colleagues, in turn.</p>
<h2 id="dont-bother-getting-the-other-engineering-teams-on-board-and-rowing-in-the-same-direction">Don’t bother getting the other engineering teams on board and rowing in the same direction</h2>
<ul>
<li>“If I build it, they will notice… right?”</li>
<li><em>Idea: Lunch ’n learn about FP?</em> Me: They’ll find out I don’t know things.</li>
<li><em>Idea: Meet with other team leaders and see if they’re interested in adoption, what
could be better, or share why they’re not interested?</em> Me: This includes
managers who report on things, and if they think I’m dumb or rocking the boat
too much, I might look worse than I potentially already do.</li>
</ul>
<p>Instead, if you keep it to yourself, other teams won’t get to contribute and
probably improve the state of things.</p>
<h2 id="do-live-by-the-creed-point-free-or-die">Do live by the creed, “Point-free or die”</h2>
<p>Watch the video, <a href="https://www.youtube.com/watch?v=seVSlKazsNk">“Point-Free or Die: Tacit Programming in Haskell and
Beyond”</a>, by Amar Shah</p>
<p>Contrived example:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">__</span><span class="pl-p">,</span> <span class="pl-nx">any</span><span class="pl-p">,</span> <span class="pl-nx">lt</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">anyLt0</span> <span class="pl-o">=</span> <span class="pl-nx">any</span><span class="pl-p">(</span><span class="pl-nx">lt</span><span class="pl-p">(</span><span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-nx">__</span><span class="pl-p">))</span> <span class="pl-c1">// hint: this has a bug in it
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">anyLt0</span><span class="pl-p">([</span><span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-mi">3</span><span class="pl-p">])</span> <span class="pl-c1">// true — ugh…
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// vs. the probably pretty simple…
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">anyLt0</span> <span class="pl-o">=</span> <span class="pl-nx">numbers</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">numbers</span><span class="pl-p">.</span><span class="pl-nx">some</span><span class="pl-p">(</span><span class="pl-nx">n</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">n</span> <span class="pl-o">&lt;</span> <span class="pl-mi">0</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">anyLt0</span><span class="pl-p">([</span><span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-mi">3</span><span class="pl-p">])</span> <span class="pl-c1">// false
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">anyLt0</span><span class="pl-p">([</span><span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-o">-</span><span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-mi">3</span><span class="pl-p">])</span> <span class="pl-c1">// true — looks good
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// 👆 should we resist eta-converting this?!
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// …
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// NOT ON MY WATCH
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">any</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">array</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">array</span><span class="pl-p">.</span><span class="pl-nx">some</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">isLtN</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">n</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-o">&lt;</span> <span class="pl-nx">n</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">isLt0</span> <span class="pl-o">=</span> <span class="pl-nx">isLtN</span><span class="pl-p">(</span><span class="pl-mi">0</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">anyLt0</span> <span class="pl-o">=</span> <span class="pl-nx">any</span><span class="pl-p">(</span><span class="pl-nx">isLt0</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">anyLt0</span><span class="pl-p">([</span><span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-mi">3</span><span class="pl-p">])</span> <span class="pl-c1">// true — ugh; the bug is back
</span></span></span></code></pre>
<p>Real, but altered, example:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">finishItems</span> <span class="pl-o">=</span> <span class="pl-nx">compose</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">flip</span><span class="pl-p">(</span><span class="pl-nx">merge</span><span class="pl-p">)({</span> <span class="pl-nx">isDone</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span> <span class="pl-nx">amtComplete</span><span class="pl-o">:</span> <span class="pl-mi">100</span> <span class="pl-p">}),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">over</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">lensProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;indexedObjects&#39;</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">mapVals</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">compose</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">over</span><span class="pl-p">(</span><span class="pl-nx">lensProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;indexedObjects&#39;</span><span class="pl-p">),</span> <span class="pl-nx">mapVals</span><span class="pl-p">(</span><span class="pl-nx">assoc</span><span class="pl-p">(</span><span class="pl-s1">&#39;isDone&#39;</span><span class="pl-p">,</span> <span class="pl-kc">true</span><span class="pl-p">))),</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">assoc</span><span class="pl-p">(</span><span class="pl-s1">&#39;isDone&#39;</span><span class="pl-p">,</span> <span class="pl-kc">true</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span></span></span></code></pre>
<h2 id="do-prefer-the-wrong-abstraction-over-the-right-duplication">Do prefer the wrong abstraction over the right duplication</h2>
<p>I was at Sandi Metz’ RailsConf 2014 Chicago talk, <a href="https://www.youtube.com/watch?v=8bZh5LMaSmE">All the Little
Things</a>, where she blew my mind
with the simplicity of “preferring duplication over the wrong abstraction”. Two
years later, she followed it up with some great blog commentary, <a href="https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction">The Wrong
Abstraction</a>.</p>
<p>But in this case, dilute your core business logic to broad generalizations that
can be extracted and abstracted over and over, fail to understand category
theory enough for this to be useful, and be the only one who knows how these
abstractions work.</p>
<p>You’ll know you’ve lost people when normally thorough PR reviews now look like,
“👍”.</p>
<h2 id="dont-refactor-old-patterns-that-clearly-dont-work-for-the-team">Don’t refactor old patterns that clearly don’t work for the team</h2>
<p>Make sure that people coming into the project have your old code patterns to
emulate that you cringe looking at years later but never made the time to
update.</p>
<p>While you could allocate investment time to this or reading up on how to
improve your technical leadership skills, spend that time making new features,
instead.</p>
<h2 id="do-force-functional-patterns-into-a-language-that-wasnt-built-for-them-bonus-cryptic-stack-traces">Do force functional patterns into a language that wasn’t built for them (bonus: cryptic stack traces)</h2>
<ul>
<li>Lean into recursive functions, realize ES2015 tail call optimization is
only a thing in Safari nowadays (if that?), and sprinkle a
<a href="https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch8.md/#trampolines"><code>trampoline</code></a> function over
the issue to make it go away and not blow out your call stack</li>
<li>Get cryptic error messages and stack traces because JS isn’t going to be able
to follow your custom <code>curry</code> and <code>compose</code> functions by default, meaning
you’ll have to go the extra mile like Brian does in <a href="https://medium.com/@drboolean/debugging-functional-7deb4688a08c">Debugging
functional</a> to
prevent the issues described by Thai in <a href="https://medium.com/hackernoon/partially-applied-curried-functions-could-obfuscate-the-javascript-stack-trace-84d66bd8032e">Partially-applied (or curried)
functions could obfuscate the JavaScript stack trace</a>
(Thai’s ultimate recommendations are <em>“use a typed language that guarantees that
your functions will never receive an invalid data”</em> or <em>“just don’t go
overboard with pointfree style JavaScript”</em>).</li>
<li>The Glasgow Haskell Compiler can be optimized to fuse <code>map g . map f</code> into a
single <code>map</code> thanks to composition, knocking out the work in one go at
runtime. While <code>.map(…).map(…).map(…)</code> seems to be optimized pretty ok
in JS runtimes, you’re still asking it do <em>N</em> times the work, and you may not
realize it. Oops.</li>
<li>BYO algebraic data type libraries (many of these are awesome, though)</li>
</ul>
<h2 id="do-opaquely-compose-and-sequence-the-entirety-of-your-api-endpoints-and-make-them-hard-to-debug">Do opaquely compose and sequence the entirety of your API endpoints and make them hard to debug</h2>
<p>On the surface, this isn’t so difficult to read…</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// handler for POST /posts
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">createPost</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;app/db/posts&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">authenticateUser</span><span class="pl-p">,</span> <span class="pl-nx">authorizeUser</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;app/lib/auth&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">trackEvent</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;app/lib/tracking&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">validateRequestSchema</span> <span class="pl-o">=</span> <span class="pl-nx">payload</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span> <span class="pl-cm">/* … */</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">export</span> <span class="pl-kr">const</span> <span class="pl-nx">handleCreatePost</span> <span class="pl-o">=</span> <span class="pl-nx">curry</span><span class="pl-p">(</span><span class="pl-nx">metadata</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">pipeP</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">authenticateUser</span><span class="pl-p">(</span><span class="pl-nx">metadata</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">authorizeUser</span><span class="pl-p">(</span><span class="pl-nx">metadata</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">validateRequestSchema</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">createPost</span><span class="pl-p">(</span><span class="pl-nx">metadata</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">tapP</span><span class="pl-p">(</span><span class="pl-nx">trackEvent</span><span class="pl-p">(</span><span class="pl-s1">&#39;post:create&#39;</span><span class="pl-p">,</span> <span class="pl-nx">metadata</span><span class="pl-p">)),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">pick</span><span class="pl-p">([</span> <span class="pl-s1">&#39;id&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;authorId&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;title&#39;</span> <span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span></span></span></code></pre>
<p>Did you catch that this expects 2 arguments? Did you also know that
<code>authenticateUser</code> ignores the 2nd argument sent to it? How would you? And what
about <code>trackEvent</code>? Does it receive the <code>payload</code>, or does <code>createPost()</code> return
post-related data?</p>
<p>Let’s write this another way:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">export</span> <span class="pl-kr">async</span> <span class="pl-kd">function</span> <span class="pl-nx">handleCreatePost</span><span class="pl-p">(</span><span class="pl-nx">metadata</span><span class="pl-p">,</span> <span class="pl-nx">payload</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">await</span> <span class="pl-nx">authenticateUser</span><span class="pl-p">(</span><span class="pl-nx">metadata</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">await</span> <span class="pl-nx">authorizeUser</span><span class="pl-p">(</span><span class="pl-nx">metadata</span><span class="pl-p">,</span> <span class="pl-nx">payload</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">await</span> <span class="pl-nx">validateRequestSchema</span><span class="pl-p">(</span><span class="pl-nx">payload</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">post</span> <span class="pl-o">=</span> <span class="pl-kr">await</span> <span class="pl-nx">createPost</span><span class="pl-p">(</span><span class="pl-nx">metadata</span><span class="pl-p">,</span> <span class="pl-nx">payload</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">await</span> <span class="pl-nx">trackEvent</span><span class="pl-p">(</span><span class="pl-s1">&#39;post:create&#39;</span><span class="pl-p">,</span> <span class="pl-nx">metadata</span><span class="pl-p">,</span> <span class="pl-nx">payload</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-nx">post</span><span class="pl-p">.</span><span class="pl-nx">id</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">authorId</span><span class="pl-o">:</span> <span class="pl-nx">post</span><span class="pl-p">.</span><span class="pl-nx">authorId</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-nx">post</span><span class="pl-p">.</span><span class="pl-nx">title</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>I’m not saying that option #2 is an awesome handler, but if you want to make it
trickier for people, go with option #1.</p>
<h2 id="do-recreate-imperative-procedural-programming-while-calling-it-declarative">Do recreate imperative, procedural programming while calling it “declarative”</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">setBookReadPercentByType</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">contentType</span><span class="pl-p">,</span> <span class="pl-nx">statusObject</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">assoc</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;readPercent&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">pipe</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;subItems&#39;</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">values</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">filter</span><span class="pl-p">(</span><span class="pl-nx">propEq</span><span class="pl-p">(</span><span class="pl-nx">contentType</span><span class="pl-p">,</span> <span class="pl-s1">&#39;chapter&#39;</span><span class="pl-p">)),</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">length</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">flip</span><span class="pl-p">(</span><span class="pl-nx">divide</span><span class="pl-p">)(</span><span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">length</span><span class="pl-p">,</span> <span class="pl-nx">keys</span><span class="pl-p">,</span> <span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;subItems&#39;</span><span class="pl-p">))(</span><span class="pl-nx">statusObject</span><span class="pl-p">)),</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">multiply</span><span class="pl-p">(</span><span class="pl-mi">100</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nb">Math</span><span class="pl-p">.</span><span class="pl-nx">round</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">)(</span><span class="pl-nx">statusObject</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">statusObject</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span></span></span></code></pre>
<p>Do have 8+-ish different patterns for function composition</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// 👇 These 4, plus Promisified versions of them,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    plus combinations of them all used at once;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    doesn&#39;t include ramda&#39;s pipeWith and composeWith
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// compose
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getHighScorers</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">compose</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// pipe
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getHighScorers</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">pipe</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// composeWithValue
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getHighScorers</span> <span class="pl-o">=</span> <span class="pl-nx">players</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">composeWithValue</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">players</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// pipeWithValue
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getHighScorers</span> <span class="pl-o">=</span> <span class="pl-nx">players</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">pipeWithValue</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">players</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// …but then now mix and match them with actual,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// real-life business logic.
</span></span></span></code></pre>
<h2 id="do-make-yourself-one-of-the-few-who-can-debug-algebraic-data-types-during-midnight-incidents">Do make yourself one of the few who can debug algebraic data types during midnight incidents</h2>
<p>Ensure your team is surprised by all of the following words when debugging or
altering your code in the pursuit of their own work tasks:</p>
<ul>
<li><code>Task</code>, <code>Maybe</code>, <code>Either</code>, <code>Result</code>, <code>Pair</code>, <code>State</code></li>
<li><code>bimap</code></li>
<li><code>chain</code></li>
<li><code>bichain</code></li>
<li><code>option</code></li>
<li><code>coalesce</code></li>
<li><code>fork</code></li>
<li><code>sequence</code></li>
<li><code>ap</code></li>
<li><code>map</code> — and I don’t mean <code>Array.prototype.map</code>, nor a <code>new Map()</code>, nor a
key/value object</li>
</ul>
<h2 id="dont-have-sql-a-declarative-language-do-data-transformations-for-you--diwhy-it-yourself">Don’t have SQL (a declarative language) do data transformations for you — DIWHY??? it yourself</h2>
<p>Instead, and in the name of immutability, use data pipelines in your app to
apply changes to your data, one transformation at a time, and accidentally do as
many key/value iterations and memory allocations as possible. 😬</p>
<h2 id="do-suggest-on-prs-that-colleagues-completely-refactor-what-theyve-done-to-fit-your-functional-style">Do suggest, on PRs, that colleagues completely refactor what they’ve done to fit <em>your</em> functional style</h2>
<blockquote>
<p>What you have here works great, but what could this look like if we flipped
all the function arguments around, removed all these intermediate variables, and
mapped these operations over an <code>Either</code>?</p>
</blockquote>
<p>or</p>
<blockquote>
<p>I noticed you’re explicitly constructing these objects in their functions. If
you were to use &lt;UTILITY-FUNCTION&gt;, you could declare the shape of your
outputted object and use functions as the values to look up or compute each
value given some data.</p>
</blockquote>
<h2 id="and-for-some-quick-final-ones">And for some quick final ones…</h2>
<ul>
<li>Do sow imposter syndrome in others and exclude them by sharing non-beginner FP articles</li>
<li>Do keep writing code using FP tools even when nobody else on the team is</li>
<li>Do achieve peak perceived passive-aggression by getting tired and commenting PRs with emojis</li>
<li>Do have “the FP talk” at work, and then publicly own your mistakes</li>
</ul>
<h2 id="real-talk-takeaways">Real-talk takeaways</h2>
<p>Much of the backwards recommendations here can be, on the surface, written off
as symptoms of inexperience, a lack of technical leadership from me, and
obviously not the right paths.</p>
<p>But I think it’s something deeper than those easy explanations.</p>
<p>Most things in life need to be tended to in order for them to go the ways that
we’d like them to; our relationships, our physical &amp; mental health, our gardens.
With most of these things in life, we strive to purposefully sculpt our futures.</p>
<p>However, there are many things that we accidentally sculpt. For example, if the
fastest way from your back door to your garden is through your grassy yard, the
simplest thing is to walk over the grass to get there. It makes sense for a
while, but over time, your stepping on the grass carves a path that you never
intended to create — it was an unintended consequence of your gardening.</p>
<p>This same thing happens with our minds and in our work. If we’re not paying
attention to the big picture, the path of least resistance can carve canyons.</p>
<p>In my case, here, not taking responsibility of a path I helped create, coupled
with persistent imposter syndrome and a feeling I needed to ship features and
just look out for myself, instead of making time for re-evaluation, helped lead
to the difficulties above for others and a loss of “higher” functional
programming in a pretty good workplace that gives teams the freedom to choose
their own tools.</p>
<p>But all is not lost! The core tenets of FP seem to remain:</p>
<ul>
<li>Immutability: Preferring to <em>efficiently</em> recreate objects over mutating the
originals</li>
<li>Purity: call the same function with the same arguments, and you
get the same results</li>
<li>Moving effects to the conceptual edge of an application</li>
<li>Very few classes (if any; <code>React</code> doesn’t count), no inheritance,
<code>map</code>/<code>filter</code>/<code>reduce</code>, etc.</li>
</ul>
<p>It seems a happy balance has been collectively decided on, and I’m excited to
see where it goes. Perhaps, this time around, I’ll be better.</p>
<hr />
<p>Thanks for reading,
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Hakyll Pt. 6 – Pure Builds With Nix</title>
    <link href="https://robertwpearce.com/hakyll-pt-6-pure-builds-with-nix.html" />
    <id>https://robertwpearce.com/hakyll-pt-6-pure-builds-with-nix.html</id>
    <published>2020-04-30T00:00:00Z</published>
    <updated>2023-01-30T23:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>Special thanks to <a href="https://github.com/utdemir/">Utku Demir</a> for review and
constant inspiration.</em></p>
<p>This is part 6 of a multipart series where we will look at getting a website /
blog set up with <a href="https://jaspervdj.be/hakyll">hakyll</a> and customized a fair
bit.</p>
<ul>
<li><a href="/hakyll-pt-1-setup-initial-customization.html">Pt. 1 – Setup &amp; Initial Customization</a></li>
<li><a href="/hakyll-pt-2-generating-a-sitemap-xml-file.html">Pt. 2 – Generating a Sitemap XML File</a></li>
<li><a href="/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html">Pt. 3 – Generating RSS and Atom XML Feeds</a></li>
<li><a href="/hakyll-pt-4-copying-static-files-for-your-build.html">Pt. 4 – Copying Static Files For Your Build</a></li>
<li><a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a></li>
<li>Pt. 6 – Pure Builds With Nix</li>
<li><a href="/the-hakyll-nix-template-tutorial.html">The hakyll-nix-template Tutorial</a></li>
</ul>
<h2 id="overview">Overview</h2>
<p>In this post we’re going to create a new hakyll site from scratch with a caveat:
we will do just about everything with <a href="https://nixos.org">nix</a> in order to
guarantee reproducibility for anyone (or anything) using our project. There are
also two bonuses that we will inherit simply because we are using nix:
* we will not need to rely on global package installs (apart from nix, of course)
* we will be able to easily patch any package problems; for example, if some of
hakyll’s dependencies are not available in nixpkgs, we can patch hakyll to get
it to work.</p>
<p>Here is the example repository with what we’re going to make:
<a href="https://github.com/rpearce/hakyll-nix-example" class="uri">https://github.com/rpearce/hakyll-nix-example</a></p>
<p><em>Note: this post assumes that you have installed nix on your system.</em></p>
<h2 id="steps-to-build-our-hakyll-project-with-nix">Steps to Build Our Hakyll Project With Nix</h2>
<p>Make a new project with <code>release.nix</code>, <code>default.nix</code>, and <code>shell.nix</code>, and get
into its pure nix shell environment:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ mkdir hakyll-nix-example &amp;&amp; cd $_
</span></span><span class="pl-line"><span class="pl-cl">λ echo &#34;{ }: let in { }&#34; &gt; release.nix
</span></span><span class="pl-line"><span class="pl-cl">λ echo &#34;(import ./release.nix { }).project&#34; &gt; default.nix
</span></span><span class="pl-line"><span class="pl-cl">λ echo &#34;(import ./release.nix { }).shell&#34; &gt; shell.nix
</span></span><span class="pl-line"><span class="pl-cl">λ nix-shell --pure -p niv nix cacert</span></span></code></pre>
<p>We won’t have to touch <code>default.nix</code> nor <code>shell.nix</code> again, for we are
delegating their responsibilities to the <code>release.nix</code> file that we’ll add
more to in a moment.</p>
<p><em>Note: we require <code>nix</code> and <code>cacert</code> when running a pure <code>nix-shell</code> with <code>niv</code>
because of an issue (<a href="https://github.com/nmattia/niv/issues/222" class="uri">https://github.com/nmattia/niv/issues/222</a>).</em></p>
<p>Now that we’re in the nix shell, initialize <a href="https://github.com/nmattia/niv"><code>niv</code></a>
and specify your nixpkgs owner, repository, and branch to be whatever you want:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">[nix-shell:~/projects/hakyll-nix-example]$ niv init
</span></span><span class="pl-line"><span class="pl-cl">[nix-shell:~/projects/hakyll-nix-example]$ niv update nixpkgs -o NixOS -r nixpkgs-channels -b nixpkgs-unstable
</span></span><span class="pl-line"><span class="pl-cl">[nix-shell:~/projects/hakyll-nix-example]$ exit</span></span></code></pre>
<p>Update your <code>release.nix</code> file with the following:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-k">let</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">sources</span> <span class="pl-o">=</span> <span class="pl-kn">import</span> <span class="pl-sr">./nix/sources.nix</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">in</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">{</span> <span class="pl-n">compiler</span> <span class="pl-o">?</span> <span class="pl-s2">&#34;ghc883&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-o">,</span> <span class="pl-n">pkgs</span> <span class="pl-o">?</span> <span class="pl-kn">import</span> <span class="pl-n">sources</span><span class="pl-o">.</span><span class="pl-n">nixpkgs</span> <span class="pl-p">{</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}:</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">let</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">inherit</span> <span class="pl-p">(</span><span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">lib</span><span class="pl-o">.</span><span class="pl-n">trivial</span><span class="pl-p">)</span> <span class="pl-n">flip</span> <span class="pl-n">pipe</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">inherit</span> <span class="pl-p">(</span><span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">haskell</span><span class="pl-o">.</span><span class="pl-n">lib</span><span class="pl-p">)</span> <span class="pl-n">appendPatch</span> <span class="pl-n">appendConfigureFlags</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">haskellPackages</span> <span class="pl-o">=</span> <span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">haskell</span><span class="pl-o">.</span><span class="pl-n">packages</span><span class="pl-o">.</span><span class="pl-si">${</span><span class="pl-n">compiler</span><span class="pl-si">}</span><span class="pl-o">.</span><span class="pl-n">override</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">overrides</span> <span class="pl-o">=</span> <span class="pl-n">hpNew</span><span class="pl-p">:</span> <span class="pl-n">hpOld</span><span class="pl-p">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">hakyll</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">pipe</span>
</span></span><span class="pl-line"><span class="pl-cl">           <span class="pl-n">hpOld</span><span class="pl-o">.</span><span class="pl-n">hakyll</span>
</span></span><span class="pl-line"><span class="pl-cl">           <span class="pl-p">[</span> <span class="pl-p">(</span><span class="pl-n">flip</span> <span class="pl-n">appendPatch</span> <span class="pl-sr">./hakyll.patch</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">             <span class="pl-p">(</span><span class="pl-n">flip</span> <span class="pl-n">appendConfigureFlags</span> <span class="pl-p">[</span> <span class="pl-s2">&#34;-f&#34;</span> <span class="pl-s2">&#34;watchServer&#34;</span> <span class="pl-s2">&#34;-f&#34;</span> <span class="pl-s2">&#34;previewServer&#34;</span> <span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">           <span class="pl-p">];</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">hakyll-nix-example</span> <span class="pl-o">=</span> <span class="pl-n">hpNew</span><span class="pl-o">.</span><span class="pl-n">callCabal2nix</span> <span class="pl-s2">&#34;hakyll-nix-example&#34;</span> <span class="pl-sr">./.</span> <span class="pl-p">{</span> <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">niv</span> <span class="pl-o">=</span> <span class="pl-kn">import</span> <span class="pl-n">sources</span><span class="pl-o">.</span><span class="pl-n">niv</span> <span class="pl-p">{</span> <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">project</span> <span class="pl-o">=</span> <span class="pl-n">haskellPackages</span><span class="pl-o">.</span><span class="pl-n">hakyll-nix-example</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">in</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">project</span> <span class="pl-o">=</span> <span class="pl-n">project</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">shell</span> <span class="pl-o">=</span> <span class="pl-n">haskellPackages</span><span class="pl-o">.</span><span class="pl-n">shellFor</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">packages</span> <span class="pl-o">=</span> <span class="pl-n">p</span><span class="pl-p">:</span> <span class="pl-k">with</span> <span class="pl-n">p</span><span class="pl-p">;</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">project</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">];</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">buildInputs</span> <span class="pl-o">=</span> <span class="pl-k">with</span> <span class="pl-n">haskellPackages</span><span class="pl-p">;</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">ghcid</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">hlint</span>       <span class="pl-c1"># or ormolu</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">niv</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">cacert</span> <span class="pl-c1"># needed for niv</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">nix</span>    <span class="pl-c1"># needed for niv</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">];</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">withHoogle</span> <span class="pl-o">=</span> <span class="pl-no">true</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>Don’t worry, we’ll circle back to what we just did.</p>
<p>Create a <code>hakyll.patch</code> diff file:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ touch hakyll.patch</span></span></code></pre>
<p>Bootstrap the hakyll project (we won’t ever need this again):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ nix-shell --pure -p haskellPackages.hakyll --run &#34;hakyll-init .&#34;</span></span></code></pre>
<p>Build the project and <code>--show-trace</code> just in case something goes wrong:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ nix-build --show-trace</span></span></code></pre>
<p>Run the local dev server:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ ./result/bin/site watch</span></span></code></pre>
<p>Navigate to <a href="http://localhost:8000" class="uri">http://localhost:8000</a> and see your local dev site up and running!</p>
<h2 id="understanding-the-releasenix-file">Understanding the <code>release.nix</code> File</h2>
<p>Let’s break down what we copied and pasted into <code>release.nix</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-k">let</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">sources</span> <span class="pl-o">=</span> <span class="pl-kn">import</span> <span class="pl-sr">./nix/sources.nix</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">in</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">{</span> <span class="pl-n">compiler</span> <span class="pl-o">?</span> <span class="pl-s2">&#34;ghc883&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-o">,</span> <span class="pl-n">pkgs</span> <span class="pl-o">?</span> <span class="pl-kn">import</span> <span class="pl-n">sources</span><span class="pl-o">.</span><span class="pl-n">nixpkgs</span> <span class="pl-p">{</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}:</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"># ...</span></span></span></code></pre>
<p>The <code>let</code> gives us the space to define an attribute (variable), and it is here
that we import our <code>sources.nix</code> file that was generated by <code>niv</code>. The <code>in</code>
block defines a function parameter with two attributes, <code>compiler</code> and <code>sources</code>,
that each have defaults (when there’s a <code>:</code>, that means what comes next is a
function body or another function argument). For the <code>compiler</code>, we will use
this version to compile all of the Haskell packages that we interact with. For
the <code>pkgs</code>, we default to using our pinned version of <code>nixpkgs</code>, but this is
overridable.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1"># ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">let</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">inherit</span> <span class="pl-p">(</span><span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">lib</span><span class="pl-o">.</span><span class="pl-n">trivial</span><span class="pl-p">)</span> <span class="pl-n">flip</span> <span class="pl-n">pipe</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">inherit</span> <span class="pl-p">(</span><span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">haskell</span><span class="pl-o">.</span><span class="pl-n">lib</span><span class="pl-p">)</span> <span class="pl-n">appendPatch</span> <span class="pl-n">appendConfigureFlags</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># ...</span></span></span></code></pre>
<p>Our new <code>let</code> falls within the function we created above, and we then state that
we would like to inherit some nice functions from <a href="https://github.com/NixOS/nixpkgs/blob/master/lib/trivial.nix"><code>pkgs.lib.trivial</code></a>
and <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/lib.nix"><code>pkgs.haskell.lib</code></a>.
The <code>flip</code> and <code>pipe</code> functions are standards in functional programming, but
I’ll share a short recap:
* <a href="https://github.com/NixOS/nixpkgs/blob/3a1e8bdcd9a9e13ccd3f298bf598acc8b35caa4d/lib/trivial.nix#L130-L138"><code>flip</code></a>
takes a function <code>a -&gt; b -&gt; c</code> and flips the accepted arguments to act like
<code>b -&gt; a -&gt; c</code>. Its definition is <code>flip = f: a: b: f b a;</code> – it takes a
function, then <code>a</code>, then <code>b</code>, and then it applies <code>a</code> and <code>b</code> in reversed
(flipped) order.
* <a href="https://github.com/NixOS/nixpkgs/blob/3a1e8bdcd9a9e13ccd3f298bf598acc8b35caa4d/lib/trivial.nix#L32-L63"><code>pipe</code></a>
establishes a set of functions that you can apply data to, one after the
other. Think of bash pipes: <code>cat blog_post.txt | grep nix</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-k">let</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">haskellPackages</span> <span class="pl-o">=</span> <span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">haskell</span><span class="pl-o">.</span><span class="pl-n">packages</span><span class="pl-o">.</span><span class="pl-si">${</span><span class="pl-n">compiler</span><span class="pl-si">}</span><span class="pl-o">.</span><span class="pl-n">override</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">overrides</span> <span class="pl-o">=</span> <span class="pl-n">hpNew</span><span class="pl-p">:</span> <span class="pl-n">hpOld</span><span class="pl-p">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">hakyll</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">pipe</span>
</span></span><span class="pl-line"><span class="pl-cl">           <span class="pl-n">hpOld</span><span class="pl-o">.</span><span class="pl-n">hakyll</span>
</span></span><span class="pl-line"><span class="pl-cl">           <span class="pl-p">[</span> <span class="pl-p">(</span><span class="pl-n">flip</span> <span class="pl-n">appendPatch</span> <span class="pl-sr">./hakyll.patch</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">             <span class="pl-p">(</span><span class="pl-n">flip</span> <span class="pl-n">appendConfigureFlags</span> <span class="pl-p">[</span> <span class="pl-s2">&#34;-f&#34;</span> <span class="pl-s2">&#34;watchServer&#34;</span> <span class="pl-s2">&#34;-f&#34;</span> <span class="pl-s2">&#34;previewServer&#34;</span> <span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">           <span class="pl-p">];</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">hakyll-nix-example</span> <span class="pl-o">=</span> <span class="pl-n">hpNew</span><span class="pl-o">.</span><span class="pl-n">callCabal2nix</span> <span class="pl-s2">&#34;hakyll-nix-example&#34;</span> <span class="pl-sr">./.</span> <span class="pl-p">{</span> <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">niv</span> <span class="pl-o">=</span> <span class="pl-kn">import</span> <span class="pl-n">sources</span><span class="pl-o">.</span><span class="pl-n">niv</span> <span class="pl-p">{</span> <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># ...</span></span></span></code></pre>
<p>This uses our pinned (or overridden) <code>nixpkgs</code> to create our own
<code>haskellPackages</code> for a specific Haskell <code>compiler</code> version.</p>
<p>For <code>hakyll</code>, we need to make sure it gets compiled with the <code>watchServer</code> and
<code>previewServer</code> flags, or we won’t be able to use its local dev server. We also
provide an optional patch file (<code>git diff &gt; hakyll.patch</code> file) that we can
build <code>hakyll</code> with if there are any changes to the project that we need to make.
Patch files can be empty when no patches are required, but if you do need to
patch something, here is an example <code>hakyll.patch</code> file:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-gh">diff --git a/hakyll.cabal b/hakyll.cabal
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gh">index fcded8d..9746f20 100644
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gh"></span><span class="pl-gd">--- a/hakyll.cabal
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gd"></span><span class="pl-gi">+++ b/hakyll.cabal
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gi"></span><span class="pl-gu">@@ -199,7 +199,7 @@ Library
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gu"></span>   If flag(previewServer)
</span></span><span class="pl-line"><span class="pl-cl">     Build-depends:
</span></span><span class="pl-line"><span class="pl-cl">       wai             &gt;= 3.2   &amp;&amp; &lt; 3.3,
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gd">-      warp            &gt;= 3.2   &amp;&amp; &lt; 3.3,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gd"></span><span class="pl-gi">+      warp,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gi"></span>       wai-app-static  &gt;= 3.1   &amp;&amp; &lt; 3.2,
</span></span><span class="pl-line"><span class="pl-cl">       http-types      &gt;= 0.9   &amp;&amp; &lt; 0.13,
</span></span><span class="pl-line"><span class="pl-cl">       fsnotify        &gt;= 0.2   &amp;&amp; &lt; 0.4
</span></span></code></pre>
<p>The <code>hakyll-nix-example</code> attribute is specifically for our Haskell project in
order for us to be sure our project is compiled with our desired compiler
version. We leverage the <code>callCabal2nix</code> tool to handle automatically converting
our <code>hakyll-nix-example.cabal</code> file into a <code>nix</code> derivation for our build.</p>
<p>Lastly, we ensure that the <code>niv</code> we are using in the <code>nix-shell</code> is our pinned
<code>niv</code> that <code>niv</code> itself generated.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-k">let</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">project</span> <span class="pl-o">=</span> <span class="pl-n">haskellPackages</span><span class="pl-o">.</span><span class="pl-n">hakyll-nix-example</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">in</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">project</span> <span class="pl-o">=</span> <span class="pl-n">project</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># ...</span></span></span></code></pre>
<p>The <code>project</code> attribute is what our <code>default.nix</code> will use when being called
with tools like <code>nix-build</code>. All we do is access our <code>hakyll-nix-example</code>
attribute from our customized <code>haskellPackages</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-k">let</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># ...</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">in</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">shell</span> <span class="pl-o">=</span> <span class="pl-n">haskellPackages</span><span class="pl-o">.</span><span class="pl-n">shellFor</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">packages</span> <span class="pl-o">=</span> <span class="pl-n">p</span><span class="pl-p">:</span> <span class="pl-k">with</span> <span class="pl-n">p</span><span class="pl-p">;</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">project</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">];</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">buildInputs</span> <span class="pl-o">=</span> <span class="pl-k">with</span> <span class="pl-n">haskellPackages</span><span class="pl-p">;</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">ghcid</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">hlint</span>       <span class="pl-c1"># or ormolu</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">niv</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">cacert</span> <span class="pl-c1"># needed for niv</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-n">pkgs</span><span class="pl-o">.</span><span class="pl-n">nix</span>    <span class="pl-c1"># needed for niv</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">];</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">withHoogle</span> <span class="pl-o">=</span> <span class="pl-no">true</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>Exactly like <code>default.nix</code> uses the <code>project</code> attribute, <code>shell.nix</code> is looking
for a <code>shell</code> attribute to define everything it needs when running <code>nix-shell --pure</code>. We use <code>shellFor</code>, which comes with the <code>nixpkgs</code> Haskell tools, and we
provide it a few attributes:
* the <code>packages</code> attribute holds our <code>project</code> package and any other <code>nixpkgs</code>
that you would like to have built when entering the shell
* the <code>buildInputs</code> attribute holds all the tools that we’ll have available to
us while we’re in the shell; for example, you can run <code>ghcid</code> and load your
Haskell code to test it out or run <code>hlint</code> to lint your Haskell files
* <code>withHoogle</code> gives us the ability to query <a href="https://hoogle.haskell.org" class="uri">https://hoogle.haskell.org</a></p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Using nix to build our project helps make development consistent and
predictable; however, learning nix is not necessarily a breeze. The following
articles directly contributed to my understanding that led to this post:</p>
<ul>
<li><a href="https://nixos.org/nixos/nix-pills/index.html" class="uri">https://nixos.org/nixos/nix-pills/index.html</a></li>
<li><a href="https://github.com/Gabriel439/haskell-nix/tree/master/project4" class="uri">https://github.com/Gabriel439/haskell-nix/tree/master/project4</a></li>
<li><a href="https://turbomack.github.io/posts/2020-02-17-cabal-flags-and-nix.html" class="uri">https://turbomack.github.io/posts/2020-02-17-cabal-flags-and-nix.html</a> (this
article is what led me to learn how to patch hakyll)</li>
<li><code>overrideAttrs</code>: <a href="https://nixos.org/nixpkgs/manual/#sec-pkg-overrideAttrs" class="uri">https://nixos.org/nixpkgs/manual/#sec-pkg-overrideAttrs</a></li>
<li><code>overlays</code>: <a href="https://nixos.org/nixpkgs/manual/#chap-overlays" class="uri">https://nixos.org/nixpkgs/manual/#chap-overlays</a></li>
<li><a href="https://maybevoid.com/posts/2019-01-27-getting-started-haskell-nix.html" class="uri">https://maybevoid.com/posts/2019-01-27-getting-started-haskell-nix.html</a></li>
<li><a href="https://kuznero.com/post/linux/haskell-project-structure-in-nixos/" class="uri">https://kuznero.com/post/linux/haskell-project-structure-in-nixos/</a></li>
<li><a href="https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/haskell.section.md" class="uri">https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/haskell.section.md</a></li>
<li><a href="https://nixos.org/nixpkgs/manual/#haskell" class="uri">https://nixos.org/nixpkgs/manual/#haskell</a></li>
</ul>
<hr />
<p>Thank you for reading!
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Build Your Team an Accessible, Shareable Component Library</title>
    <link href="https://robertwpearce.com/build-your-team-an-accessible-shareable-component-library.html" />
    <id>https://robertwpearce.com/build-your-team-an-accessible-shareable-component-library.html</id>
    <published>2020-04-27T00:00:00Z</published>
    <updated>2020-04-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Today we’re going to dive into building a frontend component library from start
to finish that you can share privately with your team or publicly with everyone!</p>
<p>By the end of this post, you will be able to use
<a href="https://www.typescriptlang.org">TypeScript</a>, <a href="https://github.com/facebook/react">React</a>,
<a href="https://github.com/storybookjs/storybook">Storybook</a>, and more to provide a
simple way to create accessible components that can be included in all of your
projects.</p>
<p>If you’d like to skip to the code, here is the example component library we’re
going to make: <a href="https://github.com/rpearce/example-component-library" class="uri">https://github.com/rpearce/example-component-library</a>.</p>
<h2 id="overview">Overview</h2>
<p>This is a big post that covers a lot of ground, so buckle up.</p>
<ol>
<li><a href="#when-should-i-make-a-component-library-and-why">When Should I Make a Component Library and Why?</a></li>
<li><a href="#project-api-usage">Project API (Usage)</a></li>
<li><a href="#main-project-tools">Main Project Tools</a></li>
<li><a href="#project-structure">Project Structure</a></li>
<li><a href="#component-structure">Component Structure</a></li>
<li><a href="#creating-the-project">Creating the Project</a></li>
<li><a href="#typescript-setup">TypeScript Setup</a></li>
<li><a href="#linting-setup">Linting Setup</a></li>
<li><a href="#testing-setup">Testing Setup</a></li>
<li><a href="#typescript-setup">Storybook Setup</a></li>
<li><a href="#an-example-component">An Example Component</a></li>
<li><a href="#building-our-typescript">Building Our TypeScript</a></li>
<li><a href="#building-our-css">Building Our CSS</a></li>
<li><a href="#building-our-stories">Building Our Stories</a></li>
<li><a href="#continuous-integration-notes">Continuous Integration Notes</a></li>
<li><a href="#publishing-notes">Publishing Notes</a></li>
</ol>
<h2 id="when-should-i-make-a-component-library-and-why">When Should I Make a Component Library and Why?</h2>
<h3 id="scenario-1-component-entropy">Scenario 1: Component Entropy</h3>
<p>Components make up large parts of our applications. As projects age, components
can become increasingly coupled with other components, business logic, and
application state management tools like <a href="https://github.com/reduxjs/redux">redux</a>.</p>
<p>These components usually start out small, focused, and pure. As time passes and
the imperative of timely code delivery takes its toll, these components become
harder to compose, harder to reason about, and cause us to yearn for simpler,
less-involved times.</p>
<p>Instead of rewriting those components in place and repeating the same process,
consider extracting and developing each one in isolation in a library. This will
allow you to keep each one’s surface area small and keep your business logic,
state management, routing logic, etc., where it belongs: in your application.</p>
<p>With this scenario, a good intermediary step, before pulling components into
their own project, would be to create a folder in your application for these
components and set up a tool like storybook to house the individual examples and
compositions of them.</p>
<h3 id="scenario-2-multiple-projects-or-the-possibility-of-multiple-projects">Scenario 2: Multiple Projects (or The Possibility of Multiple Projects)</h3>
<p>Consider this exchange:</p>
<blockquote>
<p><strong>Them</strong>: You know that spinner/widget/dropdown/search thing we have over
here? It looks and works great! We want the same thing over here and over
here. How difficult is that?</p>
<p><strong>Me</strong>: Those are different projects, and that is really more like 4 different
components working together, so a) hard to do cleanly but good for the
long-term or b) easy (for now) if I copy and paste.</p>
<p><strong>Them</strong>: We need to ship.</p>
<p><strong>Me</strong>: Okay, so copy and paste it is…</p>
</blockquote>
<p>What’s special about this exchange is that <em>both sets of concerns and
perspectives are valid</em>. Software stakeholders typically want and need to ship
features and fixes quickly, and they usually want to maintain brand consistency
across their ecosystems. Software developers at those companies want to be able
to ship features and fixes and maintain brand consistency, but they are also
aware of the cost of short-term decision making (this is a way of accruing
technical debt).</p>
<p>We know that even the best code is useless to a business if there are no
customers around paying to use it, but we also know that suboptimal tech
decision making can grind projects to a halt over time, averting the
stakeholder’s directive of shipping features and fixes quickly.</p>
<p>So what can we do to not only amend the scenario above but also make this
undesired state unrepresentable in the future? We can start our projects with
an accompanying component library! For existing projects, we can begin moving
them in that direction.</p>
<h2 id="project-api-usage">Project API (Usage)</h2>
<p>Let’s first define how we are going to include our components in our project.</p>
<h3 id="js-imports">JS Imports</h3>
<p>Component JavaScript can be imported in a few different ways:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// import from the main (or module) specification in
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// package.json, depending on your bundler and its version
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">Circle</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;mylib&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// straight from the ESModule build
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">import</span> <span class="pl-nx">Circle</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;mylib/dist/esm/Circle&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// straight from the CommonJS build
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">import</span> <span class="pl-nx">Circle</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;mylib/dist/cjs/Circle&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// straight from the Universal Module Definition build
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">import</span> <span class="pl-nx">Circle</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;mylib/dist/umd/Circle&#39;</span></span></span></code></pre>
<h3 id="css-imports">CSS Imports</h3>
<p>Component CSS can be imported like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-s1">&#39;mylib/dist/css/Circle/styles.css&#39;</span></span></span></code></pre>
<p>If you know you will use all of the components and wish to import all of their
CSS at once:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-s1">&#39;mylib/dist/css/styles.css&#39;</span></span></span></code></pre>
<p>The JS import is simple enough, but you might be wondering, “What’s the deal
with importing CSS like this? I thought we were on to things like
styled-components, emotion, CSS modules, etc?”</p>
<p>These tools are great if the consuming application can bundle up and inject the
styles using the same instance of the tool, but can you guarantee each app will
use these same styling tools? If so, by all means go that direction. However, if
your library is injecting its own styles into the document at runtime, you will
not only potentially run into style specificity / collision issues if you don’t
have the application styles load last, but strict content security policies will
potentially disallow the dynamically added styles from even being applied!</p>
<p>The solution? Go with the lowest common denominator: regular, vanilla CSS (or
something that outputs regular, vanilla CSS). We’ll come back to this in <a href="#an-example-component">the
example component section</a>.</p>
<h2 id="main-project-tools">Main Project Tools</h2>
<p>It’s time to build the project! Here are the main tools we will use:</p>
<ul>
<li><a href="https://nodejs.org/en/">NodeJS</a> (version <code>13.13.0</code>)</li>
<li><a href="https://www.typescriptlang.org">TypeScript</a></li>
<li><a href="https://github.com/facebook/react">React</a></li>
<li><a href="https://github.com/storybookjs/storybook">Storybook (UI examples)</a></li>
<li><a href="https://github.com/facebook/jest">jest</a> (testing)</li>
<li><a href="https://github.com/dequelabs/axe-core">axe-core</a> (testing accessibility)</li>
<li>linting
<ul>
<li><a href="https://github.com/eslint/eslint">eslint</a> with <a href="https://github.com/prettier/prettier">prettier</a></li>
<li><a href="https://www.npmjs.com/package/husky">husky</a> with <a href="https://www.npmjs.com/package/lint-staged">lint-staged</a>; only on <code>pre-push</code></li>
</ul></li>
</ul>
<h2 id="project-structure">Project Structure</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">.
</span></span><span class="pl-line"><span class="pl-cl">├── .storybook            (1)
</span></span><span class="pl-line"><span class="pl-cl">│   └── ...
</span></span><span class="pl-line"><span class="pl-cl">├── dist                  (2)
</span></span><span class="pl-line"><span class="pl-cl">│   └── ...
</span></span><span class="pl-line"><span class="pl-cl">├── docs                  (3)
</span></span><span class="pl-line"><span class="pl-cl">│   └── ...
</span></span><span class="pl-line"><span class="pl-cl">├── examples              (4)
</span></span><span class="pl-line"><span class="pl-cl">│   └── ...
</span></span><span class="pl-line"><span class="pl-cl">├── scripts
</span></span><span class="pl-line"><span class="pl-cl">│   └── buildCSS          (5)
</span></span><span class="pl-line"><span class="pl-cl">├── source                (6)
</span></span><span class="pl-line"><span class="pl-cl">│   └── ...
</span></span><span class="pl-line"><span class="pl-cl">├── .eslintignore
</span></span><span class="pl-line"><span class="pl-cl">├── .eslintrc.js
</span></span><span class="pl-line"><span class="pl-cl">├── .gitignore
</span></span><span class="pl-line"><span class="pl-cl">├── .prettierrc.js
</span></span><span class="pl-line"><span class="pl-cl">├── CHANGELOG.md          (7)
</span></span><span class="pl-line"><span class="pl-cl">├── LICENSE               (8)
</span></span><span class="pl-line"><span class="pl-cl">├── README.md
</span></span><span class="pl-line"><span class="pl-cl">├── husky.config.js
</span></span><span class="pl-line"><span class="pl-cl">├── jest.config.js
</span></span><span class="pl-line"><span class="pl-cl">├── lint-staged.config.js
</span></span><span class="pl-line"><span class="pl-cl">├── package.json
</span></span><span class="pl-line"><span class="pl-cl">├── testSetup.ts
</span></span><span class="pl-line"><span class="pl-cl">├── tsconfig.base.json    (9)
</span></span><span class="pl-line"><span class="pl-cl">├── tsconfig.cjs.json
</span></span><span class="pl-line"><span class="pl-cl">├── tsconfig.esm.json
</span></span><span class="pl-line"><span class="pl-cl">├── tsconfig.json
</span></span><span class="pl-line"><span class="pl-cl">└── tsconfig.umd.json</span></span></code></pre>
<ol>
<li><code>.storybook/</code> – storybook examples configuration</li>
<li><code>dist/</code> – compiled project output</li>
<li><code>docs/</code> – compiled storybook examples output</li>
<li><code>examples/</code> – add <code>create-react-app</code>, <code>gatsby</code>, and other example projects here</li>
<li><code>scripts/buildCSS</code> – store build scripts here like this CSS-related one</li>
<li><code>source/</code> – where your project lives; we’ll dive into this in the next section</li>
<li><code>CHANGELOG.md</code> – be a good teammate and document your library’s changes; very useful for your teams and useful if you decide to open source the project</li>
<li><code>LICENSE</code> – a good idea if you plan to open source; otherwise, put <code>UNLICENSED</code> in your <code>package.json</code> license field</li>
<li><code>tsconfig.json</code>, et al – typescript build configs; we’ll dive into this in <a href="#project-setup">the project setup section</a></li>
</ol>
<h2 id="component-structure">Component Structure</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">.
</span></span><span class="pl-line"><span class="pl-cl">└── source
</span></span><span class="pl-line"><span class="pl-cl">    └── ComponentA
</span></span><span class="pl-line"><span class="pl-cl">        ├── __snapshots__
</span></span><span class="pl-line"><span class="pl-cl">        │   └── test.tsx.snap
</span></span><span class="pl-line"><span class="pl-cl">        ├── index.tsx
</span></span><span class="pl-line"><span class="pl-cl">        ├── stories.tsx
</span></span><span class="pl-line"><span class="pl-cl">        ├── styles.css
</span></span><span class="pl-line"><span class="pl-cl">        └── test.tsx
</span></span><span class="pl-line"><span class="pl-cl">    └── ComponentB
</span></span><span class="pl-line"><span class="pl-cl">        └── ...
</span></span><span class="pl-line"><span class="pl-cl">    └── ComponentC
</span></span><span class="pl-line"><span class="pl-cl">        └── ...
</span></span><span class="pl-line"><span class="pl-cl">    ├── index.ts
</span></span><span class="pl-line"><span class="pl-cl">    └── test.tsx</span></span></code></pre>
<p>The component and everything to do with it are co-located in the
<code>source/ComponentA/</code> folder:
* <code>index.tsx</code> component file (and any additional component files)
* storybook stories
* CSS
* tests</p>
<p>This grouping of everything having to do with a component makes it very easy to
find everything you need. If you would prefer a different setup, you can adjust
the tool configurations however you like.</p>
<p>Each component is then exported from the main <code>index.ts</code> file.</p>
<p>It’s now time to start the project from scratch and make this outline a reality!</p>
<h2 id="creating-the-project">Creating the Project</h2>
<p>To begin, let’s create the project and a <code>package.json</code> file with some
project-related information:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ mkdir example-component-library &amp;&amp; cd $_
</span></span><span class="pl-line"><span class="pl-cl">$ touch package.json</span></span></code></pre>
<p>And in <code>package.json</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;name&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;@yournpm/example-component-library&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;version&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;0.1.0&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;description&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;Example repository for a shared React components library&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;main&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;dist/cjs/index.js&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;module&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;dist/esm/index.js&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;repository&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;type&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;git&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;url&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;git@github.com:yourgithub/example-component-library.git&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;homepage&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;https://github.com/yourgithub/example-component-library&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;bugs&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;https://github.com/yourgithub/example-component-library&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;author&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;Your Name &lt;you@youremail.com&gt;&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;license&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;BSD-3&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;keywords&#34;</span><span class="pl-o">:</span> <span class="pl-p">[],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;tags&#34;</span><span class="pl-o">:</span> <span class="pl-p">[],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;sideEffects&#34;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s2">&#34;dist/**/*.css&#34;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;files&#34;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s2">&#34;LICENSE&#34;</span><span class="pl-p">,</span> <span class="pl-s2">&#34;dist/&#34;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;devDependencies&#34;</span><span class="pl-o">:</span> <span class="pl-p">{},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;peerDependencies&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;react&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;*&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;react-dom&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;dependencies&#34;</span><span class="pl-o">:</span> <span class="pl-p">{}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>Once you save that, run your build tool to make sure everything is ok:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm install</span></span></code></pre>
<p>Notably, we’ve set our <code>main</code> field to <code>dist/cjs/index.js</code>, the CommonJS build,
for compatibility with NodeJS environments because they don’t yet work well with
ESModules. We’ve set our <code>module</code> field to look at <code>dist/esm/index.js</code>, the
ESModule build. If you want to make use of the Universal Module Definition build
we’ll create later on, you can use the <code>browser</code> field:
<code>"browser": "dist/umd/index.js"</code>. Personally, if I build with webpack, I want
webpack to select the <code>module</code> field over the <code>browser</code> one because it will
always be of a smaller size, for the UMD builds are meant to be run in any of a
few different environments.</p>
<p>Also of importance is the <code>sideEffects</code> field. If our library code was pure and
didn’t have side effects, we would set the value to <code>false</code>, and build tools
like webpack would prune away all of the unused code. However, since we also are
exporting CSS, we need to make sure that it doesn’t get dropped by the build
tool, so we do that with <code>"sideEffects": ["dist/**/*.css"]</code>.</p>
<p>Lastly, we know we’re going to be using React, so we can go ahead and set that
as a <code>peerDependency</code> (it’s up to you to decide what versions of React you’ll
support).</p>
<h2 id="typescript-setup">TypeScript Setup</h2>
<p>We can now add TypeScript to our project with some compiler and project-related
options. We’ll also add some type definition libraries that we’ll use later, as
well as a dependency on <a href="https://www.npmjs.com/package/tslib"><code>tslib</code></a> to make
compiling our code to ES5 seamless.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm install --save-dev --save-exact \
</span></span><span class="pl-line"><span class="pl-cl">  @types/node \
</span></span><span class="pl-line"><span class="pl-cl">  @types/react \
</span></span><span class="pl-line"><span class="pl-cl">  @types/react-dom \
</span></span><span class="pl-line"><span class="pl-cl">  typescript
</span></span><span class="pl-line"><span class="pl-cl">$ npm install --save --save-exact tslib
</span></span><span class="pl-line"><span class="pl-cl">$ touch tsconfig.base.json tsconfig.json</span></span></code></pre>
<p>We will place our <code>compilerOptions</code> in <code>tsconfig.base.json</code> so that they can be
extended in all our different builds in the future:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;compilerOptions&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;allowJs&#34;</span><span class="pl-o">:</span> <span class="pl-kc">false</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;allowSyntheticDefaultImports&#34;</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;declaration&#34;</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;esModuleInterop&#34;</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;importHelpers&#34;</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;jsx&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;react&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;lib&#34;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s2">&#34;es2020&#34;</span><span class="pl-p">,</span> <span class="pl-s2">&#34;dom&#34;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;moduleResolution&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;node&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;noImplicitAny&#34;</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;outDir&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;dist/&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;sourceMap&#34;</span><span class="pl-o">:</span> <span class="pl-kc">false</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;strict&#34;</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;target&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;es5&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>Note that the <code>importHelpers</code> flag tells <code>tslib</code> whether it should be enabled or
not.</p>
<p>The <code>tsconfig.json</code> will be used as a default to include our future <code>source</code>
directory:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;extends&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;./tsconfig.base.json&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;include&#34;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s2">&#34;source/**/*&#34;</span><span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>We’ll add some more TypeScript-related packages when we get to the tools that
need them, and we’ll add more TypeScript build configurations in the section on
<a href="#building-our-typescript">building our typescript</a>.</p>
<h2 id="linting-setup">Linting Setup</h2>
<p>Linting is a great way to have everyone adhere to the same set of rules for code
style. For our project, we’re going to install a few tools to help us out.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm install --save-dev --save-exact \
</span></span><span class="pl-line"><span class="pl-cl">  @typescript-eslint/eslint-plugin \
</span></span><span class="pl-line"><span class="pl-cl">  @typescript-eslint/parser \
</span></span><span class="pl-line"><span class="pl-cl">  eslint \
</span></span><span class="pl-line"><span class="pl-cl">  eslint-config-prettier \
</span></span><span class="pl-line"><span class="pl-cl">  eslint-plugin-jest \
</span></span><span class="pl-line"><span class="pl-cl">  eslint-plugin-jsx-a11y \
</span></span><span class="pl-line"><span class="pl-cl">  eslint-plugin-prettier \
</span></span><span class="pl-line"><span class="pl-cl">  eslint-plugin-react \
</span></span><span class="pl-line"><span class="pl-cl">  eslint-plugin-react-hooks \
</span></span><span class="pl-line"><span class="pl-cl">  husky \
</span></span><span class="pl-line"><span class="pl-cl">  lint-staged \
</span></span><span class="pl-line"><span class="pl-cl">  prettier
</span></span><span class="pl-line"><span class="pl-cl">$ touch \
</span></span><span class="pl-line"><span class="pl-cl">  .eslintignore \
</span></span><span class="pl-line"><span class="pl-cl">  .eslintrc.js \
</span></span><span class="pl-line"><span class="pl-cl">  .prettierrc.js \
</span></span><span class="pl-line"><span class="pl-cl">  husky.config.js \
</span></span><span class="pl-line"><span class="pl-cl">  lint-staged.config.js</span></span></code></pre>
<p>The <code>.eslintignore</code> file will make sure we include files and folders that are
ignored by default (using the <code>!</code>) and exclude files and folders that we don’t
care about linting.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">!.eslintrc.js
</span></span><span class="pl-line"><span class="pl-cl">!.prettierrc.js
</span></span><span class="pl-line"><span class="pl-cl">!.storybook/
</span></span><span class="pl-line"><span class="pl-cl">dist/
</span></span><span class="pl-line"><span class="pl-cl">docs/
</span></span><span class="pl-line"><span class="pl-cl">examples/</span></span></code></pre>
<p>The <code>.eslintrc.js</code> file is something you and your team will need to figure out
for yourselves, but here’s where I stand on the issues:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">module</span><span class="pl-p">.</span><span class="pl-nx">exports</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">env</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">browser</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">es6</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">jest</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">node</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">extends</span><span class="pl-o">:</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;plugin:react/recommended&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;plugin:@typescript-eslint/recommended&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;prettier/@typescript-eslint&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;plugin:prettier/recommended&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;plugin:jsx-a11y/recommended&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">parserOptions</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">ecmaVersion</span><span class="pl-o">:</span> <span class="pl-mi">2020</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">sourceType</span><span class="pl-o">:</span> <span class="pl-s1">&#39;module&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">parser</span><span class="pl-o">:</span> <span class="pl-s1">&#39;@typescript-eslint/parser&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">plugins</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;jsx-a11y&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;react&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;react-hooks&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;@typescript-eslint&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">rules</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;@typescript-eslint/no-unused-vars&#39;</span><span class="pl-o">:</span> <span class="pl-s1">&#39;error&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;jsx-quotes&#39;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;error&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;prefer-double&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;jsx-a11y/no-onchange&#39;</span><span class="pl-o">:</span> <span class="pl-s1">&#39;off&#39;</span><span class="pl-p">,</span> <span class="pl-c1">// https://github.com/evcohen/eslint-plugin-jsx-a11y/issues/398
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-s1">&#39;no-trailing-spaces&#39;</span><span class="pl-o">:</span> <span class="pl-s1">&#39;error&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;object-curly-spacing&#39;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;error&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;always&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">quotes</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;error&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;single&#39;</span><span class="pl-p">,</span> <span class="pl-p">{</span> <span class="pl-nx">allowTemplateLiterals</span><span class="pl-o">:</span> <span class="pl-kc">true</span> <span class="pl-p">}],</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;react-hooks/exhaustive-deps&#39;</span><span class="pl-o">:</span> <span class="pl-s1">&#39;error&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;react-hooks/rules-of-hooks&#39;</span><span class="pl-o">:</span> <span class="pl-s1">&#39;error&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;react/prop-types&#39;</span><span class="pl-o">:</span> <span class="pl-s1">&#39;off&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">semi</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;error&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;never&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">settings</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">react</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">version</span><span class="pl-o">:</span> <span class="pl-s1">&#39;detect&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">overrides</span><span class="pl-o">:</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">files</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;*.js&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;*.jsx&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">rules</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-s1">&#39;@typescript-eslint/explicit-function-return-type&#39;</span><span class="pl-o">:</span> <span class="pl-s1">&#39;off&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-s1">&#39;@typescript-eslint/no-var-requires&#39;</span><span class="pl-o">:</span> <span class="pl-s1">&#39;off&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>The <code>.prettierrc.js</code> file defines your
<a href="https://github.com/prettier/prettier">prettier</a> configuration:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">module</span><span class="pl-p">.</span><span class="pl-nx">exports</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">semi</span><span class="pl-o">:</span> <span class="pl-kc">false</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">singleQuote</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>We’re almost done with the linting! There are two files left.</p>
<p>For our <code>husky.config.js</code> file, we’ll set it up to run <code>lint-staged</code> before we
push our code to our repository:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">module</span><span class="pl-p">.</span><span class="pl-nx">exports</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">hooks</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;pre-push&#39;</span><span class="pl-o">:</span> <span class="pl-s1">&#39;lint-staged&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>And for <code>lint-staged.config.js</code>, we’ll specify that we want to run <code>eslint --fix</code> on our staged files:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">module</span><span class="pl-p">.</span><span class="pl-nx">exports</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;*&#39;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;eslint --fix&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>Now that we’ve got this all in place, we can update our <code>package.json</code>’s
<code>script</code> object to include a <code>lint</code> command:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;lint&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;eslint .&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">},</span></span></span></code></pre>
<p>You can test this by running:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm run lint</span></span></code></pre>
<h2 id="testing-setup">Testing Setup</h2>
<p>We’re going to use Jest and <a href="https://testing-library.com/react"><code>@testing-library/react</code></a>
to handle running our tests and testing our component code, so let’s install
those tools and their companion TypeScript libraries. We’ll also install
axe-core to handle some automated accessibility testing.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm install --save-dev --save-exact \
</span></span><span class="pl-line"><span class="pl-cl">  @testing-library/jest-dom \
</span></span><span class="pl-line"><span class="pl-cl">  @testing-library/react \
</span></span><span class="pl-line"><span class="pl-cl">  @types/jest \
</span></span><span class="pl-line"><span class="pl-cl">  axe-core \
</span></span><span class="pl-line"><span class="pl-cl">  jest \
</span></span><span class="pl-line"><span class="pl-cl">  ts-jest
</span></span><span class="pl-line"><span class="pl-cl">$ touch jest.config.js testSetup.ts</span></span></code></pre>
<p>Our <code>jest.config.js</code> collects coverage from the right places, ignores
distribution and example directories, requires the <code>testSetup.ts</code> file, and sets
us up to use TypeScript in our tests.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">module</span><span class="pl-p">.</span><span class="pl-nx">exports</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">clearMocks</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">collectCoverage</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">collectCoverageFrom</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;&lt;rootDir&gt;/source/**/*.{ts,tsx}&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">coveragePathIgnorePatterns</span><span class="pl-o">:</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;/node_modules/&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;&lt;rootDir&gt;/source/@types&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;stories&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">moduleNameMapper</span><span class="pl-o">:</span> <span class="pl-p">{},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">preset</span><span class="pl-o">:</span> <span class="pl-s1">&#39;ts-jest&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">setupFilesAfterEnv</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;&lt;rootDir&gt;/testSetup.ts&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">testPathIgnorePatterns</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;dist/&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;examples/&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">verbose</span><span class="pl-o">:</span> <span class="pl-kc">true</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>And here is our <code>testSetup.ts</code> file that you can use to provide global testing
tools, patch JSDOM, and more:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-s1">&#39;@testing-library/jest-dom/extend-expect&#39;</span></span></span></code></pre>
<p>All we do in <code>testSetup.ts</code> is add a lot of custom matchers to the <code>expect</code>
function from jest via <a href="https://github.com/testing-library/jest-dom"><code>@testing-library/jest-dom</code></a>.</p>
<p>While we’re on the testing subject, we should also update our <code>package.json</code>’s
<code>scripts</code> object to include a <code>test</code> command:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;test&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;jest&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">},</span></span></span></code></pre>
<p>We don’t have any test files yet, but you can confirm everything is set up
correctly by running</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm run test</span></span></code></pre>
<h2 id="storybook-setup">Storybook Setup</h2>
<p>Storybook is a great way to not only share examples of your components but also
get instant feedback while developing them, as well. It also comes with <a href="https://storybook.js.org/addons/">a great
set of official addons</a>.</p>
<p>Let’s install Storybook for React with TypeScript, and let’s also add the addons
for accessibility and knobs:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm install --save-dev --save-exact \
</span></span><span class="pl-line"><span class="pl-cl">  @storybook/addon-a11y \
</span></span><span class="pl-line"><span class="pl-cl">  @storybook/addon-knobs \
</span></span><span class="pl-line"><span class="pl-cl">  @storybook/preset-typescript \
</span></span><span class="pl-line"><span class="pl-cl">  @storybook/react \
</span></span><span class="pl-line"><span class="pl-cl">  babel-loader \
</span></span><span class="pl-line"><span class="pl-cl">  ts-loader
</span></span><span class="pl-line"><span class="pl-cl">$ mkdir .storybook
</span></span><span class="pl-line"><span class="pl-cl">$ touch .storybook/main.js</span></span></code></pre>
<p>The <code>.storybook/main.js</code> file is where we can specify our Storybook options:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">module</span><span class="pl-p">.</span><span class="pl-nx">exports</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">addons</span><span class="pl-o">:</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;@storybook/addon-a11y&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;@storybook/addon-knobs&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;@storybook/preset-typescript&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">stories</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s1">&#39;../source/**/*/stories.tsx&#39;</span><span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<h2 id="an-example-component">An Example Component</h2>
<p>For our example component, we are going to make a circle with SVG. With only
this simple component, we will cover the following aspects of component
development:
* TypeScript interfaces for required and optional React props
* Component CSS
* Testing (regular, snapshot, and accessibility)
* Storybook examples</p>
<p>Let’s create the files we know we’re going to need:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ mkdir source/Circle
</span></span><span class="pl-line"><span class="pl-cl">$ touch source/Circle/index.tsx \
</span></span><span class="pl-line"><span class="pl-cl">  source/Circle/stories.tsx \
</span></span><span class="pl-line"><span class="pl-cl">  source/Circle/styles.css \
</span></span><span class="pl-line"><span class="pl-cl">  source/Circle/test.tsx</span></span></code></pre>
<h3 id="component-file">Component File</h3>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">React</span><span class="pl-p">,</span> <span class="pl-p">{</span> <span class="pl-nx">FC</span> <span class="pl-p">}</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;react&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// className, desc, and fill are optional,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// whereas title and size are required
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">interface</span> <span class="pl-nx">Props</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">className?</span>: <span class="pl-kt">string</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">desc?</span>: <span class="pl-kt">string</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">fill?</span>: <span class="pl-kt">string</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">size</span>: <span class="pl-kt">number</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">title</span>: <span class="pl-kt">string</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// we provide our Props interface to the
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// function component type
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">Circle</span>: <span class="pl-kt">FC</span><span class="pl-p">&lt;</span><span class="pl-nt">Props</span><span class="pl-p">&gt;</span> <span class="pl-o">=</span> <span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">className</span> <span class="pl-o">=</span> <span class="pl-s1">&#39;rl-circle&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">desc</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">fill</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">size</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">title</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span> <span class="pl-o">=&gt;</span> <span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">svg</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">className</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-nx">className</span><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">height</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-nx">size</span><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">fill</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-nx">fill</span><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">role</span><span class="pl-o">=</span><span class="pl-s">&#34;img&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">viewBox</span><span class="pl-o">=</span><span class="pl-s">&#34;0 0 100 100&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">width</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-nx">size</span><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">xmlns</span><span class="pl-o">=</span><span class="pl-s">&#34;http://www.w3.org/2000/svg&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">title</span><span class="pl-p">&gt;{</span><span class="pl-nx">title</span><span class="pl-p">}&lt;/</span><span class="pl-nt">title</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span><span class="pl-nx">desc</span> <span class="pl-o">&amp;&amp;</span> <span class="pl-p">&lt;</span><span class="pl-nt">desc</span><span class="pl-p">&gt;{</span><span class="pl-nx">desc</span><span class="pl-p">}&lt;/</span><span class="pl-nt">desc</span><span class="pl-p">&gt;}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">circle</span> <span class="pl-na">cx</span><span class="pl-o">=</span><span class="pl-s">&#34;50&#34;</span> <span class="pl-na">cy</span><span class="pl-o">=</span><span class="pl-s">&#34;50&#34;</span> <span class="pl-na">r</span><span class="pl-o">=</span><span class="pl-s">&#34;50&#34;</span> <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">svg</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">export</span> <span class="pl-k">default</span> <span class="pl-nx">Circle</span></span></span></code></pre>
<p>In this component file, we define the parameters that we’re willing to work
with, provide a fallback in the case of <code>className</code>, and make a regular old
component.</p>
<p>This file should be pretty straightforward, so let’s move on to the CSS!</p>
<h3 id="component-css">Component CSS</h3>
<p>This is a real easy one.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">.</span><span class="pl-nc">rl-circle</span> <span class="pl-p">{</span> <span class="pl-k">margin</span><span class="pl-p">:</span> <span class="pl-mi">1</span><span class="pl-kt">em</span><span class="pl-p">;</span> <span class="pl-p">}</span></span></span></code></pre>
<p>The <code>rl</code> is short for “react library”, and I made it up. The CSS that we are
creating needs to be made unique, and prefixing your classes is the simplest way
of doing that.</p>
<h3 id="component-tests">Component Tests</h3>
<p>It’s time to write some tests! We’re going to make explicit expectations and
do some snapshot tests so that everybody is happy.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">React</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;react&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">render</span> <span class="pl-p">}</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;@testing-library/react&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">Circle</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;./index&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-s1">&#39;with all props&#39;</span><span class="pl-p">,</span> <span class="pl-p">()</span> <span class="pl-o">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">asFragment</span><span class="pl-p">,</span> <span class="pl-nx">container</span><span class="pl-p">,</span> <span class="pl-nx">getByText</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">render</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">Circle</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">className</span><span class="pl-o">=</span><span class="pl-s">&#34;class-override&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">desc</span><span class="pl-o">=</span><span class="pl-s">&#34;A blue circle&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">fill</span><span class="pl-o">=</span><span class="pl-s">&#34;#30336b&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">size</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-mi">200</span><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">title</span><span class="pl-o">=</span><span class="pl-s">&#34;Water planet&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">svgEl</span> <span class="pl-o">=</span> <span class="pl-nx">container</span><span class="pl-p">.</span><span class="pl-nx">querySelector</span><span class="pl-p">(</span><span class="pl-s1">&#39;svg&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">titleEl</span> <span class="pl-o">=</span> <span class="pl-nx">getByText</span><span class="pl-p">(</span><span class="pl-s1">&#39;Water planet&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">descEl</span> <span class="pl-o">=</span> <span class="pl-nx">getByText</span><span class="pl-p">(</span><span class="pl-s1">&#39;A blue circle&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">svgEl</span><span class="pl-p">).</span><span class="pl-nx">toHaveAttribute</span><span class="pl-p">(</span><span class="pl-s1">&#39;height&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;200&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">svgEl</span><span class="pl-p">).</span><span class="pl-nx">toHaveAttribute</span><span class="pl-p">(</span><span class="pl-s1">&#39;width&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;200&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">titleEl</span><span class="pl-p">).</span><span class="pl-nx">toBeInTheDocument</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">descEl</span><span class="pl-p">).</span><span class="pl-nx">toBeInTheDocument</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">asFragment</span><span class="pl-p">()).</span><span class="pl-nx">toMatchSnapshot</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-s1">&#39;with only title &amp; size&#39;</span><span class="pl-p">,</span> <span class="pl-p">()</span> <span class="pl-o">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">asFragment</span><span class="pl-p">,</span> <span class="pl-nx">container</span><span class="pl-p">,</span> <span class="pl-nx">getByText</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">render</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">Circle</span> <span class="pl-na">title</span><span class="pl-o">=</span><span class="pl-s">&#34;Water planet&#34;</span> <span class="pl-na">size</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-mi">200</span><span class="pl-p">}</span> <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">svgEl</span> <span class="pl-o">=</span> <span class="pl-nx">container</span><span class="pl-p">.</span><span class="pl-nx">querySelector</span><span class="pl-p">(</span><span class="pl-s1">&#39;svg&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">titleEl</span> <span class="pl-o">=</span> <span class="pl-nx">getByText</span><span class="pl-p">(</span><span class="pl-s1">&#39;Water planet&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">descEl</span> <span class="pl-o">=</span> <span class="pl-nx">container</span><span class="pl-p">.</span><span class="pl-nx">querySelector</span><span class="pl-p">(</span><span class="pl-s1">&#39;desc&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">svgEl</span><span class="pl-p">).</span><span class="pl-nx">toHaveAttribute</span><span class="pl-p">(</span><span class="pl-s1">&#39;height&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;200&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">svgEl</span><span class="pl-p">).</span><span class="pl-nx">toHaveAttribute</span><span class="pl-p">(</span><span class="pl-s1">&#39;width&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;200&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">titleEl</span><span class="pl-p">).</span><span class="pl-nx">toBeInTheDocument</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">descEl</span><span class="pl-p">).</span><span class="pl-nx">not</span><span class="pl-p">.</span><span class="pl-nx">toBeInTheDocument</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">asFragment</span><span class="pl-p">()).</span><span class="pl-nx">toMatchSnapshot</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span></span></span></code></pre>
<p>These first tests provide different sets of props and test various aspects of
our component based on given props’ inclusion.</p>
<p>Next, we can use the <code>axe-core</code> tool to try our hand at accessibility testing:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">axe</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;axe-core&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-s1">&#39;is accessible with title, desc, size&#39;</span><span class="pl-p">,</span> <span class="pl-p">(</span><span class="pl-nx">done</span><span class="pl-p">)</span> <span class="pl-o">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">container</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">render</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">Circle</span> <span class="pl-na">desc</span><span class="pl-o">=</span><span class="pl-s">&#34;A blue circle&#34;</span> <span class="pl-na">size</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-mi">200</span><span class="pl-p">}</span> <span class="pl-na">title</span><span class="pl-o">=</span><span class="pl-s">&#34;Water planet&#34;</span> <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">axe</span><span class="pl-p">.</span><span class="pl-nx">run</span><span class="pl-p">(</span><span class="pl-nx">container</span><span class="pl-p">,</span> <span class="pl-p">{},</span> <span class="pl-p">(</span><span class="pl-nx">err</span><span class="pl-p">,</span> <span class="pl-nx">result</span><span class="pl-p">)</span> <span class="pl-o">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">err</span><span class="pl-p">).</span><span class="pl-nx">toEqual</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">result</span><span class="pl-p">.</span><span class="pl-nx">violations</span><span class="pl-p">.</span><span class="pl-nx">length</span><span class="pl-p">).</span><span class="pl-nx">toEqual</span><span class="pl-p">(</span><span class="pl-mi">0</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">done</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-s1">&#39;is inaccessible without title&#39;</span><span class="pl-p">,</span> <span class="pl-p">(</span><span class="pl-nx">done</span><span class="pl-p">)</span> <span class="pl-o">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">container</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">render</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">Circle</span> <span class="pl-na">desc</span><span class="pl-o">=</span><span class="pl-s">&#34;A blue circle&#34;</span> <span class="pl-na">title</span><span class="pl-o">=</span><span class="pl-s">&#34;Water circle&#34;</span> <span class="pl-na">size</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-mi">200</span><span class="pl-p">}</span> <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// do something very wrong to prove a11y testing works
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-nx">container</span><span class="pl-p">.</span><span class="pl-nx">querySelector</span><span class="pl-p">(</span><span class="pl-s1">&#39;title&#39;</span><span class="pl-p">)</span><span class="pl-o">?</span><span class="pl-p">.</span><span class="pl-nx">remove</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">axe</span><span class="pl-p">.</span><span class="pl-nx">run</span><span class="pl-p">(</span><span class="pl-nx">container</span><span class="pl-p">,</span> <span class="pl-p">{},</span> <span class="pl-p">(</span><span class="pl-nx">err</span><span class="pl-p">,</span> <span class="pl-nx">result</span><span class="pl-p">)</span> <span class="pl-o">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">err</span><span class="pl-p">).</span><span class="pl-nx">toEqual</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-nx">result</span><span class="pl-p">.</span><span class="pl-nx">violations</span><span class="pl-p">[</span><span class="pl-mi">0</span><span class="pl-p">].</span><span class="pl-nx">id</span><span class="pl-p">).</span><span class="pl-nx">toEqual</span><span class="pl-p">(</span><span class="pl-s1">&#39;svg-img-alt&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">done</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span></span></span></code></pre>
<p>While the first test should be clear, the second test almost seems pointless
(hint: it is). I am including it here to demonstrate what a failing
accessibility scenario might look like. In reality, the first test in this group
pointed out the error in the second test, for I was originally <em>not</em> requiring
<code>title</code>, but I was giving the SVG <code>role="img"</code>. This is a no-no if there is no
<code>aria-label</code>, <code>aria-labelledby</code>, nor <code>&lt;title&gt;</code> to supply the SVG with any
textual meaning.</p>
<p>Testing is easy if you keep things simple, and automated accessibility testing
is even easier than that, for all you need to do is provide DOM elements.</p>
<h3 id="component-stories">Component Stories</h3>
<p>I find it very difficult to do test driven development when developing
components, for it is an exploratory, creative experience for me. Instant
feedback makes it easy to run through all my bad ideas (there are many!) and
eventually land on some good ones. Storybook stories can help us do that, so
let’s make our first story in <code>source/Circle/stories.tsx</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">React</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;react&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">storiesOf</span> <span class="pl-p">}</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;@storybook/react&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">withA11y</span> <span class="pl-p">}</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;@storybook/addon-a11y&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">color</span><span class="pl-p">,</span> <span class="pl-kt">number</span><span class="pl-p">,</span> <span class="pl-nx">text</span><span class="pl-p">,</span> <span class="pl-nx">withKnobs</span> <span class="pl-p">}</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;@storybook/addon-knobs&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// import our component and styles from
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// the distribution (build) output
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">Circle</span> <span class="pl-p">}</span> <span class="pl-kr">from</span> <span class="pl-s1">&#39;../../dist/esm&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-s1">&#39;../../dist/css/Circle/styles.css&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// group our stories under &#34;Circle&#34;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">stories</span> <span class="pl-o">=</span> <span class="pl-nx">storiesOf</span><span class="pl-p">(</span><span class="pl-s1">&#39;Circle&#39;</span><span class="pl-p">,</span> <span class="pl-nx">module</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// enable the accessibility &amp; knobs addons
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">stories</span><span class="pl-p">.</span><span class="pl-nx">addDecorator</span><span class="pl-p">(</span><span class="pl-nx">withA11y</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">stories</span><span class="pl-p">.</span><span class="pl-nx">addDecorator</span><span class="pl-p">(</span><span class="pl-nx">withKnobs</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// add a new story and use the
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// knobs tools to provide named
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// defaults that you can alter
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// in the Storybook interface
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">stories</span><span class="pl-p">.</span><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-s1">&#39;default&#39;</span><span class="pl-p">,</span> <span class="pl-p">()</span> <span class="pl-o">=&gt;</span> <span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">Circle</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">desc</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-nx">text</span><span class="pl-p">(</span><span class="pl-s1">&#39;desc&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;A blue circle&#39;</span><span class="pl-p">)}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">fill</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-nx">color</span><span class="pl-p">(</span><span class="pl-s1">&#39;fill&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;#7ed6df&#39;</span><span class="pl-p">)}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">size</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-kt">number</span><span class="pl-p">(</span><span class="pl-s1">&#39;size&#39;</span><span class="pl-p">,</span> <span class="pl-mi">200</span><span class="pl-p">)}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">title</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-nx">text</span><span class="pl-p">(</span><span class="pl-s1">&#39;title&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;Abstract water planet&#39;</span><span class="pl-p">)}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">stories</span><span class="pl-p">.</span><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-s1">&#39;another scenario...&#39;</span><span class="pl-p">,</span> <span class="pl-p">()</span> <span class="pl-o">=&gt;</span> <span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">Circle</span> <span class="pl-p">{</span><span class="pl-err">/*</span> <span class="pl-na">other</span> <span class="pl-na">example</span> <span class="pl-na">props</span> <span class="pl-na">here</span> <span class="pl-err">*/</span><span class="pl-p">}</span> <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">))</span></span></span></code></pre>
<p>Each component gets its own <code>stories.tsx</code> file, so there’s no need to worry
about them getting out of hand with all the different components in your
library. Add as many different stories for your components as you like! Our
Storybook config will collect them all for you into a single place.</p>
<h2 id="building-our-typescript">Building Our TypeScript</h2>
<p>We’ve already created a <code>tsconfig.base.json</code> and <code>tsconfig.json</code> file, and now
it’s time to add ones for CommonJS (CJS), ESModules (ESM), and Universal Module
Definitions (UMD). We will then add some NPM scripts to build out TypeScript for
us.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ touch tsconfig.cjs.json tsconfig.esm.json tsconfig.umd.json</span></span></code></pre>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// tsconfig.cjs.json
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;extends&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;./tsconfig.base.json&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;compilerOptions&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;module&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;commonjs&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;outDir&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;dist/cjs/&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;include&#34;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s2">&#34;source/index.ts&#34;</span><span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// tsconfig.esm.json
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;extends&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;./tsconfig.base.json&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;compilerOptions&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;module&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;esNext&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;outDir&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;dist/esm/&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;include&#34;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s2">&#34;source/index.ts&#34;</span><span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// tsconfig.umd.json
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;extends&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;./tsconfig.base.json&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;compilerOptions&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;module&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;umd&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s2">&#34;outDir&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;dist/umd/&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;include&#34;</span><span class="pl-o">:</span> <span class="pl-p">[</span><span class="pl-s2">&#34;source/index.ts&#34;</span><span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>Each of these specify where to find the source, what type of module to output,
and where to put the resulting compiled code. If you want your code to be
compiled to the output, make sure it is either included in the <code>include</code> field
or is <code>require</code>d by something that is.</p>
<p>In our <code>package.json</code>, let’s add some scripts that make use of these configs:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;build:js:cjs&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;tsc -p tsconfig.cjs.json&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;build:js:esm&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;tsc -p tsconfig.esm.json&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;build:js:umd&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;tsc -p tsconfig.umd.json&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>Easy! If you are guessing that we might want to run these all together in a
<code>build:js</code> command, there are two ways to do that (one verbose and one less so).</p>
<p>Our first attempt:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;build:js&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;npm run build:js:cjs &amp;&amp; npm run build:js:esm &amp;&amp; npm run build:js:umd&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>Not bad, but we can use the <a href="https://www.npmjs.com/package/npm-run-all"><code>npm-run-all</code></a>
tool to not only write a more succinct script but also run these in parallel!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm install --save-dev --save-exact npm-run-all</span></span></code></pre>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;build:js&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-p build:js:cjs build:js:esm build:js:umd&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>The <code>npm-run-all</code> tool gives us <code>run-p</code> for running scripts in parallel and
<code>run-s</code> for running them synchronously.</p>
<p>Watching for changes is also very simple:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;build:js:esm:watch&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;tsc -p tsconfig.esm.json -w&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>While we’re here, let’s go ahead and add a <code>clean</code>ing script for our <code>dist/</code>
directory:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;clean&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;clean:dist&#34;</span><span class="pl-p">,</span> <span class="pl-c1">// we&#39;ll add more here shortly
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;clean:dist&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;rm -rf dist&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>Now that we can do some <code>clean</code>ing and <code>build</code>ing, let’s create a single <code>build</code>
script that we can continue adding build steps to as we go:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;build&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-s clean build:js&#34;</span><span class="pl-p">,</span> <span class="pl-c1">// we&#39;ll add more here shortly
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">}</span></span></span></code></pre>
<p>Give it all whirl, if you like:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm run build</span></span></code></pre>
<p>You should see the following tree structure for your <code>dist/</code> folder:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">.
</span></span><span class="pl-line"><span class="pl-cl">└── dist
</span></span><span class="pl-line"><span class="pl-cl">    └── cjs
</span></span><span class="pl-line"><span class="pl-cl">        └── Circle
</span></span><span class="pl-line"><span class="pl-cl">            ├── index.d.js
</span></span><span class="pl-line"><span class="pl-cl">            └── index.js
</span></span><span class="pl-line"><span class="pl-cl">        ├── index.d.js
</span></span><span class="pl-line"><span class="pl-cl">        └── index.js
</span></span><span class="pl-line"><span class="pl-cl">    └── esm
</span></span><span class="pl-line"><span class="pl-cl">        └── Circle
</span></span><span class="pl-line"><span class="pl-cl">            ├── index.d.js
</span></span><span class="pl-line"><span class="pl-cl">            └── index.js
</span></span><span class="pl-line"><span class="pl-cl">        ├── index.d.js
</span></span><span class="pl-line"><span class="pl-cl">        └── index.js
</span></span><span class="pl-line"><span class="pl-cl">    └── umd
</span></span><span class="pl-line"><span class="pl-cl">        └── Circle
</span></span><span class="pl-line"><span class="pl-cl">            ├── index.d.js
</span></span><span class="pl-line"><span class="pl-cl">            └── index.js
</span></span><span class="pl-line"><span class="pl-cl">        ├── index.d.js
</span></span><span class="pl-line"><span class="pl-cl">        └── index.js</span></span></code></pre>
<p>We’re getting places! We have JS, and now we need our CSS.</p>
<h2 id="building-our-css">Building Our CSS</h2>
<p>For our styles, we have two goals:
1. output each component’s styles in a component CSS folder like <code>dist/css/Circle/styles.css</code>
1. output a combination of each component’s styles in a single file in <code>dist/css/styles.css</code></p>
<p>To achieve this, we’re going to write a short bash script, and we’re going to
place it in <code>scripts/buildCSS</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ mkdir scripts
</span></span><span class="pl-line"><span class="pl-cl">$ touch scripts/buildCSS
</span></span><span class="pl-line"><span class="pl-cl">$ chmod +x scripts/buildCSS</span></span></code></pre>
<p>And in <code>scripts/buildCSS</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-cp">#!/bin/bash
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-cp"></span><span class="pl-nb">set</span> -euo pipefail
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">function</span> copy_css <span class="pl-o">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nb">local</span> <span class="pl-nv">dir</span><span class="pl-o">=</span><span class="pl-k">$(</span>dirname <span class="pl-nv">$0</span><span class="pl-k">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nb">local</span> <span class="pl-nv">component</span><span class="pl-o">=</span><span class="pl-k">$(</span>basename <span class="pl-nv">$dir</span><span class="pl-k">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nb">local</span> <span class="pl-nv">dist_css</span><span class="pl-o">=</span><span class="pl-nv">$PWD</span>/dist/css
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># concatenate component CSS to main CSS file</span>
</span></span><span class="pl-line"><span class="pl-cl">  mkdir -p <span class="pl-nv">$dist_css</span>
</span></span><span class="pl-line"><span class="pl-cl">  cat <span class="pl-nv">$0</span> &gt;&gt; <span class="pl-nv">$dist_css</span>/styles.css
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1"># copy component CSS to component folder</span>
</span></span><span class="pl-line"><span class="pl-cl">  mkdir -p <span class="pl-nv">$dist_css</span>/<span class="pl-nv">$component</span>/
</span></span><span class="pl-line"><span class="pl-cl">  cp <span class="pl-nv">$0</span> <span class="pl-nv">$dist_css</span>/<span class="pl-nv">$component</span>/
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-o">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nb">export</span> -f copy_css
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-k">function</span> build <span class="pl-o">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  find <span class="pl-nv">$PWD</span>/source <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    -name <span class="pl-s1">&#39;*.css&#39;</span> <span class="pl-se">\
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-se"></span>    -exec /bin/bash -c <span class="pl-s1">&#39;copy_css $0&#39;</span> <span class="pl-o">{}</span> <span class="pl-se">\;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-o">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">build</span></span></code></pre>
<p>We lean on some <code>coreutils</code> here to solve our problems for us. The last line of
our script, <code>build</code>, calls the function of the same name that looks inside the
<code>source</code> directory for all CSS files and tells the <code>bash</code> program to run
<code>copy_css</code> with the path to the CSS file. There’s a catch, though: <code>bash</code> is
going to run in a subshell, so we need to make sure our <code>copy_css</code> function is
exported and available by <code>export -f copy_css</code>.</p>
<p>For the <code>copy_css</code> function, it’s much simpler than it looks! Here are the
steps:
1. <code>mkdir -p $dist_css</code> creates our output directory, <code>dist/css</code>.
1. <code>cat $0 &gt;&gt; $dist_css/styles.css</code> concatenates all the lines of our source CSS
file and appends them to <code>dist/css/styles.css</code>.
1. <code>mkdir -p $dist_css/$component/</code> creates a component CSS folder like
<code>dist/css/Circle/</code>. We derive the <code>$component</code> variable by getting the
<code>basename</code> of the <code>dirname</code> of our full CSS file path. For example, <code>/Users/myuser/projects/example-component-library/source/Circle/styles.css</code>
has a <code>dirname</code> of <code>/Users/rpearce/projects/example-component-library/source/Circle</code>,
and that has a <code>basename</code> of <code>Circle</code>! Using that deduction, we can derive
what component we’re working with and create that output directory simply by
finding a CSS file.
1. <code>cp $0 $dist_css/$component/</code> copies the source component CSS file to the
output component directory; that’s it!</p>
<p>If you have a different CSS setup, you’ll need to adjust this build script
accordingly.</p>
<p>Now that we have our <code>buildCSS</code> script, we can add an NPM <code>script</code> to handle
building this for us and add that to our <code>build</code> script:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;build&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-s clean build:js build:css&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;build:css&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;./scripts/buildCSS&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>Similarly to our <code>build:js:esm:watch</code> command, how might we watch for CSS
changes and run our script in a <code>build:css:watch</code> command? Luckily, there’s a
tool that can help us with that: <a href="https://www.npmjs.com/package/chokidar"><code>chokidar</code></a>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm install --save-dev --save-exact chokidar</span></span></code></pre>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;build:css:watch&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;chokidar \&#34;source/**/*.css\&#34; -c \&#34;./scripts/buildCSS\&#34;&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<h2 id="building-our-stories">Building Our Stories</h2>
<p>To develop our components and get instant feedback in our Storybook examples,
we’re going to need to run a few things at once to get it all to work together.</p>
<p>First, let’s add a line to our <code>package.json</code>’s <code>scripts</code> object called
<code>storybook</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;storybook&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;start-storybook -p 6006&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">},</span></span></span></code></pre>
<p>Next, let’s add a <code>start</code> command that, in this sequence,
1. cleans the <code>dist/</code> directory
1. builds only the ESModule JS output
1. builds the CSS</p>
<p>and then, in parallel,
1. watches the JS for changes and rebuilds the ESModule output
1. watches the CSS for changes and rebuilds the CSS
1. runs storybook, which watches for changes to the prior two items, for it will
detect changes to its <code>import</code>s from the <code>dist/</code> folder</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;start&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-s clean:dist build:js:esm build:css &amp;&amp; run-p build:js:esm:watch build:css:watch storybook&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>If you want to break those up into different scripts to make it more legible,
here’s a way to do that:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;start&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-s start:init start:run&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;start:init&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-s clean:dist build:js:esm build:css&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;start:run&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-p build:js:esm:watch build:css:watch storybook&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>You can then run this from the command line, and it should automatically open
your web browser and take you to <a href="http://localhost:6006" class="uri">http://localhost:6006</a>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm run start</span></span></code></pre>
<p>Your Storybook library should have your component, and you can adjust the
component knobs in one of the sidebars, and you can also see the accessibility
audit located in the tab next to the knobs. <em>Note: no amount of automated
testing can guarantee accessibility, but it can help you catch silly mistakes.</em></p>
<p>With all these pieces in place, you can now develop your components and get
instante feedback in the browser using the same code that you would provide to a
consumer of your package!</p>
<p>Did you know that you can also build static HTML, CSS, and JavaScript files and
serve that up through something like GitHub Pages? We can update our
<code>package.json</code> <code>scripts</code> to include scripts for building our Storybook output
to the <code>docs/</code> folder and for cleaning the <code>docs/</code> folder, as well.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;build:docs&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;build-storybook -o docs&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;clean:docs&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;rm -rf docs&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;storybook&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;start-storybook -p 6006&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">},</span></span></span></code></pre>
<p>The <code>clean:docs</code> script, if ran first, will guarantee that we have fresh output
in our <code>docs/</code> folder. Let’s give it a go:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$ npm run clean:docs &amp;&amp; npm run build:docs</span></span></code></pre>
<p>Since we can now clean and build our Storybook folder, we can update our <code>build</code>
and <code>clean</code> scripts accordingly:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;build&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-s clean build:js build:css build:docs&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;clean&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-p clean:dist clean:docs&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<h2 id="continuous-integration-notes">Continuous Integration Notes</h2>
<p>When you set up a continuous integration (CI) tool for this project, it will be
tempting to tell it to simply run <code>$ npm run build</code>; however, this will not
include your linting and testing scripts, and you could potentially have a green
light from CI when really you have problems!</p>
<p>While you could always run your linting and testing scripts inside of <code>build</code> (
this can get tedious) or multiple scripts from your CI configuration, let’s
instead add another script named <code>ci</code> to handle this for us:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;ci&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-p lint build test&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>No worries! Now we can use <code>$ npm run ci</code> in our CI configuration.</p>
<h2 id="publishing-notes">Publishing Notes</h2>
<p>I recommend adding a <code>prepublishOnly</code> script that ensures your linter and tests
pass before trying to build your component output:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-s2">&#34;prepublishOnly&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;run-p lint test &amp;&amp; run-p build:js build:css&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">},</span></span></span></code></pre>
<p>Also, if you want this to be a private repository, make sure you add
<code>"private": true</code> to your <code>package.json</code> before publishing.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Thank you for reading this, and I hope this helps you create an awesome,
accessible component library.</p>
<p>Robert</p>]]></summary>
</entry>
<entry>
    <title>Catch Low-Hanging Accessibility Fruit with axe-core</title>
    <link href="https://robertwpearce.com/catch-low-hanging-accessibility-fruit-with-axe-core.html" />
    <id>https://robertwpearce.com/catch-low-hanging-accessibility-fruit-with-axe-core.html</id>
    <published>2020-02-24T00:00:00Z</published>
    <updated>2020-02-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://www.deque.com">Deque Systems</a>, in addition to having <a href="https://www.deque.com/axe/axe-for-web/">an
accessibility-testing browser plugin</a>,
has an open source package, <a href="https://www.npmjs.com/package/axe-core">axe-core</a>,
that can help you determine if HTML contains obvious accessibility issues.</p>
<p>That tool can be used on its own in your tests, or you can turn it into a
<code>Promise</code> and use it like this!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">axe</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;axe-core&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">isA11y</span> <span class="pl-o">=</span> <span class="pl-nx">html</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">new</span> <span class="pl-nb">Promise</span><span class="pl-p">((</span><span class="pl-nx">resolve</span><span class="pl-p">,</span> <span class="pl-nx">reject</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">axe</span><span class="pl-p">.</span><span class="pl-nx">run</span><span class="pl-p">(</span><span class="pl-nx">html</span><span class="pl-p">,</span> <span class="pl-p">{},</span> <span class="pl-p">(</span><span class="pl-nx">err</span><span class="pl-p">,</span> <span class="pl-nx">result</span><span class="pl-o">=</span><span class="pl-p">{})</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">violations</span><span class="pl-o">=</span><span class="pl-p">[]</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">result</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">err</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">reject</span><span class="pl-p">(</span><span class="pl-nx">err</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">violations</span><span class="pl-p">.</span><span class="pl-nx">length</span> <span class="pl-o">&gt;</span> <span class="pl-mi">0</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">reject</span><span class="pl-p">(</span><span class="pl-nx">violations</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">}</span> <span class="pl-k">else</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-c1">// Uncomment to view incomplete/unavailable tests &amp; why
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>        <span class="pl-c1">//console.log(result.incomplete)
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>        <span class="pl-nx">resolve</span><span class="pl-p">(</span><span class="pl-kc">true</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-s1">&#39;bad form&#39;</span><span class="pl-p">,</span> <span class="pl-kr">async</span> <span class="pl-p">()</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">wrap</span> <span class="pl-o">=</span> <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">createElement</span><span class="pl-p">(</span><span class="pl-s1">&#39;div&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">wrap</span><span class="pl-p">.</span><span class="pl-nx">innerHTML</span> <span class="pl-o">=</span> <span class="pl-sb">`
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-sb">    &lt;form&gt;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-sb">      &lt;div&gt;Enter your name&lt;/div&gt;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-sb">      &lt;input type=&#34;text&#34; /&gt;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-sb">      &lt;button type=&#34;submit&#34;&gt;Submit&lt;/button&gt;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-sb">    &lt;/form&gt;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-sb">  `</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">body</span><span class="pl-p">.</span><span class="pl-nx">appendChild</span><span class="pl-p">(</span><span class="pl-nx">wrap</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-kr">await</span> <span class="pl-nx">isA11y</span><span class="pl-p">(</span><span class="pl-nx">wrap</span><span class="pl-p">)).</span><span class="pl-nx">toEqual</span><span class="pl-p">(</span><span class="pl-kc">true</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Failed: Array [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   Object {
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//     &#34;description&#34;: &#34;Ensures every form element has a label&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//     &#34;help&#34;: &#34;Form elements must have labels&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//     &#34;helpUrl&#34;: &#34;https://dequeuniversity.com/rules/axe/3.5/label?application=axeAPI&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//     &#34;id&#34;: &#34;label&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//     &#34;impact&#34;: &#34;critical&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//     &#34;nodes&#34;: Array [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//       [Object],
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//     ],
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//     &#34;tags&#34;: Array [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//       &#34;cat.forms&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//       &#34;wcag2a&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//       &#34;wcag332&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//       &#34;wcag131&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//       &#34;section508&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//       &#34;section508.22.n&#34;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//     ],
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   }
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//  ]
</span></span></span></code></pre>
<p>It can detect all sorts of accessibility issues, so long as the environment in
which it’s being tested supports the browser features used in <code>axe-core</code>’s
tests. For example, <code>jsdom</code>, which <code>jest</code> uses as its browser mocking engine,
<a href="https://github.com/jsdom/jsdom/pull/2719">only recently added some support for <code>Range</code></a>,
it seems there are still some aspects missing, and this prevents <code>axe-core</code> from
being able to test things like the accessibility of text color on certain
backgrounds.</p>
<p>That said, the sheer number of issues that can be caught with this tool is
staggering. If you work with tools like React and combine this with Deque’s
<a href="https://github.com/dequelabs/react-axe"><code>react-axe</code></a> tool and
<a href="https://github.com/evcohen/eslint-plugin-jsx-a11y"><code>eslint-plugin-jsx-a11y</code></a>,
you are sure to catch heaps of issues you might accidentally overlook. Note,
however, that these tools are not replacements for real accessibility testing.</p>
<p>Here is an example in a real OSS project of mine that uses this <code>axe-core</code>
technique with <code>@testing-library/react</code>:
<a href="https://github.com/rpearce/react-medium-image-zoom/blob/6721f87370d968361d9d0d14cd30d752832877d1/__tests__/Uncontrolled.js#L27" class="uri">https://github.com/rpearce/react-medium-image-zoom/blob/6721f87370d968361d9d0d14cd30d752832877d1/__tests__/Uncontrolled.js#L27</a>.</p>
<hr />
<p>If you are using <code>jest</code> and want a custom matcher, there is a project,
<a href="https://github.com/nickcolley/jest-axe"><code>jest-axe</code></a>, that allows you to do so:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// from https://github.com/nickcolley/jest-axe#usage
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">axe</span><span class="pl-p">,</span> <span class="pl-nx">toHaveNoViolations</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;jest-axe&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">expect</span><span class="pl-p">.</span><span class="pl-nx">extend</span><span class="pl-p">(</span><span class="pl-nx">toHaveNoViolations</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">it</span><span class="pl-p">(</span><span class="pl-s1">&#39;should demonstrate this matcher`s usage&#39;</span><span class="pl-p">,</span> <span class="pl-kr">async</span> <span class="pl-p">()</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">render</span> <span class="pl-o">=</span> <span class="pl-p">()</span> <span class="pl-p">=&gt;</span> <span class="pl-s1">&#39;&lt;img src=&#34;#&#34;/&gt;&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// pass anything that outputs html to axe
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-kr">const</span> <span class="pl-nx">html</span> <span class="pl-o">=</span> <span class="pl-nx">render</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">expect</span><span class="pl-p">(</span><span class="pl-kr">await</span> <span class="pl-nx">axe</span><span class="pl-p">(</span><span class="pl-nx">html</span><span class="pl-p">)).</span><span class="pl-nx">toHaveNoViolations</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span></span></span></code></pre>
<hr />
<p>Thank you for reading!
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>JavaScript: Writing a Functional Programming-Style map Function</title>
    <link href="https://robertwpearce.com/javascript-writing-a-functional-programming-style-map-function.html" />
    <id>https://robertwpearce.com/javascript-writing-a-functional-programming-style-map-function.html</id>
    <published>2020-02-20T00:00:00Z</published>
    <updated>2020-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>Many thanks to <a href="https://twitter.com/goodforenergy">Helen Durrant</a> for reviewing
this post and offering stellar suggestions.</em></p>
<p>In this post, we will write a functional programming-style implementation of
JavaScript’s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><code>map</code></a>
function that not only works with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a>
but any data structure that implements a <code>map</code> method. Such data structures are
known as <a href="https://github.com/hemanth/functional-programming-jargon#functor"><code>Functors</code></a>.
Some examples of <code>Functors</code> are the algebraic data types<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>
<a href="https://crocks.dev/docs/crocks/Maybe.html"><code>Maybe</code></a> and
<a href="https://crocks.dev/docs/crocks/Async.html"><code>Async</code></a> (prior knowledge of them is
not required, and out of the two, we’ll only use <code>Maybe</code>).</p>
<p>By the end of this post, you will:</p>
<ul>
<li>know how to implement a generic <code>map</code> function that includes functions for
<code>map</code>ping <code>Array</code>s, <code>Object</code>s, and <code>Functor</code>s</li>
<li>understand how to use <code>map</code> in a variety of scenarios</li>
<li>know how to write a simple <code>compose</code> function and use composition</li>
<li>know how to reliably test values for their types</li>
<li>have received a small introduction to algebraic data types via the
<a href="https://crocks.dev"><code>crocks</code></a> library</li>
</ul>
<p>This is a big post, so buckle up! If you want to see the final product, check
out this CodeSandbox: <a href="https://codesandbox.io/s/bitter-grass-tknwb" class="uri">https://codesandbox.io/s/bitter-grass-tknwb</a>.</p>
<hr />
<p><em>Note: if you’re not familiar with <code>Array.prototype.map</code> already, check out my
video on <a href="https://www.youtube.com/watch?v=tjjg3_jyD7M">Using JavaScript’s Array.prototype.map
Method</a> or my post on <a href="https://robertwpearce.com/javascript-understand-array-prototype-map-by-reimplementing-it.html">JavaScript:
Understand Array.prototype.map by Reimplementing It</a>.</em></p>
<p><em>We will use the implementation of the <code>map</code> function in
<a href="https://crocks.dev">crocks</a> as our template, so if you want to skip this
article entirely, you can go and view <a href="https://github.com/evilsoft/crocks/blob/e4517493079538960d53715ef25d72c264cfecf0/src/pointfree/map.js#L15-L38">its
source</a>.</em></p>
<h2 id="overview">Overview</h2>
<ol>
<li><a href="#the-goal-map-all-the-things">The Goal: <code>map</code> All the Things</a></li>
<li><a href="#defining-our-map-function">Defining Our <code>map</code> Function</a></li>
<li><a href="#map-an-array"><code>map</code> an <code>Array</code></a></li>
<li><a href="#map-an-object"><code>map</code> an <code>Object</code></a></li>
<li><a href="#map-a-function"><code>map</code> a <code>Function</code></a></li>
<li><a href="#map-a-functor"><code>map</code> a <code>Functor</code></a></li>
<li><a href="#throwing-out-bad-data"><code>throw</code>ing Out Bad Data</a></li>
</ol>
<h2 id="the-goal-map-all-the-things">The Goal: <code>map</code> All the Things</h2>
<p>Today we are going to write a <code>map</code> function that does the following:</p>
<ul>
<li>accepts a transformation function that takes in some argument of type <code>a</code> and
transforms it into a value of type <code>b</code>; i.e., <code>(a -&gt; b)</code></li>
<li>accepts and handles any of the following data types:
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"><code>Function</code></a></li>
<li><a href="https://github.com/hemanth/functional-programming-jargon#functor"><code>Functors</code></a>
(e.g., <a href="https://crocks.dev/docs/crocks/Maybe.html"><code>Maybe</code></a>)</li>
</ul></li>
</ul>
<p>Sounds easy, right? We’ll see!</p>
<h2 id="defining-our-map-function">Defining Our <code>map</code> Function</h2>
<p>There are some things we already know about our <code>map</code> function:</p>
<ul>
<li>it’s called <code>map</code> (yay! nailed it!)</li>
<li>it takes a function (<code>fn</code>) and then some datum (<code>m</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>)<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></li>
<li>it returns the datum as transformed by said function</li>
</ul>
<p>Let’s sketch it out:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">map</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ???
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">}</span></span></span></code></pre>
<p>Okay, it’s a start. This could conceivably be used like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">id</span><span class="pl-p">,</span> <span class="pl-p">[{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-mi">1</span> <span class="pl-p">},</span> <span class="pl-p">{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-mi">2</span> <span class="pl-p">}])</span>     <span class="pl-c1">// [1, 2]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">id</span><span class="pl-p">,</span> <span class="pl-p">[{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-s1">&#39;a&#39;</span> <span class="pl-p">},</span> <span class="pl-p">{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-s1">&#39;b&#39;</span> <span class="pl-p">}])</span> <span class="pl-c1">// [&#39;a&#39;, &#39;b&#39;]
</span></span></span></code></pre>
<p>Note the repetition of the <code>x =&gt; x.id</code>. Let’s try pulling it out into a
variable:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">propId</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">id</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">propId</span><span class="pl-p">,</span> <span class="pl-p">[{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-mi">1</span> <span class="pl-p">},</span> <span class="pl-p">{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-mi">2</span> <span class="pl-p">}])</span>     <span class="pl-c1">// [1, 2]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">propId</span><span class="pl-p">,</span> <span class="pl-p">[{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-s1">&#39;a&#39;</span> <span class="pl-p">},</span> <span class="pl-p">{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-s1">&#39;b&#39;</span> <span class="pl-p">}])</span> <span class="pl-c1">// [&#39;a&#39;, &#39;b&#39;]
</span></span></span></code></pre>
<p>Alas, that’s not much better – now we’re just repeating the variable!</p>
<p>Instead, what if we could store our combination of function and <code>map</code> in a
variable and then use that to call with our different data? By <a href="https://github.com/hemanth/functional-programming-jargon#partial-application"><em>partially
applying</em></a>
the function to <code>map</code>, we can!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">mapId</span> <span class="pl-o">=</span> <span class="pl-nx">map</span><span class="pl-p">.</span><span class="pl-nx">bind</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">,</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">id</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">mapId</span><span class="pl-p">([{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-mi">1</span> <span class="pl-p">},</span> <span class="pl-p">{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-mi">2</span> <span class="pl-p">}])</span>     <span class="pl-c1">// [1, 2]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">mapId</span><span class="pl-p">([{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-s1">&#39;a&#39;</span> <span class="pl-p">},</span> <span class="pl-p">{</span> <span class="pl-nx">id</span><span class="pl-o">:</span> <span class="pl-s1">&#39;b&#39;</span> <span class="pl-p">}])</span> <span class="pl-c1">// [&#39;a&#39;, &#39;b&#39;]
</span></span></span></code></pre>
<p>Nice! Now, let’s go back to our sketch. Let’s turn our <em>binary</em> function (which
takes <em>two</em> parameters) to instead be a series of <em>unary</em> functions
(which take <em>one</em> parameter<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>).</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">map</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ???
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">}</span></span></span></code></pre>
<p>Wow, that was easy. By default, languages like
<a href="http://learnyouahaskell.com/higher-order-functions">Haskell</a> and
<a href="https://guide.elm-lang.org">Elm</a> automatically
<a href="https://robertwpearce.com/ramda-chops-function-currying.html">curry</a> all of
their function parameters. There are <a href="https://robertwpearce.com/ramda-chops-function-currying.html">ways to automate that in
JavaScript</a>, but
for today, we will <em>manually</em> curry functions by using arrow functions to
simulate it: <code>const sum = a =&gt; b =&gt; a + b</code>, for example.</p>
<p>Lastly, on the function definition side, it would be helpful for readers of our
code to understand more about the intended types. In lieu of JavaScript
not having a static type checker and me not knowing
<a href="https://www.typescriptlang.org/">TypeScript</a> yet, we’ll do this using a
Haskell-style pseudo-type signature:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">map</span> <span class="pl-ow">::</span> <span class="pl-kt">Functor</span> <span class="pl-n">f</span> <span class="pl-ow">=&gt;</span> <span class="pl-p">(</span><span class="pl-n">a</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">b</span><span class="pl-p">)</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">f</span> <span class="pl-n">a</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">f</span> <span class="pl-n">b</span></span></span></code></pre>
<p>And we can place that as a comment above our function:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">map</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ???
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">}</span></span></span></code></pre>
<p>Woah, woah, woah! What’s all this? Let’s break it down.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">map</span> <span class="pl-ow">::</span> <span class="pl-kt">Functor</span> <span class="pl-n">f</span> <span class="pl-ow">=&gt;</span> <span class="pl-p">(</span><span class="pl-n">a</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">b</span><span class="pl-p">)</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">f</span> <span class="pl-n">a</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">f</span> <span class="pl-n">b</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">--  |     |            |     |   |      |</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">--  1     2            3     4   5      6</span></span></span></code></pre>
<ol>
<li>Can be read, “has the type of”</li>
<li>Anything after <code>::</code> and before <code>=&gt;</code> in a signature is a <a href="http://www.learnyouahaskell.com/types-and-typeclasses">class
constraint</a>. This
says we’re going to use something in the type signature that obeys the
Functor Laws<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>, <em>identity</em> and <a href="https://robertwpearce.com/ramda-chops-function-composition.html"><em>composition</em></a>.
The lowercase <code>f</code> represents what the <code>Functor</code> will be in the signature.</li>
<li>Our <code>map</code>ping function; e.g., <code>x =&gt; x.id</code>, like we did above.</li>
<li><code>-&gt;</code> Arrows are used in type signatures to say “then return…”. In our
<code>map</code> signature, we say, “We accept a function from <code>a</code> to <code>b</code> then return a
function that accepts <code>f</code> of <code>a</code> and then return <code>f</code> of <code>b</code>”. If we were
summing three numbers, <code>sum3 :: Number -&gt; Number -&gt; Number -&gt; Number</code>, this
would read, “<code>sum3</code> has the type of an expression that accepts a <code>Number</code>
that returns a function that accepts a <code>Number</code> then returns a function that
accepts a <code>Number</code> and then returns a <code>Number</code>.”</li>
<li><code>f a</code> says that a <code>Functor</code>, <code>f</code>, wraps some other type, <code>a</code>. A concrete
example of this is <code>[Number]</code>, which is a list (or <code>Array</code>) of <code>Number</code>s.</li>
<li><code>f b</code> says that a <code>Functor</code>, <code>f</code>, wraps some other type, <code>b</code>. Why isn’t it
<code>a</code>? This signifies that when we take in the <code>Functor</code> of any type <code>a</code>, it’s
totally cool if you want to change the return type inside the <code>Functor</code>. For
example, when we take <code>[{ id: 'a' }, { id: 'b' }]</code> and use <code>map</code> to turn that
into <code>['a', 'b']</code>, we’re taking <code>[Object]</code> (a list of <code>Object</code>s) and turning
that into <code>[String]</code> (a list of <code>String</code>s).</li>
</ol>
<p>All together now! “<code>map</code> has the type of an expression where <code>f</code> is a <code>Functor</code>,
and it accepts a function from <code>a</code> to <code>b</code>, then returns a function that accepts
<code>f</code> of <code>a</code>, and then returns <code>f</code> of <code>b</code>.”</p>
<h2 id="map-an-array"><code>map</code> an <code>Array</code></h2>
<p>Let’s <code>map</code> an <code>Array</code>!</p>
<p>Remember our <code>Functor</code> class constraint?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">map</span> <span class="pl-ow">::</span> <span class="pl-kt">Functor</span> <span class="pl-n">f</span> <span class="pl-ow">=&gt;</span> <span class="pl-p">(</span><span class="pl-n">a</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">b</span><span class="pl-p">)</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">f</span> <span class="pl-n">a</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">f</span> <span class="pl-n">b</span></span></span></code></pre>
<p>Guess what? <code>Array</code> is a <code>Functor</code>s! How? It adheres to the laws of <em>identity</em>
and <em>composition</em>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// identity
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">[</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">,</span><span class="pl-mi">3</span><span class="pl-p">].</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">)</span> <span class="pl-c1">// [1,2,3]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// composition
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">add10</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-o">+</span> <span class="pl-mi">10</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">mult2</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-o">*</span> <span class="pl-mi">2</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">[</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">,</span><span class="pl-mi">3</span><span class="pl-p">].</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">add10</span><span class="pl-p">).</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">mult2</span><span class="pl-p">)</span>     <span class="pl-c1">// [ 22, 24, 26 ]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// is equivalent to...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">[</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">,</span><span class="pl-mi">3</span><span class="pl-p">].</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">mult2</span><span class="pl-p">(</span><span class="pl-nx">add10</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)))</span> <span class="pl-c1">// [ 22, 24, 26 ]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// another example of the composition law
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">compose</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">f</span><span class="pl-p">,</span> <span class="pl-nx">g</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">f</span><span class="pl-p">(</span><span class="pl-nx">g</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">mult2</span><span class="pl-p">(</span><span class="pl-nx">add10</span><span class="pl-p">(</span><span class="pl-mi">2</span><span class="pl-p">))</span> <span class="pl-o">===</span> <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">mult2</span><span class="pl-p">,</span> <span class="pl-nx">add10</span><span class="pl-p">)(</span><span class="pl-mi">2</span><span class="pl-p">)</span> <span class="pl-c1">// true
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// and applied back to our prior example
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">[</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">,</span><span class="pl-mi">3</span><span class="pl-p">].</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">add10</span><span class="pl-p">).</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">mult2</span><span class="pl-p">)</span>      <span class="pl-c1">// [ 22, 24, 26 ]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">[</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">,</span><span class="pl-mi">3</span><span class="pl-p">].</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">mult2</span><span class="pl-p">(</span><span class="pl-nx">add10</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)))</span>  <span class="pl-c1">// [ 22, 24, 26 ]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">[</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">,</span><span class="pl-mi">3</span><span class="pl-p">].</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">mult2</span><span class="pl-p">,</span> <span class="pl-nx">add10</span><span class="pl-p">))</span> <span class="pl-c1">// [ 22, 24, 26 ]
</span></span></span></code></pre>
<p>Through <code>map</code>, <code>Array</code> is a <code>Functor</code>. A way to quickly determine if something
is a <code>Functor</code> is to ask, “Does it implement <code>map</code> / is it <code>map</code>pable?”</p>
<p>Since we know that <code>Array</code> is <code>map</code>pable, we can use our <code>map</code> function to check
if the <code>f a</code> parameter is an <code>Array</code> and then use the build in
<code>Array.prototype.map</code> function to get from <code>a</code> to <code>b</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">map</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isArray</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapArray</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// isArray :: a -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">isArray</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">isArray</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapArray :: ((a -&gt; b), Array a) -&gt; Array b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapArray</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">fn</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">))</span></span></span></code></pre>
<p>Here, we use <code>Array.isArray()</code><a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a> to see if the argument, <code>m</code>, is an <code>Array</code>,
then we call a function, <code>mapArray</code>, that handles the <code>map</code>ping of the <code>Array</code>.</p>
<p><em>You might be thinking: why <code>m.map(x =&gt; fn(x))</code> and not <code>m.map(fn)</code>? As you might
remember from <a href="https://robertwpearce.com/javascript-understand-array-prototype-map-by-reimplementing-it.html">my article on re-implementing
<code>Array.prototype.map</code></a>,
there are a few other arguments that the native implementation of <code>map</code> provide,
as well as some potential changes to the <code>this</code> keyword in your callback
function scope. Instead of allowing those to pass through, we simply take the
first argument, the currently iterated value, and send that to the callback
function<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>.</em></p>
<p>Now that we’ve seen the easy way to do <code>map</code> with <code>Array</code>, let’s see what this
would look like if we felt like implementing <code>mapArray</code> ourselves:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapArray :: ((a -&gt; b), Array a) -&gt; Array b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapArray</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">newArray</span> <span class="pl-o">=</span> <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">for</span> <span class="pl-p">(</span><span class="pl-kd">let</span> <span class="pl-nx">i</span> <span class="pl-o">=</span> <span class="pl-mi">0</span><span class="pl-p">;</span> <span class="pl-nx">i</span> <span class="pl-o">&lt;</span> <span class="pl-nx">m</span><span class="pl-p">.</span><span class="pl-nx">length</span><span class="pl-p">;</span> <span class="pl-nx">i</span><span class="pl-o">++</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">newArray</span><span class="pl-p">[</span><span class="pl-nx">i</span><span class="pl-p">]</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">[</span><span class="pl-nx">i</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">newArray</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>Not too shabby! All we do is create a new <code>Array</code> and set the results of
calling the callback function with each item to its index in the new <code>Array</code>
and then return that <code>Array</code>.</p>
<p>Do you think our <code>map</code> function can handle an <code>Array</code> of <code>Array</code>s?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-o">*</span> <span class="pl-mi">2</span><span class="pl-p">)([</span> <span class="pl-p">[</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">],</span> <span class="pl-p">[</span><span class="pl-mi">3</span><span class="pl-p">,</span><span class="pl-mi">4</span><span class="pl-p">],</span> <span class="pl-p">[</span><span class="pl-mi">5</span><span class="pl-p">,</span><span class="pl-mi">6</span><span class="pl-p">]</span> <span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Array(3) [ NaN, NaN, NaN ]
</span></span></span></code></pre>
<p>While we can successfully iterate over the 3 items in the top-level <code>Array</code>, our
callback function can’t perform operations like <code>[1,2] * 2</code>! We need to do
another <code>map</code> on the nested <code>Array</code>s:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-o">*</span> <span class="pl-mi">2</span><span class="pl-p">))([</span> <span class="pl-p">[</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">],</span> <span class="pl-p">[</span><span class="pl-mi">3</span><span class="pl-p">,</span><span class="pl-mi">4</span><span class="pl-p">],</span> <span class="pl-p">[</span><span class="pl-mi">5</span><span class="pl-p">,</span><span class="pl-mi">6</span><span class="pl-p">]</span> <span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// [ [2,4], [6,8], [10,12] ]
</span></span></span></code></pre>
<p>Well done! What else can you <code>map</code>? We’re now going to leave charted waters and
venture into the unknown.</p>
<h2 id="map-an-object"><code>map</code> an <code>Object</code></h2>
<p>Let’s say we have an <code>i18n</code> (short for “internationalization”) object that we’ve
been given that has a terribly annoying issue: every translation is prefixed and
suffixed with an underscore (<code>_</code>)!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">i18n</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;en-US&#39;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">dayMode</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Day mode_&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">greeting</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Hello!_&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">nightMode</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Night Mode_&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;es-ES&#39;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">dayMode</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Modo día_&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">greeting</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_¡Hola!_&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">nightMode</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Modo nocturno_&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>We could manually delete each one, or we could find and replace with our text
editor, or we could write a <code>for</code> loop to do this, but because we’re super
awesome functional programmers, we’ll try to <code>map</code> over the <code>Object</code> and write a
function that removes the prefixed &amp; suffixed underscores (…then we copy and
paste that? work with me here!).</p>
<p>Before we can do this, we need to see what happens when we call <code>.map()</code> on an
<code>Object</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">i18n</span><span class="pl-p">[</span><span class="pl-s1">&#39;en-US&#39;</span><span class="pl-p">].</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">slice</span><span class="pl-p">(</span><span class="pl-mi">1</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// TypeError: i18n[&#39;en-US&#39;].map is not a function
</span></span></span></code></pre>
<p>Oh no! If we can’t even fix the <code>en-US</code> <code>Object</code>, how are we supposed to fix
<em>all</em> of them? Let’s update our <code>map</code> function to handle <code>Object</code>s.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">map</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isArray</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapArray</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isObject</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapObject</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// isObject :: a -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">isObject</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-o">!!</span><span class="pl-nx">x</span> <span class="pl-o">&amp;&amp;</span> <span class="pl-nb">Object</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">toString</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)</span> <span class="pl-o">===</span> <span class="pl-s1">&#39;[object Object]&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapObject :: ((a -&gt; b), { k: a }) -&gt; { k: b }
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapObject</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">obj</span> <span class="pl-o">=</span> <span class="pl-p">{}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">for</span> <span class="pl-p">(</span><span class="pl-kr">const</span> <span class="pl-p">[</span><span class="pl-nx">k</span><span class="pl-p">,</span> <span class="pl-nx">v</span><span class="pl-p">]</span> <span class="pl-k">of</span> <span class="pl-nb">Object</span><span class="pl-p">.</span><span class="pl-nx">entries</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">obj</span><span class="pl-p">[</span><span class="pl-nx">k</span><span class="pl-p">]</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span><span class="pl-p">(</span><span class="pl-nx">v</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">obj</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>Here, we test if something is an object by using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString"><code>Object.prototype.toString</code></a>
and make sure to <code>.call(x)</code> instead of just <code>.toString(x)</code>, for this reason:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Object</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">toString</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// &#34;[object Object]&#34;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Object</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">toString</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// &#34;[object Null]&#34;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Object</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">toString</span><span class="pl-p">([])</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// &#34;[object Object]&#34;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Object</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">toString</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">([])</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// &#34;[object Array]&#34;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Object</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">toString</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">({})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// &#34;[object Object]&#34;
</span></span></span></code></pre>
<p>We then use our new <code>mapObject</code> function, whose signature is</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">mapObject</span> <span class="pl-ow">::</span> <span class="pl-p">((</span><span class="pl-n">a</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">b</span><span class="pl-p">),</span> <span class="pl-p">{</span> <span class="pl-n">k</span><span class="pl-kt">:</span> <span class="pl-n">a</span> <span class="pl-p">})</span> <span class="pl-ow">-&gt;</span> <span class="pl-p">{</span> <span class="pl-n">k</span><span class="pl-kt">:</span> <span class="pl-n">b</span> <span class="pl-p">}</span></span></span></code></pre>
<p><code>mapObject</code> takes a function from <code>a</code> to <code>b</code> and an <code>Object</code> with a key(s) and
some value(s), <code>a</code>, and returns an <code>Object</code> with a key(s) and some value(s) <code>b</code>.
In short, it maps the <em>values</em> of an <code>Object</code>. Our <code>mapObject</code> function is
nothing more than a <code>for</code> loop over each value returned from
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"><code>Object.entries()</code></a>!
It calls the callback function with each value and returns a new object with the
same key and a new, updated value.</p>
<p>Let’s try it out:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">i18n</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;en-US&#39;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">dayMode</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Day mode_&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">greeting</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Hello!_&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">nightMode</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Night Mode_&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;es-ES&#39;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">dayMode</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Modo día_&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">greeting</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_¡Hola!_&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">nightMode</span><span class="pl-o">:</span> <span class="pl-s1">&#39;_Modo nocturno_&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">slice</span><span class="pl-p">(</span><span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-o">-</span><span class="pl-mi">1</span><span class="pl-p">))(</span><span class="pl-nx">i18n</span><span class="pl-p">[</span><span class="pl-s1">&#39;en-US&#39;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// {
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   dayMode: &#39;Day mode&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   greeting: &#39;Hello!&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   nightMode: &#39;Night Mode&#39;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// }
</span></span></span></code></pre>
<p>Okay – what about our entire <code>i18n</code> object?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">slice</span><span class="pl-p">(</span><span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-o">-</span><span class="pl-mi">1</span><span class="pl-p">)))(</span><span class="pl-nx">i18n</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// {
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//  &#39;en-US&#39;: {
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    dayMode: &#39;Day mode&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    greeting: &#39;Hello!&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    nightMode: &#39;Night Mode&#39;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//  },
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//  &#39;es-ES&#39;: {
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    dayMode: &#39;Modo día&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    greeting: &#39;¡Hola!&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    nightMode: &#39;Modo nocturno&#39;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//  }
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// }
</span></span></span></code></pre>
<p>Since we’re dealing with nested objects, we need to use <code>map</code> on an <code>Object</code>
inside an <code>Object</code>. We pass a nested <code>map</code>ping function, and our little
underscore problem is gone!</p>
<h2 id="map-a-function"><code>map</code> a <code>Function</code></h2>
<p>Remember our functions <code>mult2</code> and <code>add10</code> from before?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">add10</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-o">+</span> <span class="pl-mi">10</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">mult2</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-o">*</span> <span class="pl-mi">2</span></span></span></code></pre>
<p>What would happen if we used those as the arguments to our <code>map</code> function and
wanted them to be automatically composed together so that we can then provide a
value later?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">add10</span><span class="pl-p">)(</span><span class="pl-nx">mult2</span><span class="pl-p">)</span>     <span class="pl-c1">// undefined
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">add10</span><span class="pl-p">)(</span><span class="pl-nx">mult2</span><span class="pl-p">)(</span><span class="pl-mi">12</span><span class="pl-p">)</span> <span class="pl-c1">// TypeError: map(...)(...) is not a function
</span></span></span></code></pre>
<p>Time for our <code>map</code> function to handle a <code>Function</code> as the second argument and
<code>compose</code> the two functions together:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">map</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isArray</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapArray</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isObject</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapObj</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isFunction</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// isFunction :: a -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">isFunction</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-k">typeof</span> <span class="pl-nx">x</span> <span class="pl-o">===</span> <span class="pl-s1">&#39;function&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// compose :: ((b -&gt; c), (a -&gt; b)) -&gt; a -&gt; c
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">compose</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">f</span><span class="pl-p">,</span> <span class="pl-nx">g</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">f</span><span class="pl-p">(</span><span class="pl-nx">g</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">))</span></span></span></code></pre>
<p>And when we run our previously failed code again,</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">add10</span><span class="pl-p">)(</span><span class="pl-nx">mult2</span><span class="pl-p">)</span>     <span class="pl-c1">// function compose(x)
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">add10</span><span class="pl-p">)(</span><span class="pl-nx">mult2</span><span class="pl-p">)(</span><span class="pl-mi">12</span><span class="pl-p">)</span> <span class="pl-c1">// 44
</span></span></span></code></pre>
<p>we can see that calling <code>map</code> with two functions returns a composition of those
two functions, and calling that result with a primitive value (<code>12</code>) gives us
back our result, <code>44</code>.</p>
<h2 id="map-a-functor"><code>map</code> a <code>Functor</code></h2>
<p>When we learned about <code>map</code>ping <code>Array</code>s before, we learned that <code>Array</code>s are
<code>Functor</code>s because they adhere to the laws of <em>identity</em> and <em>composition</em>;
i.e., they are <code>map</code>pable.</p>
<p>There are all sorts of other data structures that implement a <code>map</code> method, just
like <code>Array.prototype</code> does, and we want to be able to handle those, too!</p>
<p>We currently have all the tools required to implement <code>map</code> for <code>Functor</code>s
without even knowing how they might work! All we need to know is, “Does it
implement <code>map</code> as a <code>Function</code>?” Let’s see what we can come up with!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">map</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isFunction</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isArray</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapArray</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isFunctor</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapFunctor</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isObject</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapObj</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// isFunction :: a -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">isFunction</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-k">typeof</span> <span class="pl-nx">x</span> <span class="pl-o">===</span> <span class="pl-s1">&#39;function&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// isFunctor :: a -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">isFunctor</span>  <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-o">!!</span><span class="pl-nx">x</span> <span class="pl-o">&amp;&amp;</span> <span class="pl-nx">isFunction</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">[</span><span class="pl-s1">&#39;map&#39;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapFunctor :: Functor f =&gt; ((a -&gt; b), f a) -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapFunctor</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">)</span></span></span></code></pre>
<p>That is surprisingly simple, isn’t it? We use our <code>isFunction</code> check from before
to test if <code>m</code> has a <code>map</code> property that is a <code>Function</code>, then we call <code>map</code> on
<code>m</code> and pass it the callback <code>Function</code> in <code>mapFunctor</code>.</p>
<p>You might be thinking that <code>mapArray</code> and <code>mapFunctor</code> could use the same handler
because <code>Array</code>s are <code>Functors</code>, and you are correct; however, because of the
extra implementation bits that come back from <code>Array.prototype.map</code>, we’ll keep
them separate and only call the callback to <code>Array.prototype.map</code> with the
currently iterated item. Here’s the difference:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapArray :: ((a -&gt; b), Array a) -&gt; Array b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapArray</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapFunctor :: Functor f =&gt; ((a -&gt; b), f a) -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapFunctor</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">)</span></span></span></code></pre>
<p>If you don’t care about this, it’s totally acceptable to not include the <code>Array</code>
bits at all and use the <code>Functor</code> <code>map</code><a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a> to handle the <code>map</code>ping of <code>Array</code>s,
since they’re <code>Functor</code>s.</p>
<p>To test our <code>Functor</code> <code>map</code>ping, we’ll use <a href="https://crocks.dev">crocks</a> to
provide us access to an algebraic data type called
<a href="https://crocks.dev/docs/crocks/Maybe.html"><code>Maybe</code></a>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">compose</span><span class="pl-p">,</span> <span class="pl-nx">option</span><span class="pl-p">,</span> <span class="pl-nx">prop</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;crocks&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">company</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">name</span><span class="pl-o">:</span> <span class="pl-s1">&#39;Pearce Software, LLC&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">locations</span><span class="pl-o">:</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;Charleston, SC, USA&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;Auckland, NZ&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s1">&#39;London, England, UK&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;foo&#39;</span><span class="pl-p">,</span> <span class="pl-nx">company</span><span class="pl-p">)</span>       <span class="pl-c1">// Nothing
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;locations&#39;</span><span class="pl-p">,</span> <span class="pl-nx">company</span><span class="pl-p">)</span> <span class="pl-c1">// Just [String]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">option</span><span class="pl-p">([],</span> <span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;foo&#39;</span><span class="pl-p">,</span> <span class="pl-nx">company</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// []
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">option</span><span class="pl-p">([],</span> <span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;locations&#39;</span><span class="pl-p">,</span> <span class="pl-nx">company</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;Charleston, SC, USA&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;Auckland, NZ&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;London, England, UK&#39;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">getLocations</span> <span class="pl-o">=</span> <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">option</span><span class="pl-p">([]),</span> <span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;locations&#39;</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getLocations</span><span class="pl-p">(</span><span class="pl-nx">company</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;Charleston, SC, USA&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;Auckland, NZ&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;London, England, UK&#39;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ]
</span></span></span></code></pre>
<p>Pump the breaks! What’s all this <code>Just</code> and <code>Nothing</code> stuff? We’re not going to
focus on <code>Maybe</code>s today<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>, but the short version is that the <code>locations</code> property
<em>may</em> or <em>may not</em> be present in the object, so we encapsulate that uncertainty
inside of a <code>Maybe</code> algebraic data type via the <code>prop</code> function, and we provide
a default value via the <code>option</code> function that the <code>Maybe</code> can fall back to in
the event of not being able to find <code>locations</code>.</p>
<p>Why does this matter? We want to <code>map</code> a <code>Maybe</code>, and the <code>prop</code> function will
give us access to one. Let’s see what it looks like:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">compose</span><span class="pl-p">,</span> <span class="pl-nx">option</span><span class="pl-p">,</span> <span class="pl-nx">prop</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;crocks&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">upcase</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">toUpperCase</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">getLocations</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">option</span><span class="pl-p">([]),</span> <span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">upcase</span><span class="pl-p">)),</span> <span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;locations&#39;</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getLocations</span><span class="pl-p">({})</span> <span class="pl-c1">// []
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getLocations</span><span class="pl-p">(</span><span class="pl-nx">company</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;CHARLESTON, SC, USA&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;AUCKLAND, NZ&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;LONDON, ENGLAND, UK&#39;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ]
</span></span></span></code></pre>
<p>Okay, cool! But why are we <code>map</code>ping twice?</p>
<p>When we work with algebraic data types like <code>Maybe</code>, instead of writing <code>if (dataIsValid) doSomething</code>, the <code>map</code> method on a <code>Maybe</code> gives us access to
the value inside the <code>Maybe</code> (our <code>locations</code>), but it does so <em>only if the data
is available</em>.</p>
<p>Once we have access to the <code>locations</code>, we then use <code>map</code> again to uppercase
each location.</p>
<h2 id="throwing-out-bad-data"><code>throw</code>ing Out Bad Data</h2>
<p>What happens if the arguments passed to <code>map</code> aren’t a <code>Function</code> and a
<code>Functor</code>?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">)([</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">,</span><span class="pl-mi">3</span><span class="pl-p">])</span>    <span class="pl-c1">// TypeError: fn is not a function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-o">*</span> <span class="pl-mi">2</span><span class="pl-p">)(</span><span class="pl-kc">null</span><span class="pl-p">)</span> <span class="pl-c1">// undefined
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">)(</span><span class="pl-kc">null</span><span class="pl-p">)</span>       <span class="pl-c1">// undefined
</span></span></span></code></pre>
<p>I think we can provide some more helpful messaging to guide users of our <code>map</code>
tool on how to use it correctly.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">map</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-o">!</span><span class="pl-nx">isFunction</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-nx">TypeError</span><span class="pl-p">(</span><span class="pl-sb">`map: Please provide a Function for the first argument`</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// ...our other handlers...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-nx">TypeError</span><span class="pl-p">(</span><span class="pl-sb">`map: Please provide a Functor or Object for the second argument`</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">)([</span><span class="pl-mi">1</span><span class="pl-p">,</span><span class="pl-mi">2</span><span class="pl-p">,</span><span class="pl-mi">3</span><span class="pl-p">])</span>    <span class="pl-c1">// TypeError: map: Please provide a Function for the first argument
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span> <span class="pl-o">*</span> <span class="pl-mi">2</span><span class="pl-p">)(</span><span class="pl-kc">null</span><span class="pl-p">)</span> <span class="pl-c1">// TypeError: map: Please provide a Functor or Object for the second argument
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">)(</span><span class="pl-kc">null</span><span class="pl-p">)</span>       <span class="pl-c1">// TypeError: map: Please provide a Function for the first argument
</span></span></span></code></pre>
<p>Now, when we provide bad arguments, we’re told exactly what we need to do.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Congratulations and thank you for making it to the end! If you want to play
around with what we created, check out this CodeSandbox:
<a href="https://codesandbox.io/s/bitter-grass-tknwb" class="uri">https://codesandbox.io/s/bitter-grass-tknwb</a>.</p>
<p>Here is our code from today in its entirety:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">compose</span><span class="pl-p">,</span> <span class="pl-nx">option</span><span class="pl-p">,</span> <span class="pl-nx">prop</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;crocks&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">map</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-o">!</span><span class="pl-nx">isFunction</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-nx">TypeError</span><span class="pl-p">(</span><span class="pl-sb">`map: Please provide a Function for the first argument`</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isFunction</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isArray</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapArray</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isFunctor</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapFunctor</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">isObject</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">mapObj</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-nx">TypeError</span><span class="pl-p">(</span><span class="pl-sb">`map: Please provide a Functor or Object for the second argument`</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// we&#39;re opting for crocks&#39; compose, instead
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// compose :: ((b -&gt; c), (a -&gt; b)) -&gt; a -&gt; c
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// const compose = (f, g) =&gt; x =&gt; f(g(x))
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// isArray :: a -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">isArray</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">isArray</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// isFunction :: a -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">isFunction</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-k">typeof</span> <span class="pl-nx">x</span> <span class="pl-o">===</span> <span class="pl-s1">&#39;function&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// isFunctor :: a -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">isFunctor</span>  <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-o">!!</span><span class="pl-nx">x</span> <span class="pl-o">&amp;&amp;</span> <span class="pl-nx">isFunction</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">[</span><span class="pl-s1">&#39;map&#39;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// isObject :: a -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">isObject</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-o">!!</span><span class="pl-nx">x</span> <span class="pl-o">&amp;&amp;</span> <span class="pl-nb">Object</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">toString</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)</span> <span class="pl-o">===</span> <span class="pl-s1">&#39;[object Object]&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapArray :: ((a -&gt; b), Array a) -&gt; Array b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapArray</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">newArray</span> <span class="pl-o">=</span> <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">for</span> <span class="pl-p">(</span><span class="pl-kd">let</span> <span class="pl-nx">i</span> <span class="pl-o">=</span> <span class="pl-mi">0</span><span class="pl-p">;</span> <span class="pl-nx">i</span> <span class="pl-o">&lt;</span> <span class="pl-nx">m</span><span class="pl-p">.</span><span class="pl-nx">length</span><span class="pl-p">;</span> <span class="pl-nx">i</span><span class="pl-o">++</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">newArray</span><span class="pl-p">.</span><span class="pl-nx">push</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">[</span><span class="pl-nx">i</span><span class="pl-p">]))</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">newArray</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// realistically, you should use this mapArray:
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// const mapArray = (fn, m) =&gt; m.map(x =&gt; fn(x))
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapObj :: (a -&gt; b) -&gt; { k: a } -&gt; { k: b }
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapObj</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">obj</span> <span class="pl-o">=</span> <span class="pl-p">{}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">for</span> <span class="pl-p">(</span><span class="pl-kr">const</span> <span class="pl-p">[</span><span class="pl-nx">k</span><span class="pl-p">,</span> <span class="pl-nx">v</span><span class="pl-p">]</span> <span class="pl-k">of</span> <span class="pl-nb">Object</span><span class="pl-p">.</span><span class="pl-nx">entries</span><span class="pl-p">(</span><span class="pl-nx">m</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">obj</span><span class="pl-p">[</span><span class="pl-nx">k</span><span class="pl-p">]</span> <span class="pl-o">=</span> <span class="pl-nx">fn</span><span class="pl-p">(</span><span class="pl-nx">v</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">obj</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapFunctor :: Functor f =&gt; ((a -&gt; b), f a) -&gt; f b
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapFunctor</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">m</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">m</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">)</span></span></span></code></pre>
<hr />
<p>Thank you for reading!
<br />
Robert</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p><a href="https://github.com/hemanth/functional-programming-jargon#algebraic-data-type" class="uri">https://github.com/hemanth/functional-programming-jargon#algebraic-data-type</a>  <a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p><code>m</code> for <a href="https://github.com/hemanth/functional-programming-jargon#monoid"><code>Monoid</code></a>  <a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Wondering why the data comes last? Check out <a href="https://youtu.be/m3svKOdZijA">Brian Lonsdorf’s “Hey
Underscore, You’re Doing It Wrong!” talk</a>. The
tl;dr is that you should arrange your arguments from least likely to change to
most likely to change in order to pave the way for partial application and
greater code reuse.  <a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p><a href="https://github.com/hemanth/functional-programming-jargon#arity" class="uri">https://github.com/hemanth/functional-programming-jargon#arity</a>  <a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p><a href="https://github.com/hemanth/functional-programming-jargon#functor" class="uri">https://github.com/hemanth/functional-programming-jargon#functor</a>  <a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray" class="uri">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray</a>  <a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>Check out <a href="https://ramdajs.com/docs/#addIndex">ramda.js’ <code>addIndex</code> function</a>
to see a different pattern for working with indices and <code>Array</code>s.  <a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p><code>Functor</code> <code>map</code> is also known as
<a href="https://en.wikibooks.org/wiki/Haskell/The_Functor_class"><code>fmap</code></a>.  <a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>If you’re an <a href="https://egghead.io">egghead.io</a> subscriber, <a href="https://twitter.com/avanslaars/">Andy Van
Slaars</a> has a great course, <a href="https://egghead.io/courses/safer-javascript-with-the-maybe-type">Safer JavaScript
with the Maybe Type</a>,
or you can check out <a href="https://en.wikibooks.org/wiki/Haskell/The_Functor_class">a Haskell article on The Functor
class</a>.  <a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>JavaScript: Understand Array.prototype.map by Reimplementing It</title>
    <link href="https://robertwpearce.com/javascript-understand-array-prototype-map-by-reimplementing-it.html" />
    <id>https://robertwpearce.com/javascript-understand-array-prototype-map-by-reimplementing-it.html</id>
    <published>2020-01-27T00:00:00Z</published>
    <updated>2020-01-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In this post, we will reimplement JavaScript’s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><code>Array.prototype.map</code></a>
function in order to not only understand <code>map</code> better but also to get an idea of
how to implement instance methods on <code>Array.prototype</code>.</p>
<p>If you’d prefer to see a ~5 minute recording of what we’ll do in this post, you
can watch the video below; otherwise, carry on!</p>
<iframe
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
  allowfullscreen
  frameborder="0"
  height="315"
  loading="lazy"
  src="https://www.youtube.com/embed/kaqu-e3Q7IY"
  style="margin-top:2rem;"
  title="JavaScript Implement Your Own map method, mappy, on Array prototype"
  width="560"
>
</iframe>
<h2 id="initial-example-use-map-to-convert-film-data-to-html-strings">Initial Example: Use <code>map</code> to Convert Film Data to HTML Strings</h2>
<p>First, we will start with some code that will demonstrate <em>one</em> way to take an
array of films and output certain HTML strings.</p>
<p>Here is the <code>films</code> array:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// films :: [Film]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">films</span> <span class="pl-o">=</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-sb">`Pulp Fiction`</span><span class="pl-p">,</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mf">8.9</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-sb">`Forrest Gump`</span><span class="pl-p">,</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mf">8.8</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-sb">`Interstellar`</span><span class="pl-p">,</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mf">8.6</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-sb">`The Prestige`</span><span class="pl-p">,</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mf">8.5</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">]</span></span></span></code></pre>
<p>and here is the output we are going for:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;&lt;li class=&#34;film&#34;&gt;#1 Pulp Fiction: &lt;b&gt;8.9&lt;/b&gt;&lt;/li&gt;&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;&lt;li class=&#34;film&#34;&gt;#2 Forrest Gump: &lt;b&gt;8.8&lt;/b&gt;&lt;/li&gt;&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;&lt;li class=&#34;film&#34;&gt;#3 Interstellar: &lt;b&gt;8.6&lt;/b&gt;&lt;/li&gt;&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;&lt;li class=&#34;film film--last&#34;&gt;#4 The Prestige: &lt;b&gt;8.5&lt;/b&gt;&lt;/li&gt;&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">]</span></span></span></code></pre>
<p>Let’s take a closer look at that output. We can see that the following data
needs to be included for each item:
* position in the list (<code>#3</code>)
* <code>title</code> (<code>Interstellar</code>)
* <code>score</code> (<code>8.6</code>)
* CSS class of <code>film</code>, unless it is the last item, in which case it gets <code>film</code>
and <code>film--last</code></p>
<p>Here is the (somewhat unusual) implementation we will use today in order to
later test that we successfully reimplemented <code>Array.prototype.map</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// filmToHtml :: (Film, Index, Films) -&gt; HtmlString
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kd">function</span> <span class="pl-nx">filmToHtml</span><span class="pl-p">(</span><span class="pl-nx">film</span><span class="pl-p">,</span> <span class="pl-nx">i</span><span class="pl-p">,</span> <span class="pl-nx">films</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-k">this</span><span class="pl-p">.</span><span class="pl-nx">format</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">index</span><span class="pl-o">:</span> <span class="pl-nx">i</span> <span class="pl-o">+</span> <span class="pl-mi">1</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">isLast</span><span class="pl-o">:</span> <span class="pl-nx">i</span> <span class="pl-o">===</span> <span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">length</span> <span class="pl-o">-</span> <span class="pl-mi">1</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-nx">film</span><span class="pl-p">.</span><span class="pl-nx">score</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-nx">film</span><span class="pl-p">.</span><span class="pl-nx">title</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">format</span><span class="pl-p">({</span> <span class="pl-nx">index</span><span class="pl-p">,</span> <span class="pl-nx">isLast</span><span class="pl-p">,</span> <span class="pl-nx">score</span><span class="pl-p">,</span> <span class="pl-nx">title</span> <span class="pl-p">})</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">cn</span> <span class="pl-o">=</span> <span class="pl-nx">isLast</span> <span class="pl-o">?</span> <span class="pl-sb">`film film--last`</span> <span class="pl-o">:</span> <span class="pl-sb">`film`</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-sb">`&lt;li class=&#34;</span><span class="pl-si">${</span><span class="pl-nx">cn</span><span class="pl-si">}</span><span class="pl-sb">&#34;&gt;#</span><span class="pl-si">${</span><span class="pl-nx">index</span><span class="pl-si">}</span><span class="pl-sb"> </span><span class="pl-si">${</span><span class="pl-nx">title</span><span class="pl-si">}</span><span class="pl-sb">: &lt;b&gt;</span><span class="pl-si">${</span><span class="pl-nx">score</span><span class="pl-si">}</span><span class="pl-sb">&lt;/b&gt;&lt;/li&gt;`</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">log</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">filmToHtml</span><span class="pl-p">,</span> <span class="pl-p">{</span> <span class="pl-nx">format</span> <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;&lt;li class=&#34;film&#34;&gt;#1 Pulp Fiction: &lt;b&gt;8.9&lt;/b&gt;&lt;/li&gt;&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;&lt;li class=&#34;film&#34;&gt;#2 Forrest Gump: &lt;b&gt;8.8&lt;/b&gt;&lt;/li&gt;&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;&lt;li class=&#34;film&#34;&gt;#3 Interstellar: &lt;b&gt;8.6&lt;/b&gt;&lt;/li&gt;&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;&lt;li class=&#34;film film--last&#34;&gt;#4 The Prestige: &lt;b&gt;8.5&lt;/b&gt;&lt;/li&gt;&#39;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ]
</span></span></span></code></pre>
<p>This is probably two-to-three times more complicated than it needs to be, but it
is a sufficient example for today, for we make use of <em>all</em> of
<code>Array.prototype.map</code>’s features.</p>
<p><em>Note: it’s rare to use the second argument to <code>map</code>, but we are doing so today
in order to test our implementation.</em></p>
<p>So what is going on here?</p>
<p>The <code>map</code> method iterates over each film and calls <code>filmToHtml</code> with a few
arguments:</p>
<ol>
<li>the film object</li>
<li>the film’s index in the array</li>
<li>the <code>films</code> array</li>
</ol>
<p>It also calls the <code>filmToHtml</code> function with an optional <code>this</code> scope. To
demonstrate how this works, we pass an object with the method <code>format</code> that
<code>filmToHtml</code> then accesses via <code>this.format</code>. The <code>format</code> function then
receives some data points and ultimately returns to us the <code>&lt;li&gt;...&lt;/li&gt;</code> HTML
for each film.</p>
<h2 id="defining-our-own-map-method-mappy">Defining Our Own <code>map</code> Method, <code>mappy</code></h2>
<p>If we want to write a new method that can be called on our <code>films</code> <code>Array</code>
instance, we add it to the <code>Array.prototype</code> like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">mappy</span> <span class="pl-o">=</span> <span class="pl-kd">function</span> <span class="pl-nx">mappy</span><span class="pl-p">(</span><span class="pl-cm">/* ??? */</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// our implementation will go here
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">}</span></span></span></code></pre>
<p>Since a <em>method</em> is a <em>function</em> defined on an object, we know we are working
with a function, but what arguments does our function accept?</p>
<h2 id="what-is-maps-syntax">What Is <code>map</code>’s Syntax?</h2>
<p>As hinted at in a prior section, if we look at <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Syntax">MDN’s <code>Array.prototype.map</code>
syntax documentation</a>,
we can see that we need:</p>
<ol>
<li>a <code>callback</code> that gets called with an optional scope and 3 arguments:
<ol>
<li>the currently iterated item</li>
<li>the current item’s array index (an integer)</li>
<li>the source array that <code>map</code> is called upon</li>
</ol></li>
<li>an optional value to use as <code>this</code> when calling the callback</li>
</ol>
<h2 id="filling-in-the-argument-blanks">Filling In The Argument Blanks</h2>
<p>Let’s give our <code>mappy</code> method a <code>callback</code> parameter, as well as an optional
<code>thisArg</code>, which we’ll simply name <code>_this</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">mappy</span> <span class="pl-o">=</span> <span class="pl-kd">function</span> <span class="pl-nx">mappy</span><span class="pl-p">(</span><span class="pl-nx">callback</span><span class="pl-p">,</span> <span class="pl-nx">_this</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// Let&#39;s then have it return our array instance
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// by returning the special `this` keyword.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-k">return</span> <span class="pl-k">this</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">log</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">filmToHtml</span><span class="pl-p">,</span> <span class="pl-p">{</span> <span class="pl-nx">format</span> <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//  { title: `Pulp Fiction`, score: 8.9 },
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//  { title: `Forrest Gump`, score: 8.8 },
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//  { title: `Interstellar`, score: 8.6 },
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//  { title: `The Prestige`, score: 8.5 }
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ]
</span></span></span></code></pre>
<p>Since our <code>mappy</code> method, like <code>map</code>, will not alter the original array, we know
we’ll need to return a new array, so let’s do that and return the empty array:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">mappy</span> <span class="pl-o">=</span> <span class="pl-kd">function</span> <span class="pl-nx">mappy</span><span class="pl-p">(</span><span class="pl-nx">callback</span><span class="pl-p">,</span> <span class="pl-nx">_this</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">newArray</span> <span class="pl-o">=</span> <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">newArray</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">log</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">filmToHtml</span><span class="pl-p">,</span> <span class="pl-p">{</span> <span class="pl-nx">format</span> <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// []
</span></span></span></code></pre>
<h2 id="the-implementation">The Implementation</h2>
<p>Now that we have a <code>newArray</code>, know we can work with <code>this</code>, have a <code>callback</code>
to call and a <code>_this</code> scope to call the <code>callback</code> with, we can populate the
<code>newArray</code> with the result of calling the <code>callback</code> function with each item in
our array (and with the appropriate arguments, of course):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">mappy</span> <span class="pl-o">=</span> <span class="pl-kd">function</span> <span class="pl-nx">mappy</span><span class="pl-p">(</span><span class="pl-nx">callback</span><span class="pl-p">,</span> <span class="pl-nx">_this</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">newArray</span> <span class="pl-o">=</span> <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// We&#39;ll use a for loop to iterate over
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// each item in our list,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-k">for</span> <span class="pl-p">(</span><span class="pl-kd">let</span> <span class="pl-nx">i</span> <span class="pl-o">=</span> <span class="pl-mi">0</span><span class="pl-p">;</span> <span class="pl-nx">i</span> <span class="pl-o">&lt;</span> <span class="pl-k">this</span><span class="pl-p">.</span><span class="pl-nx">length</span><span class="pl-p">;</span> <span class="pl-nx">i</span><span class="pl-o">++</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">// and then at the end of our `newArray`
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// we&#39;ll append the result of calling
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// the callback function with the optional
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// scope and its 3 arguments:
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">//   1. the item,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">//   2. the current item&#39;s index in the array,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">//   3. and lastly the original list, itself.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-nx">newArray</span><span class="pl-p">.</span><span class="pl-nx">push</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">callback</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">(</span><span class="pl-nx">_this</span><span class="pl-p">,</span> <span class="pl-k">this</span><span class="pl-p">[</span><span class="pl-nx">i</span><span class="pl-p">],</span> <span class="pl-nx">i</span><span class="pl-p">,</span> <span class="pl-k">this</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// Ultimately, we return the `newArray`
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// containing our transformed items.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-k">return</span> <span class="pl-nx">newArray</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// And when we log out the result,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// we can see our `filmToHtml` function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// works as expected.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">log</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">filmToHtml</span><span class="pl-p">,</span> <span class="pl-p">{</span> <span class="pl-nx">format</span> <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;&lt;li class=&#34;film&#34;&gt;#1 Pulp Fiction: &lt;b&gt;8.9&lt;/b&gt;&lt;/li&gt;&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;&lt;li class=&#34;film&#34;&gt;#2 Forrest Gump: &lt;b&gt;8.8&lt;/b&gt;&lt;/li&gt;&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;&lt;li class=&#34;film&#34;&gt;#3 Interstellar: &lt;b&gt;8.6&lt;/b&gt;&lt;/li&gt;&#39;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   &#39;&lt;li class=&#34;film film--last&#34;&gt;#4 The Prestige: &lt;b&gt;8.5&lt;/b&gt;&lt;/li&gt;&#39;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ]
</span></span></span></code></pre>
<h2 id="providing-useful-error-messaging">Providing Useful Error Messaging</h2>
<p>What happens if someone tries to use our <code>mappy</code> method but doesn’t provide a
callback function? For example:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">mappy</span><span class="pl-p">(</span><span class="pl-mi">123</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// TypeError: callback.call is not a function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-mi">123</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// TypeError: 123 is not a function
</span></span></span></code></pre>
<p>Unfortunately, our <code>mappy</code> method doesn’t take this scenario into account! But
the <code>map</code> method’s error messaging isn’t totally clear at a glance, either, so
let’s try a different approach:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">mappy</span> <span class="pl-o">=</span> <span class="pl-kd">function</span> <span class="pl-nx">mappy</span><span class="pl-p">(</span><span class="pl-nx">callback</span><span class="pl-p">,</span> <span class="pl-nx">_this</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-k">typeof</span> <span class="pl-nx">callback</span> <span class="pl-o">!==</span> <span class="pl-s1">&#39;function&#39;</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-nx">TypeError</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-s1">&#39;Array.prototype.mappy: &#39;</span> <span class="pl-o">+</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-s1">&#39;A callback function was expected &#39;</span> <span class="pl-o">+</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-s1">&#39;as the first argument, but we received &#39;</span> <span class="pl-o">+</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-s1">&#39;`&#39;</span> <span class="pl-o">+</span> <span class="pl-nx">JSON</span><span class="pl-p">.</span><span class="pl-nx">stringify</span><span class="pl-p">(</span><span class="pl-nx">callback</span><span class="pl-p">)</span> <span class="pl-o">+</span> <span class="pl-s1">&#39;`&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">newArray</span> <span class="pl-o">=</span> <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">for</span> <span class="pl-p">(</span><span class="pl-kd">let</span> <span class="pl-nx">i</span> <span class="pl-o">=</span> <span class="pl-mi">0</span><span class="pl-p">;</span> <span class="pl-nx">i</span> <span class="pl-o">&lt;</span> <span class="pl-k">this</span><span class="pl-p">.</span><span class="pl-nx">length</span><span class="pl-p">;</span> <span class="pl-nx">i</span><span class="pl-o">++</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">newArray</span><span class="pl-p">.</span><span class="pl-nx">push</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">callback</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">(</span><span class="pl-nx">_this</span><span class="pl-p">,</span> <span class="pl-k">this</span><span class="pl-p">[</span><span class="pl-nx">i</span><span class="pl-p">],</span> <span class="pl-nx">i</span><span class="pl-p">,</span> <span class="pl-k">this</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">newArray</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">mappy</span><span class="pl-p">(</span><span class="pl-mi">123</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// TypeError:
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   Array.prototype.mappy: A callback function was
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   expected as the first argument, but we received `123`
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">mappy</span><span class="pl-p">({</span> <span class="pl-nx">foo</span><span class="pl-o">:</span> <span class="pl-s1">&#39;bar&#39;</span> <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// TypeError:
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   Array.prototype.mappy: A callback function was
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   expected as the first argument, but we received `{&#34;foo&#34;:&#34;bar&#34;}`
</span></span></span></code></pre>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>I hope this post has helped de-mystify how <code>Array.prototype.map</code> conceptually
works under the hood! Next time, we’ll look at how to implement <code>map</code> without
polluting the <code>Array.prototype</code>, and we might even be able to use <code>map</code> on more
data structures than just <code>Array</code>! Stay tuned.</p>
<hr />
<p>Thank you for reading!
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Announcing react-medium-image-zoom v4</title>
    <link href="https://robertwpearce.com/announcing-react-medium-image-zoom-v4.html" />
    <id>https://robertwpearce.com/announcing-react-medium-image-zoom-v4.html</id>
    <published>2020-01-19T00:00:00Z</published>
    <updated>2023-02-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>2023-02-12 update: this article’s content is valid for the v4, but it isn’t
really for the v5 version.</em></p>
<p><em>tl;dr =&gt; I’ve release v4 of <a href="https://www.npmjs.com/package/react-medium-image-zoom">react-medium-image-zoom</a>,
and you should consider using it for zooming images. Check out <a href="https://rpearce.github.io/react-medium-image-zoom/">the Storybook
Examples</a> to see it in
action.</em></p>
<h2 id="history-of-react-medium-image-zoom">History of <code>react-medium-image-zoom</code></h2>
<p>I wrote the first version of <a href="https://www.npmjs.com/package/react-medium-image-zoom"><code>react-medium-image-zoom</code></a>
in 2016 in a 6m x 6m flat in London that my (now) wife and I lived in. At the
time, I had been enamored with <a href="https://medium.design/image-zoom-on-medium-24d146fc0c20">medium.com’s image zooming</a>
and wanted to share that with the <a href="https://reactjs.org/">React.js</a> masses, so I
wrote the first implementation on nights and weekends, and once it published,
it was quickly added to projects at my day job.</p>
<h2 id="people-use-it">People Use It?!</h2>
<p>Since then, <a href="https://www.npmjs.com/package/react-medium-image-zoom"><code>react-medium-image-zoom</code></a>
has <strong>22</strong> <a href="https://allcontributors.org/">All Contributors</a>, has reached up to
<strong>50k</strong> downloads per month, is used by <strong>638</strong> open source projects on GitHub,
has <strong>49</strong> dependent packages on NPM, and has over <strong>708</strong> stars on GitHub.
While that might not be staggering to anyone, that means the world to me –
somebody else found value in something I made and put out into the world for
free!</p>
<h2 id="why-v4-was-needed">Why v4 Was Needed</h2>
<p>Over the past 3.5 years, a number of issues were opened to ask for bug fixes,
features and general questions, and there have even been a few pull requests,
too! I am so grateful for all the effort put in by others to help me help them
solve their issues.</p>
<p>A point was eventually reached, however, where there were bugs that were
unfixable with the implementation of the component, and the codebase was not
something I wanted to work with any more.</p>
<p>I <em>knew</em> it could be simpler!
I <em>knew</em> it could be more accessible!</p>
<h2 id="using-react-medium-image-zoom-v4">Using <code>react-medium-image-zoom</code> v4</h2>
<p>Here is what using <a href="https://www.npmjs.com/package/react-medium-image-zoom"><code>react-medium-image-zoom</code></a>
looks like now.</p>
<p>First, you import the default, <a href="https://reactjs.org/docs/uncontrolled-components.html">uncontrolled
component</a> and the static
CSS file:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">Zoom</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;react-medium-image-zoom&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-s1">&#39;react-medium-image-zoom/dist/styles.css&#39;</span></span></span></code></pre>
<p>And then you go about your day adding zooming capabilities to your images:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">Zoom</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">img</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">alt</span><span class="pl-o">=</span><span class="pl-s">&#34;that wanaka tree&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;/path/to/thatwanakatree.jpg&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">width</span><span class="pl-o">=</span><span class="pl-s">&#34;500&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">Zoom</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Did I mention that you can now zoom <em>anything you like</em>?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// &lt;picture&gt;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">&lt;</span><span class="pl-nt">Zoom</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">picture</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">source</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">media</span><span class="pl-o">=</span><span class="pl-s">&#34;(max-width: 800px)&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">srcSet</span><span class="pl-o">=</span><span class="pl-s">&#34;/path/to/teAraiPoint.jpg&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">img</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">alt</span><span class="pl-o">=</span><span class="pl-s">&#34;that wanaka tree&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;/path/to/thatwanakatree.jpg&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">width</span><span class="pl-o">=</span><span class="pl-s">&#34;500&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">picture</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">Zoom</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// &lt;figure&gt;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">&lt;</span><span class="pl-nt">figure</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">Zoom</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">img</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">alt</span><span class="pl-o">=</span><span class="pl-s">&#34;that wanaka tree&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;/path/to/thatwanakatree.jpg&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-na">width</span><span class="pl-o">=</span><span class="pl-s">&#34;500&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">Zoom</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">figcaption</span><span class="pl-p">&gt;</span><span class="pl-nx">That</span> <span class="pl-nx">Wanaka</span> <span class="pl-nx">Tree</span><span class="pl-p">&lt;/</span><span class="pl-nt">figcaption</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">figure</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// &lt;div&gt; that looks like a circle
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">&lt;</span><span class="pl-nt">Zoom</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">div</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">aria</span><span class="pl-err">-</span><span class="pl-na">label</span><span class="pl-o">=</span><span class="pl-s">&#34;A blue circle&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">style</span><span class="pl-o">=</span><span class="pl-p">{{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">width</span><span class="pl-o">:</span> <span class="pl-mi">300</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">height</span><span class="pl-o">:</span> <span class="pl-mi">300</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">borderRadius</span><span class="pl-o">:</span> <span class="pl-s1">&#39;50%&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">backgroundColor</span><span class="pl-o">:</span> <span class="pl-s1">&#39;#0099ff&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">Zoom</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>If you find that you want to use the library as a <a href="https://reactjs.org/docs/forms.html#controlled-components">controlled
component</a>, you
import the <code>Controlled</code> component like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">Controlled</span> <span class="pl-nx">as</span> <span class="pl-nx">Zoom</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;react-medium-image-zoom&#39;</span></span></span></code></pre>
<p>And then you dictate whether or not it should be zoomed and provide a callback
for the library to give you hints about when you should probably zoom or unzoom
based on events like clicks and scrolling:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">Zoom</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-na">isZoomed</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-kc">true</span><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-na">onZoomChange</span><span class="pl-o">=</span><span class="pl-p">{</span><span class="pl-nx">isZoomed</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span> <span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">log</span><span class="pl-p">({</span> <span class="pl-nx">isZoomed</span> <span class="pl-p">})</span> <span class="pl-p">}}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">img</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">alt</span><span class="pl-o">=</span><span class="pl-s">&#34;that wanaka tree&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;/path/to/thatwanakatree.jpg&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-na">width</span><span class="pl-o">=</span><span class="pl-s">&#34;500&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">/&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">Zoom</span><span class="pl-p">&gt;</span></span></span></code></pre>
<h2 id="whats-next-for-react-medium-image-zoom">What’s Next For <code>react-medium-image-zoom</code>?</h2>
<ul>
<li>Smarter detection for image <code>naturalWidth</code> and <code>naturalHeight</code> so we don’t try
to zoom anything when it’s already at its maximum dimensions. This would also
re-enable the ability to not zoom beyond a source image’s natural dimensions
once zoomed.</li>
<li>Performance improvements (<code>requestAnimationFrame</code>, etc.)</li>
<li>Explore re-enabling switching out lower-quality images with higher-quality
ones as part of the zoom process</li>
</ul>
<h2 id="thank-you">Thank You</h2>
<p>Thank you for reading this and for having an interest in <a href="https://www.npmjs.com/package/react-medium-image-zoom"><code>react-medium-image-zoom</code></a>!
If you’d like to contribute to the project, need help, or have constructive
feedback, please open an issue on <a href="https://github.com/rpearce/react-medium-image-zoom/issues">the <code>react-medium-image-zoom</code> issue
tracker</a>.</p>
<p>Thank you for reading!
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Hakyll Pt. 5 – Generating Custom Post Filenames From a Title Slug</title>
    <link href="https://robertwpearce.com/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html" />
    <id>https://robertwpearce.com/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html</id>
    <published>2019-03-16T00:00:00Z</published>
    <updated>2023-02-11T16:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>2023-02-03 update: I published the <a href="https://hackage.haskell.org/package/slugger">slugger</a>
package on Hackage back on 2021-07-28, so that is available for use if you’d
rather use a package.</em></p>
<p>This is part 5 of a multipart series where we will look at getting a website /
blog set up with <a href="https://jaspervdj.be/hakyll">hakyll</a> and customized a fair
bit.</p>
<ul>
<li><a href="/hakyll-pt-1-setup-initial-customization.html">Pt. 1 – Setup &amp; Initial Customization</a></li>
<li><a href="/hakyll-pt-2-generating-a-sitemap-xml-file.html">Pt. 2 – Generating a Sitemap XML File</a></li>
<li><a href="/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html">Pt. 3 – Generating RSS and Atom XML Feeds</a></li>
<li><a href="/hakyll-pt-4-copying-static-files-for-your-build.html">Pt. 4 – Copying Static Files For Your Build</a></li>
<li>Pt. 5 – Generating Custom Post Filenames From a Title Slug</li>
<li><a href="/hakyll-pt-6-pure-builds-with-nix.html">Pt. 6 – Pure Builds With Nix</a></li>
<li><a href="/the-hakyll-nix-template-tutorial.html">The hakyll-nix-template Tutorial</a></li>
</ul>
<h2 id="overview">Overview</h2>
<p>Out of the box, hakyll takes filenames and dates and outputs nice routes for
your webpages, but what if you want your routes to be based off of a metadata
field like <code>title</code>? In this post we’ll take a title like <code>"Hakyll Pt. 5 – Generating Custom Post Filenames From a Title Slug"</code> and have hakyll output
routes like <code>"hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug"</code>.</p>
<ol>
<li><a href="#where-do-we-start-hakylls-route-function">Where Do We Start? Hakyll’s <code>route</code>
Function</a></li>
<li><a href="#looking-to-idroute-setextension-and-other-routes-functions-for-clues">Looking to <code>idRoute</code>, <code>setExtension</code> and Other <code>Routes</code> Functions for
Clues</a></li>
<li><a href="#leveraging-hakylls-metadataroute-to-access-title-metadata">Leveraging Hakyll’s <code>metadataRoute</code> to Access Title
Metadata</a></li>
<li><a href="#writing-our-own-uri-slug-function">Writing Our Own URI Slug Function</a></li>
<li><a href="#retrieving-and-slugifying-our-titles">Retrieving and Slugifying our Titles</a></li>
</ol>
<h2 id="where-do-we-start-hakylls-route-function">Where Do We Start? Hakyll’s <code>route</code> Function</h2>
<p>In <a href="https://jaspervdj.be/hakyll/tutorials/03-rules-routes-compilers.html#basic-routes">the hakyll tutorial on basic
routing</a>,
as well as other posts in this series, we have come across hakyll’s
<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Rules.hs#L175"><code>route</code></a>
function used in conjunction with functions like
<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs#L114-L115"><code>idRoute</code></a>
and
<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs#L136-L138"><code>setExtension</code></a>.
Given these functions live in the
<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs"><code>Hakyll.Core.Routes</code></a>
module, we can bet that other functions for customizing our outputted routes
will be found in there. Let’s see what we can find!</p>
<h2 id="looking-to-idroute-setextension-and-other-routes-functions-for-clues">Looking to <code>idRoute</code>, <code>setExtension</code> and Other <code>Routes</code> Functions for Clues</h2>
<p>When we look at
<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs"><code>Hakyll.Core.Routes</code></a>,
we can see that
<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs#L114-L115"><code>idRoute</code></a>
and
<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs#L136-L138"><code>setExtension</code></a>,
which we know are used with
<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Rules.hs#L175"><code>route</code></a>,
both return a type of <code>Routes</code>. The implementation of <code>Routes</code> is not important
for us here, for our job now is to see what <em>other</em> functions return <code>Routes</code>,
as well, so that we can potentially leverage their functionality.</p>
<p>Doing a quick search in that module reveals to us some very interesting results!
* <a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs#L152-L153"><code>customRoute</code></a>
* <a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs#L159-L160"><code>constRoute</code></a>
* <a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs#L173-L177"><code>gsubRoute</code></a>
* <a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Routes.hs#L182-L185"><code>metadataRoute</code></a></p>
<p>Alright! Now, what does each one do?
* <code>customRoute</code>: takes in a function that accepts an <code>Identifier</code> and returns a
<code>FilePath</code> and returns that. Sounds like it could be useful, somehow… Let’s
keep going.
* <code>constRoute</code>: takes in a <code>FilePath</code>, wraps the value in a <code>const</code> function
(which will always return the value it was passed) and then passes the
function to <code>customRoute</code>! Okay, so this basically means if we say
<code>constRoute "foo.html"</code>, then that’s what the route will come out as. Makes
sense.
* <code>gsubRoute</code>: this one’s purpose is to use patterns to replace parts of routes
(like transforming <code>"tags/rss/bar.xml"</code> to <code>tags/bar.xml</code>). Useful! But not
for our task.
* <code>metadataRoute</code>: takes in a function that accepts <code>Metadata</code> and returns
<code>Routes</code>, and then this function returns <code>Routes</code>. Since we want to access our
<code>title</code> metadata to create a route, something that gives us access to
<code>Metadata</code> and returns <code>Routes</code> is exactly what we want!</p>
<h2 id="leveraging-hakylls-metadataroute-to-access-title-metadata">Leveraging Hakyll’s <code>metadataRoute</code> to Access Title Metadata</h2>
<p>As with most things in the Haskell world, let’s allow the types to guide us.
What do we know?
* <code>route</code> accepts a function whose return value is <code>Routes</code>
* <code>metadataRoute</code> ultimately returns <code>Routes</code> (yay!), but it first takes in a
function that accepts <code>Metadata</code> and needs to return <code>Routes</code>.</p>
<p>Therefore, our task is to write a function with the signature
<code>Metadata -&gt; Routes</code> that finds the <code>title</code> field in the metadata, converts it
to a URI slug, and transforms that <code>FilePath</code> into a <code>Routes</code>. Perhaps we could
call it <code>titleRoute</code> and then extract the conversion from <code>Metadata</code> to
<code>FilePath</code> to something like <code>fileNameFromTitle</code>? Good enough.</p>
<p>Also, what did we see earlier that can take a <code>FilePath</code> and return <code>Routes</code>?
<code>constRoute</code> to the rescue! With these initial bits figured out, let’s sketch
this out :</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyllWith</span> <span class="pl-n">config</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">match</span> <span class="pl-s">&#34;posts/*&#34;</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kr">let</span> <span class="pl-n">ctx</span> <span class="pl-ow">=</span> <span class="pl-n">constField</span> <span class="pl-s">&#34;type&#34;</span> <span class="pl-s">&#34;article&#34;</span> <span class="pl-o">&lt;&gt;</span> <span class="pl-n">postCtx</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">route</span> <span class="pl-o">$</span> <span class="pl-n">metadataRoute</span> <span class="pl-n">titleRoute</span> <span class="pl-c1">-- THIS LINE</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-n">pandocCompilerCustom</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/post.html&#34;</span>    <span class="pl-n">ctx</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">saveSnapshot</span> <span class="pl-s">&#34;content&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/default.html&#34;</span> <span class="pl-n">ctx</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">-- ...other rules</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">titleRoute</span> <span class="pl-ow">::</span> <span class="pl-kt">Metadata</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">Routes</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">titleRoute</span> <span class="pl-ow">=</span> <span class="pl-n">constRoute</span> <span class="pl-o">.</span> <span class="pl-n">fileNameFromTitle</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">fileNameFromTitle</span> <span class="pl-ow">::</span> <span class="pl-kt">Metadata</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">FilePath</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">fileNameFromTitle</span> <span class="pl-ow">=</span> <span class="pl-n">undefined</span> <span class="pl-c1">-- ???</span></span></span></code></pre>
<p>Great! This is progress! We have the outline of what we need to accomplish. The
next task is to find the <code>title</code>, convert it to a slug and return a <code>FilePath</code>.
But first, we need to take a detour and write a <code>toSlug</code> function that we can
work with.</p>
<h2 id="writing-our-own-uri-slug-function">Writing Our Own URI Slug Function</h2>
<p>Taking inspiration from the archived project <a href="https://github.com/mrkkrp/slug" class="uri">https://github.com/mrkkrp/slug</a>, we
can write a module, <code>Slug.hs</code>, with a main function, <code>toSlug</code> that takes in
<code>Text</code> from <code>Data.Text</code> and transforms it from normal text to a slug. For
example, <code>"This example isn't good"</code> would be transformed into
<code>"this-example-isnt-good"</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-cm">{-# LANGUAGE OverloadedStrings #-}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">module</span> <span class="pl-nn">Slug</span> <span class="pl-p">(</span><span class="pl-nf">toSlug</span><span class="pl-p">)</span> <span class="pl-kr">where</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span>           <span class="pl-nn">Data.Char</span> <span class="pl-p">(</span><span class="pl-nf">isAlphaNum</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-k">qualified</span> <span class="pl-nn">Data.Text</span> <span class="pl-k">as</span> <span class="pl-n">T</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">keepAlphaNum</span> <span class="pl-ow">::</span> <span class="pl-kt">Char</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">Char</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">keepAlphaNum</span> <span class="pl-n">x</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">|</span> <span class="pl-n">isAlphaNum</span> <span class="pl-n">x</span> <span class="pl-ow">=</span> <span class="pl-n">x</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">|</span> <span class="pl-n">otherwise</span>    <span class="pl-ow">=</span> <span class="pl-sc">&#39; &#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">clean</span> <span class="pl-ow">::</span> <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-kt">Text</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-kt">Text</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">clean</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">map</span> <span class="pl-n">keepAlphaNum</span> <span class="pl-o">.</span> <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">replace</span> <span class="pl-s">&#34;&#39;&#34;</span> <span class="pl-s">&#34;&#34;</span> <span class="pl-o">.</span> <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">replace</span> <span class="pl-s">&#34;&amp;&#34;</span> <span class="pl-s">&#34;and&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">toSlug</span> <span class="pl-ow">::</span> <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-kt">Text</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-kt">Text</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">toSlug</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">intercalate</span> <span class="pl-p">(</span><span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">singleton</span> <span class="pl-sc">&#39;-&#39;</span><span class="pl-p">)</span> <span class="pl-o">.</span> <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">words</span> <span class="pl-o">.</span> <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">toLower</span> <span class="pl-o">.</span> <span class="pl-n">clean</span></span></span></code></pre>
<p>Once you do this, don’t forget to open up your project’s <code>.cabal</code> file, add in
this line and run <code>stack build</code> eventually:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">executable</span> <span class="pl-n">site</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">other</span><span class="pl-o">-</span><span class="pl-n">modules</span><span class="pl-kt">:</span>    <span class="pl-kt">Slug</span></span></span></code></pre>
<p>Now that this is taken care of, let’s return to the remaining task!</p>
<h2 id="retrieving-and-slugifying-our-titles">Retrieving and Slugifying our Titles</h2>
<p>The last step in our journey is to look up the <code>title</code> in the <code>Metadata</code>,
convert it to a slug and return a <code>FilePath</code>. Let’s look at the implementation
and then talk about it:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">titleRoute</span> <span class="pl-ow">::</span> <span class="pl-kt">Metadata</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">Routes</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">titleRoute</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">constRoute</span> <span class="pl-o">.</span> <span class="pl-n">fileNameFromTitle</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">fileNameFromTitle</span> <span class="pl-ow">::</span> <span class="pl-kt">Metadata</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">FilePath</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">fileNameFromTitle</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">unpack</span> <span class="pl-o">.</span> <span class="pl-p">(`</span><span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">append</span><span class="pl-p">`</span> <span class="pl-s">&#34;.html&#34;</span><span class="pl-p">)</span> <span class="pl-o">.</span> <span class="pl-n">toSlug</span> <span class="pl-o">.</span> <span class="pl-kt">T</span><span class="pl-o">.</span><span class="pl-n">pack</span> <span class="pl-o">.</span> <span class="pl-n">getTitleFromMeta</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">getTitleFromMeta</span> <span class="pl-ow">::</span> <span class="pl-kt">Metadata</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">getTitleFromMeta</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">fromMaybe</span> <span class="pl-s">&#34;no title&#34;</span> <span class="pl-o">.</span> <span class="pl-n">lookupString</span> <span class="pl-s">&#34;title&#34;</span></span></span></code></pre>
<ol>
<li><code>getTitleFromMeta</code>: use <code>Metadata</code>’s
<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Metadata.hs#L36-L37"><code>lookupString</code></a>
function to search for <code>title</code> and handle the <code>Maybe String</code> return value by
providing a fallback of <code>"no title"</code></li>
<li><code>fileNameFromTitle</code>: once we get the <code>title</code> <code>String</code>, convert it to type
<code>Text</code>, pass that to the slugify function, append <code>.html</code> to the slugified
<code>title</code>, then convert it back to a <code>String</code> (<code>FilePath</code> is a type alias of
<code>String</code>, so no worries here)</li>
<li><code>titleRoute</code>: once we have a <code>FilePath</code> value, we pass it to <code>constRoute</code> to
get back our <code>Routes</code> type that <code>metadataRoute</code> requires, and we’re done!</li>
</ol>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>While it would be awesome if this sort of thing were built in to hakyll, this
experience has shown me that in a way, the core of hakyll allows people to
customize their build to their heart’s delight, and perhaps an implementation
such as this would be useful as a hakyll plugin. Maybe!</p>
<p>Next up: <a href="/hakyll-pt-6-pure-builds-with-nix.html">Pt. 6 – Pure Builds With Nix</a></p>
<hr />
<p>Thank you for reading!
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Hakyll Pt. 4 – Copying Static Files For Your Build</title>
    <link href="https://robertwpearce.com/hakyll-pt-4-copying-static-files-for-your-build.html" />
    <id>https://robertwpearce.com/hakyll-pt-4-copying-static-files-for-your-build.html</id>
    <published>2019-01-27T00:00:00Z</published>
    <updated>2023-02-11T16:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is part 4 of a multipart series where we will look at getting a website /
blog set up with <a href="https://jaspervdj.be/hakyll">hakyll</a> and customized a fair
bit.</p>
<ul>
<li><a href="/hakyll-pt-1-setup-initial-customization.html">Pt. 1 – Setup &amp; Initial Customization</a></li>
<li><a href="/hakyll-pt-2-generating-a-sitemap-xml-file.html">Pt. 2 – Generating a Sitemap XML File</a></li>
<li><a href="/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html">Pt. 3 – Generating RSS and Atom XML Feeds</a></li>
<li>Pt. 4 – Copying Static Files For Your Build</li>
<li><a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a></li>
<li><a href="/hakyll-pt-6-pure-builds-with-nix.html">Pt. 6 – Pure Builds With Nix</a></li>
<li><a href="/the-hakyll-nix-template-tutorial.html">The hakyll-nix-template Tutorial</a></li>
</ul>
<h2 id="overview">Overview</h2>
<p>You will inevitably need to copy static files over to your build folder at some
point in a hakyll project, and this short tutorial will show you a simple way to
do so.</p>
<ol>
<li><a href="#copying-files-the-long-way">Copying Files the Long Way</a></li>
<li><a href="#simplify-file-copying-with-a-list">Simplify File Copying With a List</a></li>
<li><a href="#simplify-file-copying-with-pattern-composition-operators">Simplify File Copying With Pattern Composition Operators</a></li>
<li><a href="#github-pages-tip-for-dotfiles-and-dotfolders">GitHub Pages Tip for Dotfiles and Dotfolders</a></li>
</ol>
<h2 id="copying-files-the-long-way">Copying Files the Long Way</h2>
<p>As of the time of this writing, the <a href="https://github.com/jaspervdj/hakyll/blob/a983c8cbc917ffa3ce81d2540b50bdb321588b92/data/example/site.hs#L10-L12">default hakyll example for copying files</a>
looks like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">match</span> <span class="pl-s">&#34;images/*&#34;</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span>   <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-n">copyFileCompiler</span></span></span></code></pre>
<p>This is great and gets the job done! When I first looked at copying more files,
I went down this path:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">match</span> <span class="pl-s">&#34;CNAME&#34;</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span>   <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-n">copyFileCompiler</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">match</span> <span class="pl-s">&#34;robots.txt&#34;</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span>   <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-n">copyFileCompiler</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">match</span> <span class="pl-s">&#34;images/*&#34;</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span>   <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-n">copyFileCompiler</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">match</span> <span class="pl-s">&#34;fonts/*&#34;</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span>   <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-n">copyFileCompiler</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- ...and so on</span></span></span></code></pre>
<p>Obviously, there is some code duplication here; there must be a better way!</p>
<h2 id="simplify-file-copying-with-a-list">Simplify File Copying With a List</h2>
<p>Here are all the items I need copied over:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">CNAME
</span></span><span class="pl-line"><span class="pl-cl">robots.txt
</span></span><span class="pl-line"><span class="pl-cl">_config.yml
</span></span><span class="pl-line"><span class="pl-cl">images/*
</span></span><span class="pl-line"><span class="pl-cl">fonts/*
</span></span><span class="pl-line"><span class="pl-cl">.well-known/*</span></span></code></pre>
<p>As it turns out, this <em>list</em> of file identifiers to copy can be used in
conjunction with <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Foldable.html#v:forM_"><code>forM_</code></a>
to take some foldable structure (for us, a list), map each element to a monadic
action that uses hakyll’s <code>match</code> function, ignore the results and ultimately
simplify our code.</p>
<p>The type signature for <code>forM_</code> is as follows:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">forM_</span> <span class="pl-ow">::</span> <span class="pl-p">(</span><span class="pl-kt">Foldable</span> <span class="pl-n">t</span><span class="pl-p">,</span> <span class="pl-kt">Monad</span> <span class="pl-n">m</span><span class="pl-p">)</span> <span class="pl-ow">=&gt;</span> <span class="pl-n">t</span> <span class="pl-n">a</span> <span class="pl-ow">-&gt;</span> <span class="pl-p">(</span><span class="pl-n">a</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">m</span> <span class="pl-n">b</span><span class="pl-p">)</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">m</span> <span class="pl-nb">()</span></span></span></code></pre>
<p>And here is the implementation:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">forM_</span> <span class="pl-p">[</span> <span class="pl-s">&#34;CNAME&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">,</span> <span class="pl-s">&#34;robots.txt&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">,</span> <span class="pl-s">&#34;_config.yml&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">,</span> <span class="pl-s">&#34;images/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">,</span> <span class="pl-s">&#34;fonts/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">,</span> <span class="pl-s">&#34;.well-known/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">]</span> <span class="pl-o">$</span> <span class="pl-nf">\</span><span class="pl-n">f</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">match</span> <span class="pl-n">f</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span>   <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-n">copyFileCompiler</span></span></span></code></pre>
<p>Nice! While this technique is not mentioned in the documentation, it is present
in the <a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/web/site.hs#L27-L29">hakyll website’s <code>site.hs</code> file</a>,
so we know we’re in good company if <a href="https://github.com/jaspervdj">jaspervdj</a> is
already using it.</p>
<p>If you want to read more about the possible patterns that can be matched, check
out the commentary in the source here: <a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Identifier/Pattern.hs" class="uri">https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Identifier/Pattern.hs</a>.</p>
<h2 id="simplify-file-copying-with-pattern-composition-operators">Simplify File Copying With Pattern Composition Operators</h2>
<p><a href="https://www.reddit.com/r/haskell/comments/ak9700/hakyll_pt_4_copying_static_files_for_your_build/ef3lv73/">In this /r/haskell reddit thread</a>
by <a href="https://www.reddit.com/user/GAumala">GAumala</a>, they point out that <a href="https://jaspervdj.be/hakyll/reference/Hakyll-Core-Identifier-Pattern.html#g:3">hakyll’s
pattern composition operators</a>
can also be used to accomplish the same goal. Here is how we would could convert
our <code>forM_</code> above to instead use <a href="https://jaspervdj.be/hakyll/reference/Hakyll-Core-Identifier-Pattern.html#v:.-124--124-."><code>.||.</code></a>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">match</span> <span class="pl-p">(</span><span class="pl-s">&#34;CNAME&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">       <span class="pl-o">.||.</span> <span class="pl-s">&#34;favicon.ico&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">       <span class="pl-o">.||.</span> <span class="pl-s">&#34;robots.txt&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">       <span class="pl-o">.||.</span> <span class="pl-s">&#34;_config.yml&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">       <span class="pl-o">.||.</span> <span class="pl-s">&#34;images/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">       <span class="pl-o">.||.</span> <span class="pl-s">&#34;fonts/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">       <span class="pl-o">.||.</span> <span class="pl-s">&#34;.well-known/*&#34;</span><span class="pl-p">)</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span>   <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-n">copyFileCompiler</span></span></span></code></pre>
<p>While I understand the <code>forM_</code> better, this does seem to be more attractive!</p>
<h2 id="github-pages-tip-for-dotfiles-and-dotfolders">GitHub Pages Tip for Dotfiles and Dotfolders</h2>
<p>If you’re using GitHub pages and have any dotfiles or dotfolders to copy over,
make sure you pay attention here.</p>
<p>Let’s say you have signed up for <a href="https://publishers.basicattentiontoken.org">Brave
Payments</a> and need to verify your
site by placing a file at:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">https://mysite.com/.well-known/brave-payments-verification.txt</span></span></code></pre>
<p>Unfortunately, <a href="https://pages.github.com">GitHub Pages</a>, which uses
<a href="https://jekyllrb.com">jekyll</a> under the hood, will ignore your dotfiles and
dotfolders by default and will therefore not deploy them.</p>
<p>We can fix this by adding a <code>_config.yml</code> file to our project (you can see it
included in the list in the previous section) and telling it to include what it
is ignoring:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c"># _config.yml</span><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w">
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-w"></span><span class="pl-nt">include</span><span class="pl-p">:</span><span class="pl-w"> </span><span class="pl-p">[</span><span class="pl-s2">&#34;.well-known&#34;</span><span class="pl-p">]</span></span></span></code></pre>
<p>Once you’ve done this, you can commit this file, push it up to GitHub and view
it on your published site.</p>
<p>You can read more about jekyll’s configuration options here:
<a href="https://jekyllrb.com/docs/configuration/options/" class="uri">https://jekyllrb.com/docs/configuration/options/</a>.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Today we learned a simple way to list what files we want to be copied over in
our hakyll projects, got exposed to <code>forM_</code> and uncovered a potential issue
with dotfiles and dotfolders not getting published on GitHub Pages.</p>
<p>Next up:</p>
<ul>
<li><a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a></li>
<li><em>(wip) Pt. 6 – Customizing Markdown Compiler Options</em></li>
</ul>
<hr />
<p>Thank you for reading!
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Hakyll Pt. 3 – Generating RSS and Atom XML Feeds</title>
    <link href="https://robertwpearce.com/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html" />
    <id>https://robertwpearce.com/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html</id>
    <published>2019-01-23T00:00:00Z</published>
    <updated>2023-02-11T16:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is part 3 of a multipart series where we will look at getting a website /
blog set up with <a href="https://jaspervdj.be/hakyll">hakyll</a> and customized a fair
bit.</p>
<ul>
<li><a href="/hakyll-pt-1-setup-initial-customization.html">Pt. 1 – Setup &amp; Initial Customization</a></li>
<li><a href="/hakyll-pt-2-generating-a-sitemap-xml-file.html">Pt. 2 – Generating a Sitemap XML File</a></li>
<li>Pt. 3 – Generating RSS and Atom XML Feeds</li>
<li><a href="/hakyll-pt-4-copying-static-files-for-your-build.html">Pt. 4 – Copying Static Files For Your Build</a></li>
<li><a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a></li>
<li><a href="/hakyll-pt-6-pure-builds-with-nix.html">Pt. 6 – Pure Builds With Nix</a></li>
<li><a href="/the-hakyll-nix-template-tutorial.html">The hakyll-nix-template Tutorial</a></li>
</ul>
<h2 id="overview">Overview</h2>
<ol>
<li><a href="#hakyll-feed-required-reading">Hakyll Feed Required Reading</a></li>
<li><a href="#hakylls-prebuilt-rss--atom-templates">Hakyll’s Prebuilt RSS &amp; Atom Templates</a></li>
<li><a href="#hakyll-feed-setup">Hakyll Feed Setup</a></li>
<li><a href="#creating-the-atom-rss-xml-files">Creating the Atom &amp; RSS XML Files</a></li>
<li><a href="#unexpected-issue-setting-an-updated-field">Unexpected Issue: Setting an <code>updated</code> Field</a></li>
<li><a href="#using-your-own-rss-atom-templates">Using Your Own RSS &amp; Atom Templates</a></li>
<li><a href="#validating-and-using-our-feeds">Validating and Using Our Feeds</a></li>
</ol>
<h2 id="hakyll-feed-required-reading">Hakyll Feed Required Reading</h2>
<p>There is already a great starter guide at
<a href="https://jaspervdj.be/hakyll/tutorials/05-snapshots-feeds.html" class="uri">https://jaspervdj.be/hakyll/tutorials/05-snapshots-feeds.html</a>, so be sure to
read this first – it might make it so you don’t have to read <em>this</em> blog post at
all.</p>
<h2 id="hakylls-prebuilt-rss--atom-templates">Hakyll’s Prebuilt RSS &amp; Atom Templates</h2>
<p>Thankfully, hakyll aready comes with prebuilt RSS and Atom templates! You can
find the source here:
<a href="https://github.com/jaspervdj/hakyll/tree/master/data/templates" class="uri">https://github.com/jaspervdj/hakyll/tree/master/data/templates</a>. While you won’t
need to copy and paste nor even directly use these files, you should look them
over to see what fields they are expecting. There are two levels to be aware of:
the feed itself and each individual feed item.</p>
<h3 id="feed-level">Feed-Level</h3>
<p>The feed itself is looking for the following, and you’ll provide these through
a <code>FeedConfiguration</code> that we’ll discuss in a moment. Here are the fields the
<code>atom.xml</code> and <code>rss.xml</code> templates are expecting:</p>
<ul>
<li><code>title</code> (title of feed)</li>
<li><code>description</code> (description of feed)</li>
<li><code>authorName</code> (feed author name)</li>
<li><code>authorEmail</code> (feed author email)</li>
<li><code>root</code> (your website)</li>
<li><code>updated</code> (feed last updated at; should be done for you)</li>
<li><code>body</code> (feed body; should be done for you)</li>
<li><code>url</code> (path to the XML file; based off of a <code>create ["rss.xml"]</code> function
that we’ll discuss)</li>
</ul>
<h3 id="feed-item-level">Feed Item-Level</h3>
<p>Each feed item, or <em>entry</em>, expects the following:</p>
<ul>
<li><code>title</code> (title of the entry)</li>
<li><code>root</code> (your website)</li>
<li><code>url</code> (path to resource)</li>
<li><code>published</code> (published date; <code>"%Y-%m-%dT%H:%M:%SZ"</code> format; should be done for
you via hakyll’s <code>dateField</code> context)</li>
<li><code>updated</code> (updated date; <code>"%Y-%m-%dT%H:%M:%SZ"</code> format; should be done for
you, unless you provide you own)</li>
</ul>
<hr />
<p>Now that you know what sort of data are expected, let’s begin.</p>
<h2 id="hakyll-feed-setup">Hakyll Feed Setup</h2>
<p>As is introduced in <a href="https://jaspervdj.be/hakyll/tutorials/05-snapshots-feeds.html">the required hakyll feed
reading</a>, we need
to create a <code>FeedConfiguration</code>. If you’d like to see the <code>FeedConfiguration</code>
data constructor, you can view it here: <a href="https://github.com/jaspervdj/hakyll/blob/f3a17454fae3b140ada30ebef13f508179f4cd0d/lib/Hakyll/Web/Feed.hs#L63-L75" class="uri">https://github.com/jaspervdj/hakyll/blob/f3a17454fae3b140ada30ebef13f508179f4cd0d/lib/Hakyll/Web/Feed.hs#L63-L75</a>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">feedConfiguration</span> <span class="pl-ow">::</span> <span class="pl-kt">FeedConfiguration</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">feedConfiguration</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kt">FeedConfiguration</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">{</span> <span class="pl-n">feedTitle</span>       <span class="pl-ow">=</span> <span class="pl-s">&#34;My Blog&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-n">feedDescription</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;Posts about x, y &amp; z&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-n">feedAuthorName</span>  <span class="pl-ow">=</span> <span class="pl-s">&#34;My Name&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-n">feedAuthorEmail</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;me@myemail.com&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-n">feedRoot</span>        <span class="pl-ow">=</span> <span class="pl-s">&#34;https://example.com&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">}</span></span></span></code></pre>
<p>We should next figure out what we want our “feed context” to consist of. The
official hakyll feed guide (linked above) is:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">let</span> <span class="pl-n">feedCtx</span> <span class="pl-ow">=</span> <span class="pl-n">postCtx</span> <span class="pl-p">`</span><span class="pl-n">mappend</span><span class="pl-p">`</span> <span class="pl-n">bodyField</span> <span class="pl-s">&#34;description&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- which can be abbreviated to</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">let</span> <span class="pl-n">feedCtx</span> <span class="pl-ow">=</span> <span class="pl-n">postCtx</span> <span class="pl-o">&lt;&gt;</span> <span class="pl-n">bodyField</span> <span class="pl-s">&#34;description&#34;</span></span></span></code></pre>
<p>This will enable you to include the body of your post as the <code>description</code>, but
if you provide your own <code>description</code> field in your posts, then this step isn’t
necessary. For the mean time, let’s make our own <code>feedCtx</code> function that sticks
to the original post.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">feedCtx</span> <span class="pl-ow">::</span> <span class="pl-kt">Context</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">feedCtx</span> <span class="pl-ow">=</span> <span class="pl-n">postCtx</span> <span class="pl-o">&lt;&gt;</span> <span class="pl-n">bodyField</span> <span class="pl-s">&#34;description&#34;</span></span></span></code></pre>
<p>If you’re unsure of what <code>postCtx</code> is, I recommend checking out the <a href="/hakyll-pt-2-generating-a-sitemap-xml-file.html">previous
article</a> or viewing the source
of this site: <a href="https://github.com/rpearce/robertwpearce.com/blob/858163216f445eb8b6ab3b4304b022b64814b6f8/site.hs#L131-L136" class="uri">https://github.com/rpearce/robertwpearce.com/blob/858163216f445eb8b6ab3b4304b022b64814b6f8/site.hs#L131-L136</a>.</p>
<h2 id="creating-the-atom--rss-xml-files">Creating the Atom &amp; RSS XML Files</h2>
<p>Here is what <a href="https://jaspervdj.be/hakyll/tutorials/05-snapshots-feeds.html">the official hakyll feed
guide</a>
recommends:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">create</span> <span class="pl-p">[</span><span class="pl-s">&#34;atom.xml&#34;</span><span class="pl-p">]</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span> <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kr">let</span> <span class="pl-n">feedCtx</span> <span class="pl-ow">=</span> <span class="pl-n">postCtx</span> <span class="pl-p">`</span><span class="pl-n">mappend</span><span class="pl-p">`</span> <span class="pl-n">bodyField</span> <span class="pl-s">&#34;description&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">posts</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">fmap</span> <span class="pl-p">(</span><span class="pl-n">take</span> <span class="pl-mi">10</span><span class="pl-p">)</span> <span class="pl-o">.</span> <span class="pl-n">recentFirst</span> <span class="pl-o">=&lt;&lt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">loadAllSnapshots</span> <span class="pl-s">&#34;posts/*&#34;</span> <span class="pl-s">&#34;content&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">renderAtom</span> <span class="pl-n">myFeedConfiguration</span> <span class="pl-n">feedCtx</span> <span class="pl-n">posts</span></span></span></code></pre>
<p>This is great! However, if we want to generate both an <code>atom.xml</code> feed and an
<code>rss.xml</code> feed, we’ll end up with almost duplicated code:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">create</span> <span class="pl-p">[</span><span class="pl-s">&#34;rss.xml&#34;</span><span class="pl-p">]</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span> <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kr">let</span> <span class="pl-n">feedCtx</span> <span class="pl-ow">=</span> <span class="pl-n">postCtx</span> <span class="pl-p">`</span><span class="pl-n">mappend</span><span class="pl-p">`</span> <span class="pl-n">bodyField</span> <span class="pl-s">&#34;description&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">posts</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">fmap</span> <span class="pl-p">(</span><span class="pl-n">take</span> <span class="pl-mi">10</span><span class="pl-p">)</span> <span class="pl-o">.</span> <span class="pl-n">recentFirst</span> <span class="pl-o">=&lt;&lt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">loadAllSnapshots</span> <span class="pl-s">&#34;posts/*&#34;</span> <span class="pl-s">&#34;content&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">renderRss</span> <span class="pl-n">myFeedConfiguration</span> <span class="pl-n">feedCtx</span> <span class="pl-n">posts</span></span></span></code></pre>
<p>It looks like all the feed compilation is exactly the same except for the
<code>renderAtom</code> and <code>renderRss</code> functions that come bundled with hakyll. With this
in mind, let’s write our own feed compiler and reduce as much boilerplate as we
reasonably can.</p>
<p>To start out, let’s see what we want our top-level end result to be:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">create</span> <span class="pl-p">[</span><span class="pl-s">&#34;atom.xml&#34;</span><span class="pl-p">]</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span> <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-p">(</span><span class="pl-n">feedCompiler</span> <span class="pl-n">renderAtom</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">create</span> <span class="pl-p">[</span><span class="pl-s">&#34;rss.xml&#34;</span><span class="pl-p">]</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">route</span> <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">compile</span> <span class="pl-p">(</span><span class="pl-n">feedCompiler</span> <span class="pl-n">renderRss</span><span class="pl-p">)</span></span></span></code></pre>
<p>While we could potentially abstract this further, this leaves wiggle room for
customizing the <code>route</code> for whatever reason you may want to.</p>
<p>This <code>feedCompiler</code> is a function that we need to write that will house the
missing logic. Let’s look at its type:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">feedCompiler</span> <span class="pl-ow">::</span> <span class="pl-kt">FeedConfiguration</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-ow">-&gt;</span> <span class="pl-kt">Context</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-ow">-&gt;</span> <span class="pl-p">[</span><span class="pl-kt">Item</span> <span class="pl-kt">String</span><span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-ow">-&gt;</span> <span class="pl-kt">Compiler</span> <span class="pl-p">(</span><span class="pl-kt">Item</span> <span class="pl-kt">String</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-ow">-&gt;</span> <span class="pl-kt">Compiler</span> <span class="pl-p">(</span><span class="pl-kt">Item</span> <span class="pl-kt">String</span><span class="pl-p">)</span></span></span></code></pre>
<p>The first 4 parameters describe the types of both <code>renderAtom</code> and <code>renderRss</code>
(they’re the same). For reading’s sake, let’s set those to a type alias called
<code>FeedRenderer</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kt">FeedRenderer</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kt">FeedConfiguration</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-ow">-&gt;</span> <span class="pl-kt">Context</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-ow">-&gt;</span> <span class="pl-p">[</span><span class="pl-kt">Item</span> <span class="pl-kt">String</span><span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-ow">-&gt;</span> <span class="pl-kt">Compiler</span> <span class="pl-p">(</span><span class="pl-kt">Item</span> <span class="pl-kt">String</span><span class="pl-p">)</span></span></span></code></pre>
<p>And now we can define our feed but do it in a slightly cleaner way:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">feedCompiler</span> <span class="pl-ow">::</span> <span class="pl-kt">FeedRenderer</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">Compiler</span> <span class="pl-p">(</span><span class="pl-kt">Item</span> <span class="pl-kt">String</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">feedCompiler</span> <span class="pl-n">renderer</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">renderer</span> <span class="pl-n">feedConfiguration</span> <span class="pl-n">feedCtx</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-o">=&lt;&lt;</span> <span class="pl-n">fmap</span> <span class="pl-p">(</span><span class="pl-n">take</span> <span class="pl-mi">10</span><span class="pl-p">)</span> <span class="pl-o">.</span> <span class="pl-n">recentFirst</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-o">=&lt;&lt;</span> <span class="pl-n">loadAllSnapshots</span> <span class="pl-s">&#34;posts/*&#34;</span> <span class="pl-s">&#34;content&#34;</span></span></span></code></pre>
<h2 id="using-your-own-rss--atom-templates">Using Your Own RSS &amp; Atom Templates</h2>
<p>Thanks to <a href="https://abhinavsarkar.net/">Abhinav Sarkar</a> on
<a href="https://lobste.rs/s/6pdk3c/hakyll_pt_3_generating_rss_atom_xml_feeds">lobste.rs</a>,
I was pointed to a pull request, <a href="https://github.com/jaspervdj/hakyll/pull/652" class="uri">https://github.com/jaspervdj/hakyll/pull/652</a>,
that allows hakyll users to use their own feed templates. Here is some example
usage from the PR:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">customRenderAtom</span> <span class="pl-ow">::</span> <span class="pl-kt">FeedConfiguration</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">Context</span> <span class="pl-kt">String</span> <span class="pl-ow">-&gt;</span> <span class="pl-p">[</span><span class="pl-kt">Item</span> <span class="pl-kt">String</span><span class="pl-p">]</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">Compiler</span> <span class="pl-p">(</span><span class="pl-kt">Item</span> <span class="pl-kt">String</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">customRenderAtom</span> <span class="pl-n">config</span> <span class="pl-n">context</span> <span class="pl-n">items</span> <span class="pl-ow">=</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">atomTemplate</span>     <span class="pl-ow">&lt;-</span> <span class="pl-n">unsafeCompiler</span> <span class="pl-o">$</span> <span class="pl-n">readFile</span> <span class="pl-s">&#34;templates/atom.xml&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">atomItemTemplate</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">unsafeCompiler</span> <span class="pl-o">$</span> <span class="pl-n">readFile</span> <span class="pl-s">&#34;templates/atom-item.xml&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-n">renderAtomWithTemplates</span> <span class="pl-n">atomTemplate</span> <span class="pl-n">atomItemTemplate</span> <span class="pl-n">config</span> <span class="pl-n">context</span> <span class="pl-n">items</span></span></span></code></pre>
<h2 id="validating-and-using-our-feeds">Validating and Using Our Feeds</h2>
<p>If you’ve made it this far and have successfully generated and published your
<code>atom.xml</code> and/or <code>rss.xml</code> files, see if they’re valid! Head to
<a href="https://validator.w3.org/feed/" class="uri">https://validator.w3.org/feed/</a> and see if yours validate.</p>
<p>You can check out your new feed in an RSS/Atom feed reader such as the browser
plugin <a href="https://nodetics.com/feedbro/">FeedBro</a> or any others.</p>
<h2 id="unexpected-issue-setting-an-updated-field">Unexpected Issue: Setting an <code>updated</code> Field</h2>
<p>I ran into a feed validation problem where, in a few posts, I manually set the
<code>updated</code> field to a <em>date</em> – not <em>datetime</em> – and thus invalidated my feed. The
value <code>2017-06-30</code> needed to be in the <code>"%Y-%m-%dT%H:%M:%SZ"</code> format, or
<code>2017-06-30T00:00:00Z</code>. This led me down a rabbit hole that ended in me
essentially repurposing the <code>dateField</code> code from hakyll (<a href="https://github.com/jaspervdj/hakyll/blob/c85198d8cb6ce055c788e287c7f2470eac0aad36/lib/Hakyll/Web/Template/Context.hs#L273-L321" class="uri">https://github.com/jaspervdj/hakyll/blob/c85198d8cb6ce055c788e287c7f2470eac0aad36/lib/Hakyll/Web/Template/Context.hs#L273-L321</a>).
While I tried to use <code>parseTimeM</code> and <code>formatTime</code> from <a href="https://hackage.haskell.org/package/time-1.9.2/docs/Data-Time-Format.html"><code>Data.Time.Format</code></a>
in my own way, I couldn’t make it as simple as I wanted, thus leading to me
giving up and using what was already there. Here’s what I did:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">feedCtx</span> <span class="pl-ow">::</span> <span class="pl-kt">Context</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">feedCtx</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">updatedField</span> <span class="pl-o">&lt;&gt;</span> <span class="pl-c1">-- THIS IS NEW</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">postCtx</span>      <span class="pl-o">&lt;&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">bodyField</span> <span class="pl-s">&#34;description&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">updatedField</span> <span class="pl-ow">::</span> <span class="pl-kt">Context</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">updatedField</span> <span class="pl-ow">=</span> <span class="pl-n">field</span> <span class="pl-s">&#34;updated&#34;</span> <span class="pl-o">$</span> <span class="pl-nf">\</span><span class="pl-n">i</span> <span class="pl-ow">-&gt;</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kr">let</span> <span class="pl-n">locale</span> <span class="pl-ow">=</span> <span class="pl-n">defaultTimeLocale</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">time</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">getUpdatedUTC</span> <span class="pl-n">locale</span> <span class="pl-o">$</span> <span class="pl-n">itemIdentifier</span> <span class="pl-n">i</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">return</span> <span class="pl-o">$</span> <span class="pl-n">formatTime</span> <span class="pl-n">locale</span> <span class="pl-s">&#34;%Y-%m-%dT%H:%M:%SZ&#34;</span> <span class="pl-n">time</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">getUpdatedUTC</span> <span class="pl-ow">::</span> <span class="pl-kt">MonadMetadata</span> <span class="pl-n">m</span> <span class="pl-ow">=&gt;</span> <span class="pl-kt">TimeLocale</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">Identifier</span> <span class="pl-ow">-&gt;</span> <span class="pl-n">m</span> <span class="pl-kt">Clock</span><span class="pl-o">.</span><span class="pl-kt">UTCTime</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">getUpdatedUTC</span> <span class="pl-n">locale</span> <span class="pl-n">id&#39;</span> <span class="pl-ow">=</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">metadata</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">getMetadata</span> <span class="pl-n">id&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kr">let</span> <span class="pl-n">tryField</span> <span class="pl-n">k</span> <span class="pl-n">fmt</span> <span class="pl-ow">=</span> <span class="pl-n">lookupString</span> <span class="pl-n">k</span> <span class="pl-n">metadata</span> <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">parseTime&#39;</span> <span class="pl-n">fmt</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">maybe</span> <span class="pl-n">empty&#39;</span> <span class="pl-n">return</span> <span class="pl-o">$</span> <span class="pl-n">msum</span> <span class="pl-p">[</span><span class="pl-n">tryField</span> <span class="pl-s">&#34;updated&#34;</span> <span class="pl-n">fmt</span> <span class="pl-o">|</span> <span class="pl-n">fmt</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">formats</span><span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">where</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">empty&#39;</span>     <span class="pl-ow">=</span> <span class="pl-n">fail</span> <span class="pl-o">$</span> <span class="pl-s">&#34;Hakyll.Web.Template.Context.getUpdatedUTC: &#34;</span> <span class="pl-o">++</span> <span class="pl-s">&#34;could not parse time for &#34;</span> <span class="pl-o">++</span> <span class="pl-n">show</span> <span class="pl-n">id&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">parseTime&#39;</span> <span class="pl-ow">=</span> <span class="pl-n">parseTimeM</span> <span class="pl-kt">True</span> <span class="pl-n">locale</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">formats</span>    <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">[</span> <span class="pl-s">&#34;%a, %d %b %Y %H:%M:%S %Z&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-s">&#34;%Y-%m-%dT%H:%M:%S%Z&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-s">&#34;%Y-%m-%d %H:%M:%S%Z&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-s">&#34;%Y-%m-%d&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-s">&#34;%B %e, %Y %l:%M %p&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-s">&#34;%B %e, %Y&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-s">&#34;%b %d, %Y&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">]</span></span></span></code></pre>
<p>Woah! We need to break down what’s happening here.</p>
<h3 id="feedctx"><code>feedCtx</code></h3>
<p>The addition to <code>feedCtx</code> is before our <code>postCtx</code> because of the <code>mappend</code>
precedence of what comes out of the pipeline with the value <code>updated</code>. We want
first rights to transforming the <code>updated</code> field, so it needs to come first.</p>
<h3 id="updatedfield"><code>updatedField</code></h3>
<p>This function is a <code>Context</code> that leans on hakyll’s <code>field</code> function to say that
we want to work with the <code>updated</code> field and then do some Monad stuff with
time. The tl;dr is that we send the field’s current value off in order to get a
<code>UTCTime</code> value back, and then we format it to be the way we need it.</p>
<h3 id="getupdatedutc"><code>getUpdatedUTC</code></h3>
<p>It’s really not as bad as it looks! The root of this function does two things:</p>
<ol>
<li>looks up the the <code>updated</code> value in the metadata</li>
<li>tries to parse it using a bunch of different formats</li>
</ol>
<p>If it can’t do these things, it simply <code>fail</code>s.</p>
<hr />
<p>Yes, I could have simply written my <code>updated</code> field in the correct format. But
where’s the fun in that? I would hate for my feed to silently invalidate itself
over something so simple!</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Whew! We dove in to generating Atom &amp; RSS XML feeds with hakyll, uncovered a
nice refactor opportunity via <code>feedCompiler</code>, learned how to validate our feeds
and ultimately learned about how a seemingly harmless <code>updated</code> date could
prevent us from having a totally valid feed!</p>
<p>Next up:</p>
<ul>
<li><a href="/hakyll-pt-4-copying-static-files-for-your-build.html">Pt. 4 – Copying Static Files For Your Build</a></li>
<li><a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a></li>
<li><em>(wip) Pt. 6 – Customizing Markdown Compiler Options</em></li>
</ul>
<hr />
<p>Thank you for reading!
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Hakyll Pt. 2 – Generating a Sitemap XML File</title>
    <link href="https://robertwpearce.com/hakyll-pt-2-generating-a-sitemap-xml-file.html" />
    <id>https://robertwpearce.com/hakyll-pt-2-generating-a-sitemap-xml-file.html</id>
    <published>2018-11-17T00:00:00Z</published>
    <updated>2023-02-11T16:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is part 2 of a multipart series where we will look at getting a website /
blog set up with <a href="https://jaspervdj.be/hakyll">hakyll</a> and customized a fair
bit.</p>
<ul>
<li><a href="/hakyll-pt-1-setup-initial-customization.html">Pt. 1 – Setup &amp; Initial Customization</a></li>
<li>Pt. 2 – Generating a Sitemap XML File</li>
<li><a href="/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html">Pt. 3 – Generating RSS and Atom XML Feeds</a></li>
<li><a href="/hakyll-pt-4-copying-static-files-for-your-build.html">Pt. 4 – Copying Static Files For Your Build</a></li>
<li><a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a></li>
<li><a href="/hakyll-pt-6-pure-builds-with-nix.html">Pt. 6 – Pure Builds With Nix</a></li>
<li><a href="/the-hakyll-nix-template-tutorial.html">The hakyll-nix-template Tutorial</a></li>
</ul>
<h2 id="overview">Overview</h2>
<ol>
<li><a href="#adding-a-sitemap-template">Adding a Sitemap Template</a></li>
<li><a href="#generating-the-sitemap-xml-file">Generating the Sitemap XML File</a></li>
<li><a href="#adding-other-pages-and-directories">Adding Other Pages and Directories</a></li>
</ol>
<h2 id="adding-a-sitemap-template">Adding a Sitemap Template</h2>
<p>A sitemap.xml template, just like <a href="/hakyll-pt-1-setup-initial-customization.html#working-with-templates">the templates in the last
post</a>,
receives context fields to work with (variables, essentially), and outputs the
result of applying said context to the template. Here is what our sitemap
template will look like today in our project’s <code>templates/sitemap.xml</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nt">&lt;urlset</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-na">xmlns=</span><span class="pl-s">&#34;http://www.sitemaps.org/schemas/sitemap/0.9&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-na">xmlns:news=</span><span class="pl-s">&#34;http://www.google.com/schemas/sitemap-news/0.9&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-na">xmlns:xhtml=</span><span class="pl-s">&#34;http://www.w3.org/1999/xhtml&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-na">xmlns:mobile=</span><span class="pl-s">&#34;http://www.google.com/schemas/sitemap-mobile/1.0&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-na">xmlns:image=</span><span class="pl-s">&#34;http://www.google.com/schemas/sitemap-image/1.1&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-na">xmlns:video=</span><span class="pl-s">&#34;http://www.google.com/schemas/sitemap-video/1.1&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nt">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nt">&lt;url&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&lt;loc&gt;</span>$root$<span class="pl-nt">&lt;/loc&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&lt;changefreq&gt;</span>daily<span class="pl-nt">&lt;/changefreq&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&lt;priority&gt;</span>1.0<span class="pl-nt">&lt;/priority&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nt">&lt;/url&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">$for(pages)$
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nt">&lt;url&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&lt;loc&gt;</span>$root$$url$<span class="pl-nt">&lt;/loc&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&lt;lastmod&gt;</span>$if(updated)$$updated$$else$$if(date)$$date$$endif$$endif$<span class="pl-nt">&lt;/lastmod&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&lt;changefreq&gt;</span>weekly<span class="pl-nt">&lt;/changefreq&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&lt;priority&gt;</span>0.8<span class="pl-nt">&lt;/priority&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nt">&lt;/url&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">$endfor$
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nt">&lt;/urlset&gt;</span></span></span></code></pre>
<p>Apart from the normal sitemap boilerplate, you can see <code>root</code>, <code>pages</code>, <code>url</code>,
<code>date</code> and <code>updated</code> context fields. While <code>date</code> and <code>updated</code>
would come from your metadata fields defined for a post, and the <code>url</code> is built
from hakyll’s <a href="https://github.com/jaspervdj/hakyll/blob/c85198d8cb6ce055c788e287c7f2470eac0aad36/lib/Hakyll/Web/Template/Context.hs#L192"><code>defaultContext</code></a>,
the <code>root</code> and <code>pages</code> fields are custom defined in what will be our very own
<code>sitemapCtx</code> context. In the next section, we’ll use this template to generate
our sitemap.xml file.</p>
<h2 id="generating-the-sitemap-xml-file">Generating the Sitemap XML File</h2>
<p>If you <a href="https://robertwpearce.com/hakyll-pt-1-setup-initial-customization.html#installation-setup">create a hakyll project from scratch</a>,
you will start out with a few files that we can add to our sitemap:
* <code>index.html</code>
* <code>about.rst</code>
* <code>contact.markdown</code>
* <code>posts/2015-08-12-spqr.html</code>
* <code>posts/2015-10-07-rosa-rosa-rosam.html</code>
* <code>posts/2015-11-28-carpe-diem.html</code>
* <code>posts/2015-12-07-tu-quoque.html</code></p>
<p>You should note that your <code>site.hs</code> file also has the following:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyllWith</span> <span class="pl-n">config</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">match</span> <span class="pl-p">(</span><span class="pl-n">fromList</span> <span class="pl-p">[</span><span class="pl-s">&#34;about.rst&#34;</span><span class="pl-p">,</span> <span class="pl-s">&#34;contact.markdown&#34;</span><span class="pl-p">])</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">route</span>   <span class="pl-o">$</span> <span class="pl-n">setExtension</span> <span class="pl-s">&#34;html&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-n">pandocCompiler</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/default.html&#34;</span> <span class="pl-n">defaultContext</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">match</span> <span class="pl-s">&#34;posts/*&#34;</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">route</span> <span class="pl-o">$</span> <span class="pl-n">setExtension</span> <span class="pl-s">&#34;html&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-n">pandocCompiler</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/post.html&#34;</span>    <span class="pl-n">postCtx</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/default.html&#34;</span> <span class="pl-n">postCtx</span></span></span></code></pre>
<p>It’s important that you understand that any files you want to be loaded and sent
to <code>templates/sitemap.xml</code> must first be <code>match</code>ed and <code>compile</code>d <em>before</em> the
sitemap can be built. If you don’t do this, you’ll pull your hair out wondering
why the file (or folder) you’re trying to include in the sitemap never shows up.</p>
<p>Now, there is something that we are going to emulate to make this sitemap a reality
(this should already be in <code>site.hs</code>):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyllWith</span> <span class="pl-n">config</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">create</span> <span class="pl-p">[</span><span class="pl-s">&#34;archive.html&#34;</span><span class="pl-p">]</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">route</span> <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">posts</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">recentFirst</span> <span class="pl-o">=&lt;&lt;</span> <span class="pl-n">loadAll</span> <span class="pl-s">&#34;posts/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-kr">let</span> <span class="pl-n">archiveCtx</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-n">listField</span> <span class="pl-s">&#34;posts&#34;</span> <span class="pl-n">postCtx</span> <span class="pl-p">(</span><span class="pl-n">return</span> <span class="pl-n">posts</span><span class="pl-p">)</span> <span class="pl-p">`</span><span class="pl-n">mappend</span><span class="pl-p">`</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-n">constField</span> <span class="pl-s">&#34;title&#34;</span> <span class="pl-s">&#34;Archives&#34;</span>            <span class="pl-p">`</span><span class="pl-n">mappend</span><span class="pl-p">`</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-n">defaultContext</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">makeItem</span> <span class="pl-s">&#34;&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/archive.html&#34;</span> <span class="pl-n">archiveCtx</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/default.html&#34;</span> <span class="pl-n">archiveCtx</span></span></span></code></pre>
<p>Reading the code above, this essentially says
1. here’s a file we want to create that <em>does not yet exist</em> (how <code>create</code>
differs from <code>match</code>)
1. when you create the route, keep the filename (what <code>idRoute</code> does)
1. when you compile, load all the posts, specify what the context to send
to each template will be, then make the item (the <code>""</code> is an identifier…
see <a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Compiler.hs#L65-L68">the source</a>
for more), then pass the context to the archive template and pass that on to
the default template, ultimately building up a full webpage from the
inside-out</p>
<p>Let’s change this 3-step rule to suit our needs before we wrangle the code. We
want our rules to say:
1. here’s a file we want to create that <em>does not yet exist</em> (<code>sitemap.xml</code>)
1. when you create the route, keep the filename (what <code>idRoute</code> does)
1. when you compile, load all the posts, load all the other pages, specify
what the context to send to each template will be, then make the item, then
pass the context to the sitemap template, ultimately building up an XML file</p>
<p>This is almost the same! Let’s write it:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyllWith</span> <span class="pl-n">config</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">create</span> <span class="pl-p">[</span><span class="pl-s">&#34;sitemap.xml&#34;</span><span class="pl-p">]</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">route</span> <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-c1">-- load and sort the posts</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">posts</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">recentFirst</span> <span class="pl-o">=&lt;&lt;</span> <span class="pl-n">loadAll</span> <span class="pl-s">&#34;posts/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-c1">-- load individual pages from a list (globs DO NOT work here)</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">singlePages</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">loadAll</span> <span class="pl-p">(</span><span class="pl-n">fromList</span> <span class="pl-p">[</span><span class="pl-s">&#34;about.rst&#34;</span><span class="pl-p">,</span> <span class="pl-s">&#34;contact.markdown&#34;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">                           <span class="pl-c1">-- mappend the posts and singlePages together</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-kr">let</span> <span class="pl-n">pages</span> <span class="pl-ow">=</span> <span class="pl-n">posts</span> <span class="pl-o">&lt;&gt;</span> <span class="pl-n">singlePages</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">                           <span class="pl-c1">-- create the `pages` field with the postCtx</span>
</span></span><span class="pl-line"><span class="pl-cl">                           <span class="pl-c1">-- and return the `pages` value for it</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-n">sitemapCtx</span> <span class="pl-ow">=</span> <span class="pl-n">listField</span> <span class="pl-s">&#34;pages&#34;</span> <span class="pl-n">postCtx</span> <span class="pl-p">(</span><span class="pl-n">return</span> <span class="pl-n">pages</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-c1">-- make the item and apply our sitemap template</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">makeItem</span> <span class="pl-s">&#34;&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/sitemap.xml&#34;</span> <span class="pl-n">sitemapCtx</span></span></span></code></pre>
<p>This is starting to look good! But what’s wrong here? Remember the <code>root</code>
context bits? We’re going to need to define what that is, and the best way that
I’ve found right now is simply as a <code>String</code>; if you want to do something fancy
with configuration or reading it in dynamically, then go nuts.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">root</span> <span class="pl-ow">::</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">root</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;https://ourblog.com&#34;</span></span></span></code></pre>
<p>With that defined, we can add it to our contexts:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyllWith</span> <span class="pl-n">config</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">create</span> <span class="pl-p">[</span><span class="pl-s">&#34;sitemap.xml&#34;</span><span class="pl-p">]</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">route</span> <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">posts</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">recentFirst</span> <span class="pl-o">=&lt;&lt;</span> <span class="pl-n">loadAll</span> <span class="pl-s">&#34;posts/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">singlePages</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">loadAll</span> <span class="pl-p">(</span><span class="pl-n">fromList</span> <span class="pl-p">[</span><span class="pl-s">&#34;about.rst&#34;</span><span class="pl-p">,</span> <span class="pl-s">&#34;contact.markdown&#34;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-kr">let</span> <span class="pl-n">pages</span> <span class="pl-ow">=</span> <span class="pl-n">posts</span> <span class="pl-o">&lt;&gt;</span> <span class="pl-n">singlePages</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-n">sitemapCtx</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-n">constField</span> <span class="pl-s">&#34;root&#34;</span> <span class="pl-n">root</span> <span class="pl-o">&lt;&gt;</span> <span class="pl-c1">-- here</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-n">listField</span> <span class="pl-s">&#34;pages&#34;</span> <span class="pl-n">postCtx</span> <span class="pl-p">(</span><span class="pl-n">return</span> <span class="pl-n">pages</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">makeItem</span> <span class="pl-s">&#34;&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/sitemap.xml&#34;</span> <span class="pl-n">sitemapCtx</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">postCtx</span> <span class="pl-ow">::</span> <span class="pl-kt">Context</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">postCtx</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">constField</span> <span class="pl-s">&#34;root&#34;</span> <span class="pl-n">root</span>      <span class="pl-o">&lt;&gt;</span> <span class="pl-c1">-- here</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">dateField</span> <span class="pl-s">&#34;date&#34;</span> <span class="pl-s">&#34;%Y-%m-%d&#34;</span> <span class="pl-o">&lt;&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">defaultContext</span></span></span></code></pre>
<p><em>Hint: if the <code>&lt;&gt;</code> is throwing you for a loop, it’s defined as the same as thing
as <a href="https://wiki.haskell.org/Monoid"><code>mappend</code></a>.</em></p>
<p>See how we defined <code>constField "root" root</code> in two places? We’re talking about
two different contexts here: the <em>sitemap</em> context and the <em>post</em> context. While
you could have the <code>postCtx</code> be combined with the <code>sitemapCtx</code>, thus giving the
<code>pages</code> field access to the <code>root</code> field, you probably want to use <code>root</code> (and
perhaps other constants) wherever you work with posts, so adding them to
<code>postCtx</code> for use everywhere seems like the right thing to do.</p>
<p>Once you’ve got all this, run the following to build (or rebuild) your
<code>docs/sitemap.xml</code> file:
1. <code>λ stack build</code>
1. <code>λ stack exec site clean</code>
1. <code>λ stack exec site build</code></p>
<p>Your <code>docs/sitemap.xml</code> should now have all your pages defined in it!</p>
<h2 id="adding-other-pages-and-directories">Adding Other Pages and Directories</h2>
<p>We’ve done some epic traveling in New Zealand and now want to include a bunch of
pages we’ve written in the sitemap. Those pages are:
* <code>new-zealand/index.md</code>
* <code>new-zealand/otago/index.md</code>
* <code>new-zealand/otago/dunedin-area.md</code>
* <code>new-zealand/otago/queenstown-area.md</code>
* <code>new-zealand/otago/wanaka-area.md</code></p>
<p>First, we make sure that our pages get compiled (we’ll use <code>postCtx</code> for them):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyllWith</span> <span class="pl-n">config</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">match</span> <span class="pl-s">&#34;new-zealand/**&#34;</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">route</span> <span class="pl-o">$</span> <span class="pl-n">setExtension</span> <span class="pl-s">&#34;html&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-n">pandocCompiler</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/post.html&#34;</span>    <span class="pl-n">postCtx</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/default.html&#34;</span> <span class="pl-n">postCtx</span></span></span></code></pre>
<p>And then we want to make sure we add them to our <code>create</code> function:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyllWith</span> <span class="pl-n">config</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">-- ... match code up here</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">create</span> <span class="pl-p">[</span><span class="pl-s">&#34;sitemap.xml&#34;</span><span class="pl-p">]</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">route</span> <span class="pl-n">idRoute</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-n">compile</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">posts</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">recentFirst</span> <span class="pl-o">=&lt;&lt;</span> <span class="pl-n">loadAll</span> <span class="pl-s">&#34;posts/*&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">singlePages</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">loadAll</span> <span class="pl-p">(</span><span class="pl-n">fromList</span> <span class="pl-p">[</span><span class="pl-s">&#34;about.rst&#34;</span><span class="pl-p">,</span> <span class="pl-s">&#34;contact.markdown&#34;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">nzPages</span> <span class="pl-ow">&lt;-</span> <span class="pl-n">loadAll</span> <span class="pl-s">&#34;new-zealand/**&#34;</span> <span class="pl-c1">-- here</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-kr">let</span> <span class="pl-n">pages</span> <span class="pl-ow">=</span> <span class="pl-n">posts</span> <span class="pl-o">&lt;&gt;</span> <span class="pl-n">singlePages</span> <span class="pl-o">&lt;&gt;</span> <span class="pl-n">nzPages</span> <span class="pl-c1">-- here</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-n">sitemapCtx</span> <span class="pl-ow">=</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-n">constField</span> <span class="pl-s">&#34;root&#34;</span> <span class="pl-n">root</span> <span class="pl-o">&lt;&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-n">listField</span> <span class="pl-s">&#34;pages&#34;</span> <span class="pl-n">postCtx</span> <span class="pl-p">(</span><span class="pl-n">return</span> <span class="pl-n">pages</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-n">makeItem</span> <span class="pl-s">&#34;&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-o">&gt;&gt;=</span> <span class="pl-n">loadAndApplyTemplate</span> <span class="pl-s">&#34;templates/sitemap.xml&#34;</span> <span class="pl-n">sitemapCtx</span></span></span></code></pre>
<p>I could not figure out how to mix globs (<code>new-zealand/**</code>) in with individual
file paths (included in <code>fromList</code>), so I had to load them separately; if you
figure out how, let me know!</p>
<p>Once you’ve got all this, run the following to rebuild your <code>docs/sitemap.xml</code>
file:
1. <code>λ stack build</code>
1. <code>λ stack exec site rebuild</code></p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>In this lesson we learned how to dynamically generate a sitemap.xml file using
<a href="https://jaspervdj.be/hakyll">hakyll</a>. Next time, we’ll use these same skills to
generate our own RSS and Atom XML feeds.</p>
<p>Next up:
* <a href="/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html">Pt. 3 – Generating RSS and Atom XML Feeds</a>
* <a href="/hakyll-pt-4-copying-static-files-for-your-build.html">Pt. 4 – Copying Static Files For Your Build</a>
* <a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a>
* <em>(wip) Pt. 6 – Customizing Markdown Compiler Options</em></p>
<hr />
<p>Thank you for reading!
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Hakyll Pt. 1 – Setup &amp; Initial Customization</title>
    <link href="https://robertwpearce.com/hakyll-pt-1-setup-initial-customization.html" />
    <id>https://robertwpearce.com/hakyll-pt-1-setup-initial-customization.html</id>
    <published>2018-11-04T00:00:00Z</published>
    <updated>2023-02-11T16:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is part 1 of a multipart series where we will look at getting a website /
blog set up with <a href="https://jaspervdj.be/hakyll">hakyll</a> and customized a fair
bit.</p>
<ul>
<li>Pt. 1 – Setup &amp; Initial Customization</li>
<li><a href="/hakyll-pt-2-generating-a-sitemap-xml-file.html">Pt. 2 – Generating a Sitemap XML File</a></li>
<li><a href="/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html">Pt. 3 – Generating RSS and Atom XML Feeds</a></li>
<li><a href="/hakyll-pt-4-copying-static-files-for-your-build.html">Pt. 4 – Copying Static Files For Your Build</a></li>
<li><a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a></li>
<li><a href="/hakyll-pt-6-pure-builds-with-nix.html">Pt. 6 – Pure Builds With Nix</a></li>
<li><a href="/the-hakyll-nix-template-tutorial.html">The hakyll-nix-template Tutorial</a></li>
</ul>
<h2 id="overview">Overview</h2>
<ol>
<li><a href="#installation-setup">Installation &amp; Setup</a></li>
<li><a href="#configuration-rules">Configuration Rules</a></li>
<li><a href="#blog-posts">Blog Posts</a></li>
<li><a href="#working-with-templates">Working With Templates</a></li>
<li><a href="#rendering-partials">Rendering Partials</a></li>
</ol>
<h2 id="installation--setup">Installation &amp; Setup</h2>
<p>While this is detailed fully on <a href="https://jaspervdj.be/hakyll/tutorials/01-installation.html">the hakyll installation
tutorial</a>, I will
repeat it here.</p>
<ol>
<li>install <a href="https://docs.haskellstack.org/en/stable/README/">stack</a> and make
sure <code>$HOME/.local/bin</code> is included in your <code>PATH</code></li>
<li><code>λ stack install hakyll</code> – should install <code>hakyll-init</code> in <code>$HOME/.local/bin</code></li>
<li><code>λ hakyll-init ourblog.com</code></li>
<li><code>λ cd ourblog.com</code></li>
<li><code>λ stack init</code></li>
<li><code>λ stack build</code></li>
<li><code>λ stack exec site build</code></li>
<li><code>λ stack exec site rebuild</code> – to test the rebuild command</li>
<li><code>λ stack exec site watch</code> – starts dev server &amp; watches for changes</li>
<li>navigate to <a href="http://localhost:8000" class="uri">http://localhost:8000</a> to see it!</li>
</ol>
<h2 id="configuration-rules">Configuration Rules</h2>
<p>Hakyll gives you the ability to override its <a href="https://jaspervdj.be/hakyll/reference/Hakyll-Core-Configuration.html">existing configuration
rules</a> to
change anything from the output directory (default <code>_site/</code>) to deploy commands
to the host and port for previewing your site locally.</p>
<p>Here is what the default configuration looks like in hakyll (<a href="https://github.com/jaspervdj/hakyll/blob/1abdeee743d65d96c6f469213ca6e7ea823340a7/lib/Hakyll/Core/Configuration.hs#L88-L110">source</a>):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- | Default configuration for a hakyll application</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">defaultConfiguration</span> <span class="pl-ow">::</span> <span class="pl-kt">Configuration</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">defaultConfiguration</span> <span class="pl-ow">=</span> <span class="pl-kt">Configuration</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-n">destinationDirectory</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;_site&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">storeDirectory</span>       <span class="pl-ow">=</span> <span class="pl-s">&#34;_cache&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">tmpDirectory</span>         <span class="pl-ow">=</span> <span class="pl-s">&#34;_cache/tmp&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">providerDirectory</span>    <span class="pl-ow">=</span> <span class="pl-s">&#34;.&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">ignoreFile</span>           <span class="pl-ow">=</span> <span class="pl-n">ignoreFile&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">deployCommand</span>        <span class="pl-ow">=</span> <span class="pl-s">&#34;echo &#39;No deploy command specified&#39; &amp;&amp; exit 1&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">deploySite</span>           <span class="pl-ow">=</span> <span class="pl-n">system</span> <span class="pl-o">.</span> <span class="pl-n">deployCommand</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">inMemoryCache</span>        <span class="pl-ow">=</span> <span class="pl-kt">True</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">previewHost</span>          <span class="pl-ow">=</span> <span class="pl-s">&#34;127.0.0.1&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">previewPort</span>          <span class="pl-ow">=</span> <span class="pl-mi">8000</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">where</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-n">ignoreFile&#39;</span> <span class="pl-n">path</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-o">|</span> <span class="pl-s">&#34;.&#34;</span>    <span class="pl-p">`</span><span class="pl-n">isPrefixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">True</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-o">|</span> <span class="pl-s">&#34;#&#34;</span>    <span class="pl-p">`</span><span class="pl-n">isPrefixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">True</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-o">|</span> <span class="pl-s">&#34;~&#34;</span>    <span class="pl-p">`</span><span class="pl-n">isSuffixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">True</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-o">|</span> <span class="pl-s">&#34;.swp&#34;</span> <span class="pl-p">`</span><span class="pl-n">isSuffixOf</span><span class="pl-p">`</span> <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-kt">True</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-o">|</span> <span class="pl-n">otherwise</span>                    <span class="pl-ow">=</span> <span class="pl-kt">False</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-kr">where</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-n">fileName</span> <span class="pl-ow">=</span> <span class="pl-n">takeFileName</span> <span class="pl-n">path</span></span></span></code></pre>
<p>The <a href="https://jaspervdj.be/hakyll/tutorials/03-rules-routes-compilers.html">hakyll tutorial on rules, routes and
compilers</a>
makes reference to a <code>hakyllWith</code> function for customizing configuration, so
let’s see how we can use that.</p>
<p>The default hakyll <code>main</code> function in your <code>site.hs</code> file looks like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyll</span> <span class="pl-o">$</span> <span class="pl-kr">do</span></span></span></code></pre>
<p>What we can do is change <code>hakyll</code> to <code>hakyllWith</code> and pass a function that
we’ll name <code>config</code> that makes use of the <code>defaultConfiguration</code> but returns a
new, altered <a href="https://en.wikibooks.org/wiki/Haskell/More_on_datatypes#Named_Fields_.28Record_Syntax.29">record</a>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">::</span> <span class="pl-kt">IO</span> <span class="pl-nb">()</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">main</span> <span class="pl-ow">=</span> <span class="pl-n">hakyllWith</span> <span class="pl-n">config</span> <span class="pl-o">$</span> <span class="pl-kr">do</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">config</span> <span class="pl-ow">::</span> <span class="pl-kt">Configuration</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nf">config</span> <span class="pl-ow">=</span> <span class="pl-n">defaultConfiguration</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-n">destinationDirectory</span> <span class="pl-ow">=</span> <span class="pl-s">&#34;docs&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-n">previewPort</span>          <span class="pl-ow">=</span> <span class="pl-mi">5000</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span></span></span></code></pre>
<p>Whenever we make a change to <code>site.hs</code>, we need to make sure we use <code>stack</code> to
<code>build</code> it again and restart our server. We’ll also need to make sure we clean
out our old output folder with the <code>clean</code> command. So, all together now:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ stack exec site clean
</span></span><span class="pl-line"><span class="pl-cl">λ stack build
</span></span><span class="pl-line"><span class="pl-cl">λ stack exec site watch</span></span></code></pre>
<p>…and now your output will be in the <code>docs/</code> folder, and your site will be
previewable at <a href="http://localhost:5000" class="uri">http://localhost:5000</a>.</p>
<p>Now that we’ve flexed our configuration muscles a bit, let’s look at the
<code>posts/</code> folder to see what we’re working with on the blog side.</p>
<h2 id="blog-posts">Blog Posts</h2>
<p>If you open the <code>posts/</code> folder and select any preset blog post (hint: you can
see them online at
<a href="https://github.com/jaspervdj/hakyll/tree/master/data/example/posts" class="uri">https://github.com/jaspervdj/hakyll/tree/master/data/example/posts</a>; make sure
you click the “Raw” button to view the raw markdown), you’ll see a standard
markdown file containing two sets of content:
* metadata (between the <code>---</code> delimiters)
* body content (everything else)</p>
<p>From <a href="http://localhost:5000" class="uri">http://localhost:5000</a>, let’s click on the first post we see:
<a href="http://localhost:5000/posts/2015-12-07-tu-quoque.html" class="uri">http://localhost:5000/posts/2015-12-07-tu-quoque.html</a>. If we open up the
corresponding file, <code>2015-12-07-tu-quoque.html</code>, in our text editor, we can see
there are two metadata fields: <code>title</code> and <code>author</code>. Let’s change them:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">---
</span></span><span class="pl-line"><span class="pl-cl">title: Some Latin Text
</span></span><span class="pl-line"><span class="pl-cl">author: Some Roman Person
</span></span><span class="pl-line"><span class="pl-cl">---</span></span></code></pre>
<p>Refresh the page and see the changes!</p>
<p>But note that despite changing the title of your blog post, the outputted HTML
file is still located at <a href="http://localhost:5000/posts/2015-12-07-tu-quoque.html" class="uri">http://localhost:5000/posts/2015-12-07-tu-quoque.html</a>.
This is because the <em>markdown filename</em> is what currently determines the
outputted filename. We will change this in Part 5 of this series, but until
then, if you change the title of your post, it would be a good idea to also
change the filename.</p>
<p>Feel free to edit these metadata fields and markdown content with your own blog
post material.</p>
<p>Next up, we’ll see about how we can customize the templates to work with
all the metadata that we might want to include from our posts (description,
author, keywords, image, etc).</p>
<h2 id="working-with-templates">Working With Templates</h2>
<p>There is a <a href="https://jaspervdj.be/hakyll/tutorials/04-compilers.html#templates">hakyll turorial on templates, context and control
flow</a> that
you should check out. Here, we’re going to adjust the default templates to suit
our needs.</p>
<p>The HTML templates can be found in – you guessed it – the <code>templates/</code> folder.</p>
<p>The first file we will look at is <code>templates/default.html</code> (hint: this template
is also viewable online at
<a href="https://github.com/jaspervdj/hakyll/blob/master/data/example/templates/default.html" class="uri">https://github.com/jaspervdj/hakyll/blob/master/data/example/templates/default.html</a>).</p>
<p>Templates are nothing more than <code>.html</code> files but with a caveat (which you’d
know about if you read the tutorial above): there is added context – drawn from
markdown options or injected before compilation in <code>site.hs</code> – that can be
used anywhere, so long as it is between <code>$</code> (dollar signs). Here is an example
that uses the <code>title</code> property that is set in each file:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">title</span><span class="pl-p">&gt;</span>$title$<span class="pl-p">&lt;/</span><span class="pl-nt">title</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Cool! Now what if we wanted to use our <code>author</code> metadata?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">meta</span> <span class="pl-na">name</span><span class="pl-o">=</span><span class="pl-s">&#34;author&#34;</span> <span class="pl-na">content</span><span class="pl-o">=</span><span class="pl-s">&#34;$author$&#34;</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Oh no!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">Compiling
</span></span><span class="pl-line"><span class="pl-cl">  updated templates/default.html
</span></span><span class="pl-line"><span class="pl-cl">  [ERROR] Missing field $author$ in context for item about.rst</span></span></code></pre>
<p>This is because not all of our files being run through this default template
have all the same fields. We can use conditionals to solve this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$if(author)$<span class="pl-p">&lt;</span><span class="pl-nt">meta</span> <span class="pl-na">name</span><span class="pl-o">=</span><span class="pl-s">&#34;author&#34;</span> <span class="pl-na">content</span><span class="pl-o">=</span><span class="pl-s">&#34;$author$&#34;</span><span class="pl-p">&gt;</span>$endif$
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c">&lt;!-- or, if you prefer --&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">$if(author)$
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">meta</span> <span class="pl-na">name</span><span class="pl-o">=</span><span class="pl-s">&#34;author&#34;</span> <span class="pl-na">content</span><span class="pl-o">=</span><span class="pl-s">&#34;$author$&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">$endif$</span></span></code></pre>
<p>Blog posts also should have a <code>description</code> and <code>keywords</code>, so let’s add those:
to <code>posts/2015-12-07-tu-quoque.markdown</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">---
</span></span><span class="pl-line"><span class="pl-cl">title: My Blog Post
</span></span><span class="pl-line"><span class="pl-cl">description: This is my great blog post
</span></span><span class="pl-line"><span class="pl-cl">keywords: blog, first blog, best blog evar
</span></span><span class="pl-line"><span class="pl-cl">author: I did it!
</span></span><span class="pl-line"><span class="pl-cl">---</span></span></code></pre>
<p>We’ll then update our default template to handle those, as well:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">title</span><span class="pl-p">&gt;</span>$title$<span class="pl-p">&lt;/</span><span class="pl-nt">title</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">$if(author)$<span class="pl-p">&lt;</span><span class="pl-nt">meta</span> <span class="pl-na">name</span><span class="pl-o">=</span><span class="pl-s">&#34;author&#34;</span> <span class="pl-na">content</span><span class="pl-o">=</span><span class="pl-s">&#34;$author$&#34;</span><span class="pl-p">&gt;</span>$endif$
</span></span><span class="pl-line"><span class="pl-cl">$if(keywords)$<span class="pl-p">&lt;</span><span class="pl-nt">meta</span> <span class="pl-na">name</span><span class="pl-o">=</span><span class="pl-s">&#34;keywords&#34;</span> <span class="pl-na">content</span><span class="pl-o">=</span><span class="pl-s">&#34;$keywords$&#34;</span><span class="pl-p">&gt;</span>$endif$</span></span></code></pre>
<p>If you refresh <a href="http://localhost:5000/posts/2015-12-07-tu-quoque.html" class="uri">http://localhost:5000/posts/2015-12-07-tu-quoque.html</a> and open up
the web inspector, you’ll now see that the <code>&lt;head&gt;</code> now contains not only your
post’s <code>title</code>, but also all the other fields you specified!</p>
<p>There are many other possibilities for this, as well. For instance, if you
wanted to have different <code>og:type</code>s of pages, you could do:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$if(type)$
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">meta</span> <span class="pl-na">property</span><span class="pl-o">=</span><span class="pl-s">&#34;og:type&#34;</span> <span class="pl-na">content</span><span class="pl-o">=</span><span class="pl-s">&#34;$type$&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">$else$
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">meta</span> <span class="pl-na">property</span><span class="pl-o">=</span><span class="pl-s">&#34;og:type&#34;</span> <span class="pl-na">content</span><span class="pl-o">=</span><span class="pl-s">&#34;website&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">$endif$</span></span></code></pre>
<p>Check out the default template for this website here:
<a href="https://github.com/rpearce/robertwpearce.com/blob/main/src/templates/default.html" class="uri">https://github.com/rpearce/robertwpearce.com/blob/main/src/templates/default.html</a>.</p>
<h2 id="rendering-partials">Rendering Partials</h2>
<p>Lastly for today, what if we want to reuse templates and specify where they
should be rendered from other templates? Enter <a href="https://jaspervdj.be/hakyll/tutorials/04-compilers.html#partials">hakyll
partials</a>.</p>
<p>A common use of partials is for navigation across different templates. We can
add a new file, <code>templates/nav.html</code>, and place the following in it (add some
CSS classes and styling if you want it to look nice):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">nav</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;nav&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">a</span> <span class="pl-na">href</span><span class="pl-o">=</span><span class="pl-s">&#34;/&#34;</span><span class="pl-p">&gt;</span>Home<span class="pl-p">&lt;/</span><span class="pl-nt">a</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">a</span> <span class="pl-na">href</span><span class="pl-o">=</span><span class="pl-s">&#34;mailto:me@myemail.com&#34;</span><span class="pl-p">&gt;</span>Email Me<span class="pl-p">&lt;/</span><span class="pl-nt">a</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">nav</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Now, this partial can be used anywhere. For example, from
<code>templates/post.html</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">$partial(&#34;templates/nav.html&#34;)$</span></span></code></pre>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>In this lesson we learned how to get started with
<a href="https://jaspervdj.be/hakyll">hakyll</a> and learned some of the ways for us to get
started customizing it to our own needs. Next time, we’ll dive into <code>site.hs</code>
to generate our own <code>sitemap.xml</code> file.</p>
<p>Next up:</p>
<ul>
<li><a href="/hakyll-pt-2-generating-a-sitemap-xml-file.html">Pt. 2 – Generating a Sitemap XML File</a></li>
<li><a href="/hakyll-pt-3-generating-rss-and-atom-xml-feeds.html">Pt. 3 – Generating RSS and Atom XML Feeds</a></li>
<li><a href="/hakyll-pt-4-copying-static-files-for-your-build.html">Pt. 4 – Copying Static Files For Your Build</a></li>
<li><a href="/hakyll-pt-5-generating-custom-post-filenames-from-a-title-slug.html">Pt. 5 – Generating Custom Post Filenames From a Title Slug</a></li>
<li><em>(wip) Pt. 6 – Customizing Markdown Compiler Options</em></li>
</ul>
<hr />
<p>Until next time,
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Ramda Chops: Map, Filter &amp; Reduce</title>
    <link href="https://robertwpearce.com/ramda-chops-map-filter-reduce.html" />
    <id>https://robertwpearce.com/ramda-chops-map-filter-reduce.html</id>
    <published>2018-02-08T00:00:00Z</published>
    <updated>2018-02-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>Thanks to <a href="https://github.com/jsilve">Jillian Silver</a>, <a href="https://patrickweakin.com">Patrick
Eakin</a> and <a href="https://twitter.com/zerkms">@zerkms</a> for
their review of this post.</em></p>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><code>map</code></a>,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><code>filter</code></a>
and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"><code>reduce</code></a>
methods on <code>Array.prototype</code> are essential to adopting a functional programming
style in JavaScript, and in this post we’re going to examine how to use these
three concepts with <a href="http://ramdajs.com/">ramda.js</a>.</p>
<p>If you are unfamiliar with these three concepts, then be sure to first read the
MDN documentation on each (linked above).</p>
<hr />
<p><em>Pre-requisite ramda posts:</em></p>
<ul>
<li><a href="/ramda-chops-function-currying.html">Ramda Chops: Function Currying</a></li>
<li><a href="/ramda-chops-function-composition.html">Ramda Chops: Function Composition</a></li>
</ul>
<p><em>Other ramda posts:</em></p>
<ul>
<li><a href="/ramda-chops-safely-accessing-properties.html">Ramda Chops: Safely Accessing Properties</a></li>
</ul>
<h2 id="our-data-set-films">Our Data Set: Films!</h2>
<p>This is the test data set we will reference throughout the post:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">films</span> <span class="pl-o">=</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-s1">&#39;The Empire Strikes Back&#39;</span><span class="pl-p">,</span> <span class="pl-nx">rating</span><span class="pl-o">:</span> <span class="pl-mf">8.8</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-s1">&#39;Pulp Fiction&#39;</span><span class="pl-p">,</span> <span class="pl-nx">rating</span><span class="pl-o">:</span> <span class="pl-mf">8.9</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-s1">&#39;The Deer Hunter&#39;</span><span class="pl-p">,</span> <span class="pl-nx">rating</span><span class="pl-o">:</span> <span class="pl-mf">8.2</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-s1">&#39;The Lion King&#39;</span><span class="pl-p">,</span> <span class="pl-nx">rating</span><span class="pl-o">:</span> <span class="pl-mf">8.5</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">]</span></span></span></code></pre>
<h2 id="our-goal">Our Goal</h2>
<p>There are a few conditions that are required for us to meet our goal. We must
construct a function that:
* only selects those with an 8.8 rating or higher
* returns a list of the selected titles interpolated in an HTML string that
has this structure:
<code>html   &lt;div&gt;TITLE: &lt;strong&gt;SCORE&lt;/strong&gt;&lt;/div&gt;</code></p>
<p>Given these requirements, a pseudotype signature for this might be:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// `output` takes in a list of films
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// and returns a list of HTML strings
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// output :: [Film] -&gt; [Html]
</span></span></span></code></pre>
<h2 id="step-1-get-the-html-part-working">Step 1: Get the HTML Part Working</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">film</span> <span class="pl-p">=&gt;</span> <span class="pl-sb">`&lt;div&gt;</span><span class="pl-si">${</span><span class="pl-nx">film</span><span class="pl-p">.</span><span class="pl-nx">title</span><span class="pl-si">}</span><span class="pl-sb">, &lt;strong&gt;</span><span class="pl-si">${</span><span class="pl-nx">film</span><span class="pl-p">.</span><span class="pl-nx">rating</span><span class="pl-si">}</span><span class="pl-sb">&lt;/strong&gt;&lt;/div&gt;`</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// =&gt; [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//      &#34;&lt;div&gt;The Empire Strikes Back, &lt;strong&gt;8.8&lt;/strong&gt;&lt;/div&gt;&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//      &#34;&lt;div&gt;Pulp Fiction, &lt;strong&gt;8.9&lt;/strong&gt;&lt;/div&gt;&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//      &#34;&lt;div&gt;The Deer Hunter, &lt;strong&gt;8.2&lt;/strong&gt;&lt;/div&gt;&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//      &#34;&lt;div&gt;The Lion King, &lt;strong&gt;8.5&lt;/strong&gt;&lt;/div&gt;&#34;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    ]
</span></span></span></code></pre>
<p><em><a href="https://goo.gl/mQmFBm">Try this code in the ramda REPL</a></em></p>
<h2 id="step-2-extract-the-map-callback">Step 2: Extract the <code>map</code> Callback</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// filmHtml :: Film -&gt; Html
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">filmHtml</span> <span class="pl-o">=</span> <span class="pl-nx">film</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-sb">`&lt;div&gt;</span><span class="pl-si">${</span><span class="pl-nx">film</span><span class="pl-p">.</span><span class="pl-nx">title</span><span class="pl-si">}</span><span class="pl-sb">, &lt;strong&gt;</span><span class="pl-si">${</span><span class="pl-nx">film</span><span class="pl-p">.</span><span class="pl-nx">rating</span><span class="pl-si">}</span><span class="pl-sb">&lt;/strong&gt;&lt;/div&gt;`</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">filmHtml</span><span class="pl-p">)</span></span></span></code></pre>
<p><em><a href="https://goo.gl/C4a1kZ">Try this code in the ramda REPL</a></em></p>
<h2 id="step-3-filter-out-lower-scores">Step 3: <code>filter</code> Out Lower Scores</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">.</span><span class="pl-nx">filter</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">rating</span> <span class="pl-o">&gt;=</span> <span class="pl-mf">8.8</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">filmHtml</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// =&gt; [
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//      &#34;&lt;div&gt;The Empire Strikes Back, &lt;strong&gt;8.8&lt;/strong&gt;&lt;/div&gt;&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//      &#34;&lt;div&gt;Pulp Fiction, &lt;strong&gt;8.9&lt;/strong&gt;&lt;/div&gt;&#34;,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    ]
</span></span></span></code></pre>
<p><em><a href="https://goo.gl/yTxfKQ">Try this code in the ramda REPL</a></em></p>
<p>But wait! We can extract that <code>filter</code> callback, as well:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// hasHighScore :: Film -&gt; Bool
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">hasHighScore</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">rating</span> <span class="pl-o">&gt;=</span> <span class="pl-mf">8.8</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">.</span><span class="pl-nx">filter</span><span class="pl-p">(</span><span class="pl-nx">hasHighScore</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">filmHtml</span><span class="pl-p">)</span></span></span></code></pre>
<p><em><a href="https://goo.gl/qG4kZ7">Try this code in the ramda REPL</a></em></p>
<h2 id="step-4-composing-filter-and-map">Step 4: Composing <code>filter</code> and <code>map</code></h2>
<p>We can use ramda’s <a href="/ramda-chops-function-currying.html">function currying
capabilities</a> and <a href="/ramda-chops-function-composition.html">function
composition</a> to create some very
clear and concise <a href="https://wiki.haskell.org/Pointfree">pointfree functions</a>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">compose</span><span class="pl-p">,</span> <span class="pl-nx">filter</span><span class="pl-p">,</span> <span class="pl-nx">map</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// output :: [Film] -&gt; [Html]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">output</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">filmHtml</span><span class="pl-p">),</span> <span class="pl-nx">filter</span><span class="pl-p">(</span><span class="pl-nx">hasHighScore</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">output</span><span class="pl-p">(</span><span class="pl-nx">films</span><span class="pl-p">)</span></span></span></code></pre>
<p><em><a href="https://goo.gl/7VMNTV">Try this code in the ramda REPL</a></em></p>
<p>One thing to remember with ramda functions (like <code>map</code> and <code>filter</code>) is that
ramda typically orders arguments from least likely to change to most likely to
change. Callback/transformation functions here are passed as the <em>first</em>
argument, and the data comes last. To understand this further, check out the
following links:</p>
<ul>
<li><a href="http://ramdajs.com/docs/#map">ramda’s documentation for <code>map</code></a></li>
<li><a href="http://ramdajs.com/docs/#filter">ramda’s documentation for <code>filter</code></a></li>
</ul>
<h2 id="step-5-extracting-the-composition-further">Step 5: Extracting The Composition Further</h2>
<p>If we want to not only reuse our filtering and mapping functions but also make
them more readable, we can pull out the pieces that make up our <code>output</code>
function into smaller bits:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// filmsToHtml :: [Film] -&gt; [Html]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">filmsToHtml</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">filmHtml</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// highScores :: [Film] -&gt; [Film]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">highScores</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">filter</span><span class="pl-p">(</span><span class="pl-nx">hasHighScore</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// output :: [Film] -&gt; [Html]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">output</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">filmsToHtml</span><span class="pl-p">,</span> <span class="pl-nx">highScores</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">output</span><span class="pl-p">(</span><span class="pl-nx">films</span><span class="pl-p">)</span></span></span></code></pre>
<p><em><a href="https://goo.gl/dFXCEK">Try this code in the ramda REPL</a></em></p>
<h2 id="step-6-another-way-with-reduce">Step 6: Another Way With <code>reduce</code></h2>
<p>We can accomplish the same goals as <code>filter</code> and <code>map</code> by making use of
<code>reduce</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">reduce</span><span class="pl-p">((</span><span class="pl-nx">acc</span><span class="pl-p">,</span> <span class="pl-nx">x</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">hasHighScore</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">?</span> <span class="pl-nx">acc</span><span class="pl-p">.</span><span class="pl-nx">concat</span><span class="pl-p">(</span><span class="pl-nx">filmHtml</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">:</span> <span class="pl-nx">acc</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">},</span> <span class="pl-p">[])</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// or, for better performance
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">reduce</span><span class="pl-p">((</span><span class="pl-nx">acc</span><span class="pl-p">,</span> <span class="pl-nx">x</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">hasHighScore</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">acc</span><span class="pl-p">.</span><span class="pl-nx">push</span><span class="pl-p">(</span><span class="pl-nx">filmHtml</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">acc</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">},</span> <span class="pl-p">[])</span></span></span></code></pre>
<p><em><a href="https://goo.gl/b86Kdq">Try this code in the ramda REPL</a></em></p>
<p>If you’re not familiar with reduce, be sure to play with the live example to
better understand how those pieces work before moving on.</p>
<p>It’s also worth noting that you can do just about <em>anything</em> in JavaScript with
the <code>reduce</code> function. I highly recommend going through <a href="https://twitter.com/kylehill">Kyle Hill</a>’s
slides on <a href="https://omnifunction.herokuapp.com">reduce Is The Omnifunction</a>.</p>
<p>But wait! We can extract the <code>reduce</code> callback like we did with <code>map</code> and
<code>filter</code> before:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// highScoresHtml :: ([Html], Film) -&gt; [Html]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">highScoresHtml</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">acc</span><span class="pl-p">,</span> <span class="pl-nx">x</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">hasHighScore</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">?</span> <span class="pl-nx">acc</span><span class="pl-p">.</span><span class="pl-nx">concat</span><span class="pl-p">(</span><span class="pl-nx">filmHtml</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">:</span> <span class="pl-nx">acc</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">films</span><span class="pl-p">.</span><span class="pl-nx">reduce</span><span class="pl-p">(</span><span class="pl-nx">highScoresHtml</span><span class="pl-p">,</span> <span class="pl-p">[])</span></span></span></code></pre>
<p><em><a href="https://goo.gl/F6NovJ">Try this code in the ramda REPL</a></em></p>
<h2 id="step-7-making-our-reduce-arguments-reusable">Step 7: Making Our Reduce Arguments Reusable</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-p">{</span> <span class="pl-nx">reduce</span> <span class="pl-p">}</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">output</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">reduce</span><span class="pl-p">(</span><span class="pl-nx">highScoresHtml</span><span class="pl-p">,</span> <span class="pl-p">[])</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">output</span><span class="pl-p">(</span><span class="pl-nx">films</span><span class="pl-p">)</span></span></span></code></pre>
<p><em><a href="https://goo.gl/wjbAFY">Try this code in the ramda REPL</a></em></p>
<p>As before with <code>map</code> &amp; <code>filter</code>, <code>output</code> can be reused over and over again and
passed any set of films to generate HTML for. To further understand the
parameter order used here, check out the <a href="http://ramdajs.com/docs/#reduce">docs for ramda’s
<code>reduce</code></a>.</p>
<hr />
<p>This step-by-step process we’ve walked through is as close to real-life
refactoring/rethinking as I could do in a post. Thanks for making it this far.</p>
<p>Until next time,
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Ramda Chops: Safely Accessing Properties</title>
    <link href="https://robertwpearce.com/ramda-chops-safely-accessing-properties.html" />
    <id>https://robertwpearce.com/ramda-chops-safely-accessing-properties.html</id>
    <published>2018-01-31T00:00:00Z</published>
    <updated>2018-01-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>Thanks to <a href="https://twitter.com/joshsloat">@joshsloat</a> and
<a href="https://twitter.com/zerkms">@zerkms</a> for their review of this post.</em></p>
<p>One of the most prevalent causes of bugs I’ve seen in latter-day JavaScript
revolves around expectations with regard to data modeling. With the rise of
<a href="https://reactjs.org/">react</a>, <a href="https://redux.js.org/">redux</a>, et al, many of us
store our application state in an object whose keys and hierarchy can easily
change, leaving us sometimes with or without values that were in fact expected:
for example, <code>undefined is not a function</code> or trying to call <code>.map(...)</code> on a
non-mappable data type (such as <code>null</code> or <code>undefined</code>). While there are any
number of solutions for this issue that might even include diving into algebraic
data types, the <a href="http://ramdajs.com">ramda library</a> gives us a few
helper methods that we can use right away to dig into our data structures and
extract values:</p>
<ul>
<li><a href="http://ramdajs.com/docs/#prop"><code>prop</code></a></li>
<li><a href="http://ramdajs.com/docs/#propOr"><code>propOr</code></a></li>
<li><a href="http://ramdajs.com/docs/#path"><code>path</code></a></li>
<li><a href="http://ramdajs.com/docs/#pathOr"><code>pathOr</code></a></li>
</ul>
<hr />
<p><em>Other ramda posts:</em></p>
<ul>
<li><a href="/ramda-chops-function-currying.html">Ramda Chops: Function Currying</a></li>
<li><a href="/ramda-chops-function-composition.html">Ramda Chops: Function Composition</a></li>
<li><a href="/ramda-chops-map-filter-and-reduce.html">Ramda Chops: Map, Filter &amp; Reduce</a></li>
</ul>
<h2 id="prop--propor"><code>prop</code> &amp; <code>propOr</code></h2>
<p>What happens normally if you expect an array, try to access the third item
(index position 2), but are actually provided <code>undefined</code> instead of an array?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">arr</span> <span class="pl-o">=</span> <span class="pl-kc">undefined</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">arr</span><span class="pl-p">[</span><span class="pl-mi">2</span><span class="pl-p">]</span> <span class="pl-c1">// TypeError is thrown
</span></span></span></code></pre>
<p>What happens if you try to access the <code>length</code> property on what you think should
be an array but ends up being <code>null</code> or <code>undefined</code>?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">arr</span> <span class="pl-o">=</span> <span class="pl-kc">null</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">arr</span><span class="pl-p">.</span><span class="pl-nx">length</span> <span class="pl-c1">// TypeError is thrown
</span></span></span></code></pre>
<p>One solution is to do the “value or default” approach to keep the errors at bay:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">arr</span> <span class="pl-o">=</span> <span class="pl-kc">undefined</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">xs</span> <span class="pl-o">=</span> <span class="pl-nx">arr</span> <span class="pl-o">||</span> <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">xs</span><span class="pl-p">[</span><span class="pl-mi">2</span><span class="pl-p">]</span> <span class="pl-c1">// undefined
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">xs</span><span class="pl-p">.</span><span class="pl-nx">length</span> <span class="pl-c1">// 0
</span></span></span></code></pre>
<p>An approach we could take to avoid the errors being thrown would be to use
ramda’s <a href="http://ramdajs.com/docs/#prop"><code>prop</code></a> helper:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">prop</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda/src/prop&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">arr</span> <span class="pl-o">=</span> <span class="pl-kc">undefined</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-nx">arr</span><span class="pl-p">)</span> <span class="pl-c1">// undefined
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;length&#39;</span><span class="pl-p">,</span> <span class="pl-nx">arr</span><span class="pl-p">)</span> <span class="pl-c1">// undefined
</span></span></span></code></pre>
<p><em>Ramda’s <a href="http://ramdajs.com/docs/#length"><code>length</code></a> function would accomplish
a similar goal for <code>prop('length')</code>.</em></p>
<p>But if we want a default to be returned in lieu of our data not being present,
we can turn to <a href="http://ramdajs.com/docs/#propOr"><code>propOr</code></a>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">propOr</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda/src/propOr&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">arr</span> <span class="pl-o">=</span> <span class="pl-kc">undefined</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">propOr</span><span class="pl-p">({},</span> <span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-nx">arr</span><span class="pl-p">)</span> <span class="pl-c1">// {}
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">propOr</span><span class="pl-p">(</span><span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-s1">&#39;length&#39;</span><span class="pl-p">,</span> <span class="pl-nx">arr</span><span class="pl-p">)</span> <span class="pl-c1">// 0
</span></span></span></code></pre>
<p>If you need to select multiple properties without fear, then the
<a href="http://ramdajs.com/docs/#props"><code>props</code></a> or
<a href="http://ramdajs.com/docs/#pick"><code>pick</code></a> functions may be for you.</p>
<h2 id="path--pathor"><code>path</code> &amp; <code>pathOr</code></h2>
<p>What if we are working in a deeply nested data structure where multiple keys in
our hierarchy may or may not exist? Enter <a href="http://ramdajs.com/docs/#path"><code>path</code></a>
and <a href="http://ramdajs.com/docs/#pathOr"><code>pathOr</code></a>. These work similarly to <code>prop</code>
and <code>propOr</code> except that they use an array syntax to dive into data structures
and ultimately check for a <em>value</em>, whereas the <code>prop</code> family checks for a
property’s presence.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">path</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda/src/path&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">data</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">courses</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">abc123</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-s1">&#39;How To Build a Tiny House&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">dueAt</span><span class="pl-o">:</span> <span class="pl-s1">&#39;2018-01-30&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// getCourseTitle :: String -&gt; String | undefined
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getCourseTitle</span> <span class="pl-o">=</span> <span class="pl-nx">courseId</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">path</span><span class="pl-p">([</span><span class="pl-s1">&#39;courses&#39;</span><span class="pl-p">,</span> <span class="pl-nx">courseId</span><span class="pl-p">,</span> <span class="pl-s1">&#39;title&#39;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getCourseTitle</span><span class="pl-p">(</span><span class="pl-s1">&#39;abc123&#39;</span><span class="pl-p">)(</span><span class="pl-nx">data</span><span class="pl-p">)</span> <span class="pl-c1">// &#34;How To Build a Tiny House&#34;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">getCourseTitle</span><span class="pl-p">(</span><span class="pl-s1">&#39;def456&#39;</span><span class="pl-p">)(</span><span class="pl-nx">data</span><span class="pl-p">)</span> <span class="pl-c1">// undefined
</span></span></span></code></pre>
<p><em><a href="https://goo.gl/fdujHu">Try this code in the ramda REPL</a></em></p>
<p>Or if we’d always like to default to a value, we can use <code>pathOr</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">pathOr</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda/src/path&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">data</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">courses</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">abc123</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">title</span><span class="pl-o">:</span> <span class="pl-s1">&#39;How To Build a Tiny House&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">dueAt</span><span class="pl-o">:</span> <span class="pl-s1">&#39;2018-01-30&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// getCourseTitle :: String -&gt; String
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getCourseTitle</span> <span class="pl-o">=</span> <span class="pl-nx">courseId</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">pathOr</span><span class="pl-p">(</span><span class="pl-s1">&#39;My Course&#39;</span><span class="pl-p">,</span> <span class="pl-p">[</span><span class="pl-s1">&#39;courses&#39;</span><span class="pl-p">,</span> <span class="pl-nx">courseId</span><span class="pl-p">,</span> <span class="pl-s1">&#39;title&#39;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getCourseTitle</span><span class="pl-p">(</span><span class="pl-s1">&#39;abc123&#39;</span><span class="pl-p">)(</span><span class="pl-nx">data</span><span class="pl-p">)</span> <span class="pl-c1">// &#34;How To Build a Tiny House&#34;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">getCourseTitle</span><span class="pl-p">(</span><span class="pl-s1">&#39;def456&#39;</span><span class="pl-p">)(</span><span class="pl-nx">data</span><span class="pl-p">)</span> <span class="pl-c1">// &#34;My Course&#34;
</span></span></span></code></pre>
<p><em><a href="https://goo.gl/PXD1ju">Try this code in the ramda REPL</a></em></p>
<hr />
<p>As I said before, there are <em>many</em> different ways to solve this problem, but
I’ve found the <code>propOr</code> and <code>pathOr</code> family of ramda functions to be a great
starting point.</p>
<p>Until next time,
<br />
Robert</p>]]></summary>
</entry>
<entry>
    <title>Ramda Chops: Function Composition</title>
    <link href="https://robertwpearce.com/ramda-chops-function-composition.html" />
    <id>https://robertwpearce.com/ramda-chops-function-composition.html</id>
    <published>2018-01-26T00:00:00Z</published>
    <updated>2023-02-12T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>Thanks to <a href="https://twitter.com/evilsoft">@evilsoft</a> and
<a href="https://twitter.com/zerkms">@zerkms</a> for their review of this post.</em></p>
<p><em>Composition</em> is defined as “the combining of distinct parts or elements to
form a whole.” <sup><a href="https://www.wordnik.com/words/composition">source</a></sup>
If we apply this thinking to functions in programming, then <em>function
composition</em> can be seen as the combining of functions to form a new function
that is <em>composed</em> of said functions. Now that that word salad is over, let’s
get to work.</p>
<p>We have a task, and our task is to write a function that
1. accepts a list of objects containing <code>score</code> (<code>Number</code>) and <code>name</code> (<code>String</code>)
properties
1. returns the top 3 scorers’ names from highest to lowest</p>
<p>Here are the unordered results that we have to work with:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">results</span> <span class="pl-o">=</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mi">40</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-o">:</span> <span class="pl-s1">&#39;Aragorn&#39;</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mi">99</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-o">:</span> <span class="pl-s1">&#39;Bilbo&#39;</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mi">63</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-o">:</span> <span class="pl-s1">&#39;Celeborn&#39;</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mi">77</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-o">:</span> <span class="pl-s1">&#39;Denethor&#39;</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mi">100</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-o">:</span> <span class="pl-s1">&#39;Eowin&#39;</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">{</span> <span class="pl-nx">score</span><span class="pl-o">:</span> <span class="pl-mi">94</span><span class="pl-p">,</span> <span class="pl-nx">name</span><span class="pl-o">:</span> <span class="pl-s1">&#39;Frodo&#39;</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">]</span></span></span></code></pre>
<hr />
<p><em>Other ramda posts:</em></p>
<ul>
<li><a href="/ramda-chops-function-currying.html">Ramda Chops: Function Currying</a></li>
<li><a href="/ramda-chops-safely-accessing-properties.html">Ramda Chops: Safely Accessing Properties</a></li>
<li><a href="/ramda-chops-map-filter-and-reduce.html">Ramda Chops: Map, Filter &amp; Reduce</a></li>
</ul>
<h2 id="first-approach">First Approach</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// getHighScorers :: [Object] -&gt; [String]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getHighScorers</span> <span class="pl-o">=</span> <span class="pl-nx">xs</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">[...</span><span class="pl-nx">xs</span><span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">.</span><span class="pl-nx">sort</span><span class="pl-p">((</span><span class="pl-nx">a</span><span class="pl-p">,</span> <span class="pl-nx">b</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">b</span><span class="pl-p">.</span><span class="pl-nx">score</span> <span class="pl-o">-</span> <span class="pl-nx">a</span><span class="pl-p">.</span><span class="pl-nx">score</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">.</span><span class="pl-nx">slice</span><span class="pl-p">(</span><span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-mi">3</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">.</span><span class="pl-nx">name</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getHighScorers</span><span class="pl-p">(</span><span class="pl-nx">results</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; [ &#39;Eowin&#39;, &#39;Bilbo&#39;, &#39;Frodo&#39; ]
</span></span></span></code></pre>
<p>As cautious JavaScript developers, we know to reach for our functions and
methods that don’t mutate the objects we’re receiving. We use a <em>copy</em> of the
original list and chain together operations that <code>sort</code>, <code>slice</code> and <code>map</code> the
return values of each operation until we arrive at <code>[ 'Eowin', 'Bilbo', 'Frodo' ]</code>.
Many folks would stop here, write a few unit tests and be done with it. We, on
the other hand, will take this to the next level.</p>
<h2 id="extracting-reusable-functions">Extracting Reusable Functions</h2>
<p>Our <code>getHighScorers</code> function has some functionality that we may want to use
elsewhere in the future. Let’s break down what we might be able to extract:</p>
<ul>
<li>a <em>sort by some prop in descending order</em> function (from <code>sort</code>)</li>
<li>a <em>take n items</em> function (from <code>slice</code>)</li>
<li>a <em>map prop</em> function (from <code>map</code>)</li>
</ul>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Altered slightly to allows us to compare
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// things like strings and numbers.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// descBy :: (String, [a]) -&gt; [a]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">descBy</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">prop</span><span class="pl-p">,</span> <span class="pl-nx">xs</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">[...</span><span class="pl-nx">xs</span><span class="pl-p">].</span><span class="pl-nx">sort</span><span class="pl-p">((</span><span class="pl-nx">a</span><span class="pl-p">,</span> <span class="pl-nx">b</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">a</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">]</span> <span class="pl-o">&lt;</span> <span class="pl-nx">b</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">]</span> <span class="pl-o">?</span> <span class="pl-mi">1</span> <span class="pl-o">:</span> <span class="pl-p">(</span><span class="pl-nx">a</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">]</span> <span class="pl-o">===</span> <span class="pl-nx">b</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">]</span> <span class="pl-o">?</span> <span class="pl-mi">0</span> <span class="pl-o">:</span> <span class="pl-o">-</span><span class="pl-mi">1</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// takeN :: (Number, [a]) -&gt; [a]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">takeN</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">n</span><span class="pl-p">,</span> <span class="pl-nx">xs</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">xs</span><span class="pl-p">.</span><span class="pl-nx">slice</span><span class="pl-p">(</span><span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-nx">n</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapProp :: (String, [a]) -&gt; [b]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapProp</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">prop</span><span class="pl-p">,</span> <span class="pl-nx">xs</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">xs</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// 1. pass `score` and `xs` to `descBy`
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// 2. pass the return value of `descBy`
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    to `takeN(3, __)`
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// 3. pass the return value of `takeN`
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    to `mapProp(&#39;name&#39;, __)` where we map over
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//    the list and pull out each one&#39;s `name`
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// getHighScorers :: [Object] -&gt; [String]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getHighScorers</span> <span class="pl-o">=</span> <span class="pl-nx">xs</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">,</span> <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">,</span> <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">,</span> <span class="pl-nx">xs</span><span class="pl-p">)))</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// results object here...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getHighScorers</span><span class="pl-p">(</span><span class="pl-nx">results</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; [ &#39;Eowin&#39;, &#39;Bilbo&#39;, &#39;Frodo&#39; ]
</span></span></span></code></pre>
<p><em><a href="https://goo.gl/9XsTQx">Try this code in the ramda REPL.</a></em></p>
<p>This is starting to look good, but that <code>getHighScorers</code> function is looking a
bit dense. Since we have a seeming pipeline of transformations that we’re
applying to a list, wouldn’t it be great if we could simply list these
transformations in a “flat” way (instead of a “nested” way like we do above) and
then pass the data to this list of transformations?</p>
<h2 id="enter-compose">Enter <code>compose</code></h2>
<p>Let’s take our <code>getHighScorers</code> function and rewrite it using <a href="http://ramdajs.com/docs/#compose">ramda’s compose
function</a>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">compose</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda/src/compose&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// const getHighScorers = xs =&gt;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   mapProp(&#39;name&#39;, takeN(3, descBy(&#39;score&#39;, xs)))
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// getHighScorers :: [Object] -&gt; [String]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getHighScorers</span> <span class="pl-o">=</span> <span class="pl-nx">xs</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">),</span> <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span> <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">))(</span><span class="pl-nx">xs</span><span class="pl-p">)</span></span></span></code></pre>
<p>Let’s first clarify what <code>compose</code> is doing:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">f</span><span class="pl-p">,</span> <span class="pl-nx">g</span><span class="pl-p">)(</span><span class="pl-nx">x</span><span class="pl-p">)</span> <span class="pl-o">===</span> <span class="pl-nx">f</span><span class="pl-p">(</span><span class="pl-nx">g</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">))</span></span></span></code></pre>
<p>Say it aloud: “f after g.” With <code>compose</code>, the function furthest to the <em>right</em>
is applied first with the value (<code>x</code>), and the return value of that function is
passed to the next function to its <em>left</em>, and repeat this until all functions
have been applied.</p>
<p>Cool – but wait! How can <code>descBy</code>, <code>takeN</code> and <code>mapProp</code> only accept one
argument at a time when they all accept two?! In order to make these a reality,
we can make use of <a href="http://ramdajs.com/docs/#curry">ramda’s curry function</a>
which we dove into in my <a href="/ramda-chops-function-currying.html%5D">previous post on function currying</a>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">compose</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda/src/compose&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">curry</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda/src/curry&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// descBy :: String -&gt; [a] -&gt; [a]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">descBy</span> <span class="pl-o">=</span> <span class="pl-nx">curry</span><span class="pl-p">((</span><span class="pl-nx">prop</span><span class="pl-p">,</span> <span class="pl-nx">xs</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">[...</span><span class="pl-nx">xs</span><span class="pl-p">].</span><span class="pl-nx">sort</span><span class="pl-p">((</span><span class="pl-nx">a</span><span class="pl-p">,</span> <span class="pl-nx">b</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">a</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">]</span> <span class="pl-o">&lt;</span> <span class="pl-nx">b</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">]</span> <span class="pl-o">?</span> <span class="pl-mi">1</span> <span class="pl-o">:</span> <span class="pl-p">(</span><span class="pl-nx">a</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">]</span> <span class="pl-o">===</span> <span class="pl-nx">b</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">]</span> <span class="pl-o">?</span> <span class="pl-mi">0</span> <span class="pl-o">:</span> <span class="pl-o">-</span><span class="pl-mi">1</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// takeN :: Number -&gt; [a] -&gt; [a]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">takeN</span> <span class="pl-o">=</span> <span class="pl-nx">curry</span><span class="pl-p">((</span><span class="pl-nx">n</span><span class="pl-p">,</span> <span class="pl-nx">xs</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">xs</span><span class="pl-p">.</span><span class="pl-nx">slice</span><span class="pl-p">(</span><span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-nx">n</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// mapProp :: String -&gt; [a] -&gt; [b]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">mapProp</span> <span class="pl-o">=</span> <span class="pl-nx">curry</span><span class="pl-p">((</span><span class="pl-nx">prop</span><span class="pl-p">,</span> <span class="pl-nx">xs</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">xs</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">[</span><span class="pl-nx">prop</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// getHighScorers :: [Object] -&gt; [String]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getHighScorers</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">),</span> <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span> <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">))</span></span></span></code></pre>
<p><em><a href="https://goo.gl/NxEFhi">Try this code in the ramda REPL.</a></em></p>
<p>You may also notice that we removed <code>xs =&gt;</code> from <code>getHighScorers</code> because when
we use compose and pass the final argument in at the end, it in fact becomes
redundant. Our composition sits and waits for either the data to be applied or
for it to be used another way: more compositions! This leads us down a
powerful path whereby we can now compose different functions together and
combine them into a final composition.</p>
<h2 id="composing-a-composition">Composing a Composition</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// getTop3 :: [a] -&gt; [a]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getTop3</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span> <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// getHighScorers :: [Object] -&gt; [String]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getHighScorers</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">),</span> <span class="pl-nx">getTop3</span><span class="pl-p">)</span></span></span></code></pre>
<p><em><a href="https://goo.gl/jRoCWZ">Try this code in the ramda REPL.</a></em></p>
<p>This is where we truly begin to see the power of <code>compose</code>, for we are able to
break our functions or function compositions out into tiny little pieces that we
chain together like water pipes or guitar pedals.</p>
<figure>
  <img
    alt="Guitar pedals lined up side-by-side"
    decoding="async"
    height="800"
    loading="lazy"
    src="./images/rcfc-guitar-pedals.webp"
    width="600"
  />
  <figcaption>
    _Guitar pedals by [Henrik Hjortshøj](https://unsplash.com/@hfranke)_
  </figcaption>
</figure>
<p>We are now empowered (nay – encouraged!) to provide meaningful names in the
context of what we’re trying to accomplish.</p>
<p>Composing compositions also allows us to use our type signatures to tell a story
about what behavior is expected with each little part on our path to the
ultimate goal.</p>
<h2 id="pipe-vs-compose"><code>pipe</code> vs <code>compose</code></h2>
<p>For various reasons that are usally a matter of opinion, many people prefer
function application to flow from <em>left to right</em> instead of <em>right to left</em>
(the latter being what you get with <code>compose</code>). So if you find yourself thinking
the same thing, <a href="http://ramdajs.com/docs/#pipe">pipe</a> is for you:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//      &lt;-------------   &lt;------   &lt;-------------
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">),</span> <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span> <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">))(</span><span class="pl-nx">xs</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// versus
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//   --------------&gt;  -------&gt;  --------------&gt;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">pipe</span><span class="pl-p">(</span><span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">),</span> <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span> <span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">))(</span><span class="pl-nx">xs</span><span class="pl-p">)</span></span></span></code></pre>
<h2 id="composing-promises">Composing Promises</h2>
<p>There’s really nothing to it! Instead of <code>compose</code> or <code>pipe</code>, use
<a href="http://ramdajs.com/docs/#composeP">composeP</a> or
<a href="http://ramdajs.com/docs/#pipeP">pipeP</a>.</p>
<h2 id="debugging">Debugging</h2>
<p>Once you adopt this pattern, you may find it initially difficult to inspect your
data at a given point in the pipeline; however, here’s a tip that will solve
most of your problems:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">compose</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-p">(</span><span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">log</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">),</span> <span class="pl-nx">x</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// or
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">logIt</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-p">(</span><span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">log</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">),</span> <span class="pl-nx">x</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">compose</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">mapProp</span><span class="pl-p">(</span><span class="pl-s1">&#39;name&#39;</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">logIt</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">takeN</span><span class="pl-p">(</span><span class="pl-mi">3</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">descBy</span><span class="pl-p">(</span><span class="pl-s1">&#39;score&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span></span></span></code></pre>
<p>This logs whatever the value in the pipeline is at that time and returns that
value to pass it on just as it would have.</p>
<hr />
<p>Thanks for reading! Until next time,
<br>
Robert</p>]]></summary>
</entry>
<entry>
    <title>Ramda Chops: Function Currying</title>
    <link href="https://robertwpearce.com/ramda-chops-function-currying.html" />
    <id>https://robertwpearce.com/ramda-chops-function-currying.html</id>
    <published>2018-01-23T00:00:00Z</published>
    <updated>2018-01-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>Thanks to <a href="https://github.com/jsilve">Jillian Silver</a> and
<a href="https://twitter.com/evilsoft">@evilsoft</a> for their review of this post.</em></p>
<p>Functional Programming concepts have been pouring into the JavaScript community
for a number of years now, and many of us struggle to keep up. I’ve been lucky
enough to be able to work with some mentors and functional tools that have
helped me along the way. One of these tools is <a href="http://ramdajs.com">ramda.js</a>,
and it was my gateway to the larger Functional Programming world. I hope it will
be for you, as well.</p>
<p>To understand ramda, you first have to understand a concept known as “currying.”
The ramda website states,</p>
<blockquote>
<p>The parameters to Ramda functions are arranged to make it convenient for
currying.</p>
</blockquote>
<p>There are some function currying articles on
the ramda site, such as <a href="http://fr.umio.us/favoring-curry/">Favoring Curry</a> and
<a href="https://hughfdjackson.com/javascript/why-curry-helps/">Why Curry Helps</a> by
Scott Sauyet, which are great for explaining the benefits and power of currying.
Those articles (and many other resources) do great jobs of explaining how to use
currying and why, so I’ll briefly touch on those points, but I really want to
focus on how it works under the hood and how this funny little concept will
completely change the way that you program.</p>
<hr />
<p><em>Other ramda posts:</em></p>
<ul>
<li><a href="/ramda-chops-function-composition.html">Ramda Chops: Function Composition</a></li>
<li><a href="/ramda-chops-safely-accessing-properties.html">Ramda Chops: Safely Accessing Properties</a></li>
<li><a href="/ramda-chops-map-filter-and-reduce.html">Ramda Chops: Map, Filter &amp; Reduce</a></li>
</ul>
<h2 id="rudimentary-currying">Rudimentary Currying</h2>
<p>Many articles already cover this, so I’ll keep it short.</p>
<p>Let’s start with a function that takes two numbers and adds them together:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// add :: (Number, Number) -&gt; Number
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">add</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">a</span><span class="pl-p">,</span> <span class="pl-nx">b</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">a</span> <span class="pl-o">+</span> <span class="pl-nx">b</span></span></span></code></pre>
<p>As our fake type signature describes, <code>add</code> takes two arguments (essentially, a
<a href="https://en.wikibooks.org/wiki/Haskell/Lists_and_tuples#Tuples%3CPaste%3E">tuple</a>)
that are both of type <code>Number</code> and returns a value of type <code>Number</code>.</p>
<p>But if we wanted to create a function that adds <code>10</code> to anything, we could write
the following:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// add :: Number -&gt; Number -&gt; Number
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">add</span> <span class="pl-o">=</span> <span class="pl-nx">a</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">b</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">a</span> <span class="pl-o">+</span> <span class="pl-nx">b</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// which is the same as
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-nx">a</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-kd">function</span><span class="pl-p">(</span><span class="pl-nx">b</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">a</span> <span class="pl-o">+</span> <span class="pl-nx">b</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// and then
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// add10 :: Number -&gt; Number
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">add10</span> <span class="pl-o">=</span> <span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">10</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">add10</span> <span class="pl-c1">// =&gt; Function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">add10</span><span class="pl-p">(</span><span class="pl-mi">4</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; 14
</span></span></span></code></pre>
<p>Note the change in type signature: we now have singular arguments that are
accepted at a time instead of the tuple style. When we provide the first
argument, we are then returned a function that will sit and wait until all the
functions are applied before giving us a value. This method can be useful in
many situations, but consider the following:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">10</span><span class="pl-p">)(</span><span class="pl-mi">4</span><span class="pl-p">)</span></span></span></code></pre>
<p>That feels awkward, right? Fear not! There is a way.</p>
<h2 id="the-curry-function">The <code>curry</code> Function</h2>
<p>Ramda provides us a function named <code>curry</code> that will take what might be
considered a “normal” JavaScript function definition with multiple parameters
and turn it into a function that will keep returning a function until all of
its parameters have been supplied. Check it out!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">import</span> <span class="pl-nx">curry</span> <span class="pl-nx">from</span> <span class="pl-s1">&#39;ramda/src/curry&#39;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">oldAdd</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">a</span><span class="pl-p">,</span> <span class="pl-nx">b</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">a</span> <span class="pl-o">+</span> <span class="pl-nx">b</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">add</span> <span class="pl-o">=</span> <span class="pl-nx">curry</span><span class="pl-p">(</span><span class="pl-nx">oldAdd</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">10</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; Function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">10</span><span class="pl-p">)(</span><span class="pl-mi">4</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; 14
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">10</span><span class="pl-p">,</span> <span class="pl-mi">4</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; 14
</span></span></span></code></pre>
<p>Or if you want to have <code>curry</code> baked in to your original <code>add</code> function:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// add :: Number -&gt; Number -&gt; Number
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">add</span> <span class="pl-o">=</span> <span class="pl-nx">curry</span><span class="pl-p">((</span><span class="pl-nx">a</span><span class="pl-p">,</span> <span class="pl-nx">b</span><span class="pl-p">)</span> <span class="pl-o">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">a</span> <span class="pl-o">+</span> <span class="pl-nx">b</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span></span></span></code></pre>
<p>The magical <code>curry</code> function doesn’t care when you provide arguments or how you
do so – it will just keep returning you partially applied functions until all
arguments have been applied, at which point it will give you back a value.</p>
<h2 id="cool-now-how-does-curry-work">Cool… Now How Does <code>curry</code> Work?</h2>
<p>This might seem blasphemous, but to understand how <code>curry</code> works under the hood,
we’re going to dive into a different library’s implementation of it:
<a href="https://github.com/evilsoft/crocks">crocks</a> by
<a href="https://twitter.com/evilsoft">@evilsoft</a>. (Crocks is similar to ramda but dives
more into abstract data types (ADTs) and is more towards the deeper end of the
Functional Programming pool.) I think crocks’ implementation is excellent, and
99% of it being in one file makes for a great teaching tool.</p>
<p>If you want to jump ahead, here is a link to crocks’ <code>curry</code> function:
<a href="https://github.com/evilsoft/crocks/blob/master/src/core/curry.js">https://github.com/evilsoft/crocks/blob/master/src/core/curry.js</a></p>
<p>Where do we start with understanding this next-level JavaScript? Always start
with the types, as they can tell a story.</p>
<h3 id="reading-currys-story">Reading <code>curry</code>’s Story</h3>
<p>What does this tell us?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// curry :: ((a, b, c) -&gt; d) -&gt; a -&gt; b -&gt; c -&gt; d
</span></span></span></code></pre>
<ol>
<li><code>((a, b, c) -&gt; d)</code> tells us that it accepts a function that has <em>n</em>
parameters of any type and returns a value of any type</li>
<li><code>-&gt; a -&gt; b -&gt; c</code> tells us that it then accepts each parameter – but only 1 at
a time!</li>
<li><code>-&gt; d</code> tells us that it ultimately returns the value as specified in the
function</li>
</ol>
<p>Sounds simple, right? Easier said than done!</p>
<h3 id="what-we-need-to-do">What we need to do</h3>
<ol>
<li>we need to first accept a function (the one to be curried)</li>
<li>we need to then accept <a href="/simple-variadic-behavior.html">any number of arguments (variadic behavior)</a></li>
<li>when this happens, we need to either</li>
</ol>
<ul>
<li>return a value (when all arguments have been applied)</li>
<li>return a function that accepts the remaining arguments and repeat this
condition</li>
</ul>
<h3 id="breaking-down-curry">Breaking Down Curry</h3>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// curry :: ((a, b, c) -&gt; d) -&gt; a -&gt; b -&gt; c -&gt; d
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// 1. we accept a function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">curry</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// 2. we return a function taking any `n` arguments
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-k">return</span> <span class="pl-p">(...</span><span class="pl-nx">xs</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">// make sure we have a populated list to work with;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// `undefined` is the value for the Unit type in
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// crocks and calling our function must utilize some
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// sort of value.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-kr">const</span> <span class="pl-nx">args</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">xs</span><span class="pl-p">.</span><span class="pl-nx">length</span> <span class="pl-o">?</span> <span class="pl-nx">xs</span> <span class="pl-o">:</span> <span class="pl-p">[</span> <span class="pl-kc">undefined</span> <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">// if the number of args sent are
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// less than that required, then
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// don&#39;t do more work; go ahead and
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// return a new version of our function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// that is still waiting for more
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// arguments to be applied.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-nx">args</span><span class="pl-p">.</span><span class="pl-nx">length</span> <span class="pl-o">&lt;</span> <span class="pl-nx">fn</span><span class="pl-p">.</span><span class="pl-nx">length</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-c1">// way of safely creating a new function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>      <span class="pl-c1">// and binding arguments to it without
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>      <span class="pl-c1">// calling it.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>      <span class="pl-k">return</span> <span class="pl-nx">curry</span><span class="pl-p">(</span><span class="pl-nb">Function</span><span class="pl-p">.</span><span class="pl-nx">bind</span><span class="pl-p">.</span><span class="pl-nx">apply</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-p">[</span> <span class="pl-kc">null</span> <span class="pl-p">].</span><span class="pl-nx">concat</span><span class="pl-p">(</span><span class="pl-nx">args</span><span class="pl-p">)))</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">// if we&#39;ve provided all arguments,
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// then let&#39;s apply them and give
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// back the result.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// otherwise, let&#39;s do some work
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// and see if, based on the number
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// of arguments, we return a new
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// function with fewer arguments
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// or go ahead and call the function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// with the final argument so we can
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// get back a value.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// NOTE: `applyCurry` is defined below.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-kr">const</span> <span class="pl-nx">val</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">args</span><span class="pl-p">.</span><span class="pl-nx">length</span> <span class="pl-o">===</span> <span class="pl-nx">fn</span><span class="pl-p">.</span><span class="pl-nx">length</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-o">?</span> <span class="pl-nx">fn</span><span class="pl-p">.</span><span class="pl-nx">apply</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">,</span> <span class="pl-nx">args</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-o">:</span> <span class="pl-nx">args</span><span class="pl-p">.</span><span class="pl-nx">reduce</span><span class="pl-p">(</span><span class="pl-nx">applyCurry</span><span class="pl-p">,</span> <span class="pl-nx">fn</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-c1">// 3. if our value is still a function, then
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// let&#39;s return the curried version of our
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// function that still needs some arguments
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// to be applied and repeat everything above.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// otherwise, we&#39;re all done here, so
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-c1">// let&#39;s return the value.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-k">return</span> <span class="pl-nx">isFunction</span><span class="pl-p">(</span><span class="pl-nx">val</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-o">?</span> <span class="pl-nx">curry</span><span class="pl-p">(</span><span class="pl-nx">val</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-o">:</span> <span class="pl-nx">val</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">applyCurry</span> <span class="pl-o">=</span> <span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">,</span> <span class="pl-nx">arg</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// return whatever we received if
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// fn is actually NOT a function.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-o">!</span><span class="pl-nx">isFunction</span><span class="pl-p">(</span><span class="pl-nx">fn</span><span class="pl-p">))</span> <span class="pl-p">{</span> <span class="pl-k">return</span> <span class="pl-nx">fn</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// if we have more than 1 argument
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// remaining to be applied, then let&#39;s
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// bind a value to the next argument and
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// keep going.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">//
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// otherwise, then yay let&#39;s go ahead
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// and call that function with the argument;
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// our `[ undefined ]` default saves us from
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-c1">// some potential headache here.
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-k">return</span> <span class="pl-nx">fn</span><span class="pl-p">.</span><span class="pl-nx">length</span> <span class="pl-o">&gt;</span> <span class="pl-mi">1</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">?</span> <span class="pl-nx">fn</span><span class="pl-p">.</span><span class="pl-nx">bind</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">,</span> <span class="pl-nx">arg</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-o">:</span> <span class="pl-nx">fn</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">(</span><span class="pl-kc">null</span><span class="pl-p">,</span> <span class="pl-nx">arg</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">isFunction</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">typeof</span> <span class="pl-nx">x</span> <span class="pl-o">===</span> <span class="pl-s1">&#39;function&#39;</span></span></span></code></pre>
<p>With all of these checks in here, we can now run the following code and have it
all work:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">add</span> <span class="pl-o">=</span> <span class="pl-nx">curry</span><span class="pl-p">((</span><span class="pl-nx">a</span><span class="pl-p">,</span> <span class="pl-nx">b</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">a</span> <span class="pl-o">+</span> <span class="pl-nx">b</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">add</span> <span class="pl-c1">// =&gt; Function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">1</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; Function
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">1</span><span class="pl-p">)(</span><span class="pl-mi">2</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; 3
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-mi">2</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; 3
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-mi">99</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; 3 (we don&#39;t care about the last one!)
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">add</span><span class="pl-p">(</span><span class="pl-mi">1</span><span class="pl-p">,</span> <span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-mi">99</span><span class="pl-p">,</span> <span class="pl-mi">2000</span><span class="pl-p">)</span> <span class="pl-c1">// =&gt; 3 (we don&#39;t care about the last two!)
</span></span></span></code></pre>
<h2 id="curry-in-action"><code>curry</code> In Action</h2>
<p>If all of your functions are curried, you can start writing code that you never
would have been able to before. Here is a small taste that we will cover more
fully in a future Ramda Chops:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// addOrRemove :: a -&gt; Array -&gt; Array
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">addOrRemove</span> <span class="pl-o">=</span> <span class="pl-nx">x</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">ifElse</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">contains</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">without</span><span class="pl-p">(</span><span class="pl-k">of</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)),</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">append</span><span class="pl-p">(</span><span class="pl-nx">x</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// addOrRemoveTest :: Array -&gt; Array
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">addOrRemoveTest</span> <span class="pl-o">=</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">addOrRemove</span><span class="pl-p">(</span><span class="pl-s1">&#39;test&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">addOrRemoveTest</span><span class="pl-p">([</span> <span class="pl-s1">&#39;thing&#39;</span> <span class="pl-p">])</span> <span class="pl-c1">// =&gt; [&#34;thing&#34;, &#34;test&#34;]
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">addOrRemoveTest</span><span class="pl-p">([</span> <span class="pl-s1">&#39;thing&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;test&#39;</span> <span class="pl-p">])</span> <span class="pl-c1">// =&gt; [&#34;thing&#34;]
</span></span></span></code></pre>
<p>(<a href="https://goo.gl/5uRhS2">View this example in a live REPL</a>)</p>
<p>The <code>addOrRemove</code> function almost reads like English: “If something contains
<code>x</code>, give me back that something without <code>x</code>; otherwise, append <code>x</code> to that
something.” What is worth understanding here is that these functions each accept
a number of arguments where <em>the most generic/reusable are provided
first</em> (this is a tenet of Functional Programming). Here, we are able to create
a very reusable function with partially applied values that sits and waits until
the final bit – an array – is provided.</p>
<hr />
<p>Thanks for reading! Until next time,
<br>
Robert</p>]]></summary>
</entry>
<entry>
    <title>Elm, Geocoding &amp; DarkSky: Pt. 4 – Extracting our Elm Code</title>
    <link href="https://robertwpearce.com/elm-geocoding-darksky-pt-4-extracting-our-elm-code.html" />
    <id>https://robertwpearce.com/elm-geocoding-darksky-pt-4-extracting-our-elm-code.html</id>
    <published>2017-12-16T00:00:00Z</published>
    <updated>2017-12-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is part 4 of a multipart series where we will be building a small weather
forecast app using <a href="http://elm-lang.org/">Elm</a>, <a href="https://developers.google.com/maps/documentation/geocoding/start">Google’s Geocoding
API</a> and the
<a href="https://darksky.net/dev/">DarkSky API</a>. Instead of doing everything in one
massive post, I’ve broken the steps down into parts of a series. Here is the
series plan:</p>
<ul>
<li><a href="/elm-geocoding-and-darksky-pt-1-setup-elm-and-proxy-servers.html">Pt. 1 – Setup Elm &amp; Proxy Servers</a></li>
<li><a href="/elm-geocoding-and-darksky-pt-2-geocoding-an-address.html">Pt. 2 – Geocoding an Address</a></li>
<li><a href="/elm-geocoding-and-darksky-pt-3-fetching-the-current-weather.html">Pt. 3 – Fetching the Current Weather</a></li>
<li>Pt. 4 – Extracting our Elm Code</li>
</ul>
<p>If you’d like to code along with this tutorial, check out <a href="/elm-geocoding-and-darksky-pt-1-setup-elm-and-proxy-servers.html">part
1</a>, <a href="/elm-geocoding-and-darksky-pt-2-fetching-the-current-weather.html">part
2</a> and <a href="/elm-geocoding-and-darksky-pt-3-fetching-the-current-weather.html">part
3</a> first to
get set up.</p>
<p><em>Note: to learn more about the Elm language and syntax, check out the <a href="https://www.elm-tutorial.org/en/">Elm
Tutorial</a>, the <a href="https://egghead.io/courses/start-using-elm-to-build-web-applications">EggHead.io Elm
course</a>,
subscribe to <a href="https://www.dailydrip.com/topics/elm">DailyDrip’s Elm Topic</a>,
<a href="http://courses.knowthen.com">James Moore’s Elm Courses</a> or check out <a href="http://exercism.io/languages/elm/about">Elm on
exercism.io</a>.</em></p>
<h2 id="tldr">tl;dr</h2>
<p>I meant to finish this blog series a few months ago, but while I didn’t finish
the writing part, I did manage to do the code for part 4. If you’ve made it this
far and would like to see the extracted elm code extracted into</p>
<ul>
<li><a href="https://github.com/rpearce/elm-geocoding-darksky/blob/pt-4/src/Geocode.elm">Geocode.elm</a></li>
<li><a href="https://github.com/rpearce/elm-geocoding-darksky/blob/pt-4/src/Main.elm">Main.elm</a></li>
<li><a href="https://github.com/rpearce/elm-geocoding-darksky/blob/pt-4/src/Weather.elm">Weather.elm</a></li>
</ul>
<p>then you can do so here:</p>
<p><a href="https://github.com/rpearce/elm-geocoding-darksky/tree/pt-4/src">https://github.com/rpearce/elm-geocoding-darksky/tree/pt-4/src</a>.</p>
<p>I’d like to move on to other topics, and unfortunately, this is the best way I
know how to do so.</p>
<p>Until next time,
<br>
Robert</p>]]></summary>
</entry>
<entry>
    <title>Elm, Geocoding &amp; DarkSky: Pt. 3 – Fetching the Current Weather</title>
    <link href="https://robertwpearce.com/elm-geocoding-darksky-pt-3-fetching-the-current-weather.html" />
    <id>https://robertwpearce.com/elm-geocoding-darksky-pt-3-fetching-the-current-weather.html</id>
    <published>2017-08-18T00:00:00Z</published>
    <updated>2017-08-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is part 3 of a multipart series where we will be building a small weather
forecast app using <a href="http://elm-lang.org/">Elm</a>, <a href="https://developers.google.com/maps/documentation/geocoding/start">Google’s Geocoding
API</a> and the
<a href="https://darksky.net/dev/">DarkSky API</a>. Instead of doing everything in one
massive post, I’ve broken the steps down into parts of a series. Here is the
series plan:</p>
<ul>
<li><a href="/elm-geocoding-and-darksky-pt-1-setup-elm-and-proxy-servers.html">Pt. 1 – Setup Elm &amp; Proxy Servers</a></li>
<li><a href="/elm-geocoding-and-darksky-pt-2-geocoding-an-address.html">Pt. 2 – Geocoding an Address</a></li>
<li>Pt. 3 – Fetching the Current Weather</li>
<li><a href="/elm-geocoding-and-darksky-pt-4-extracting-our-elm-code.html">Pt. 4 – Extracting Our Elm Code</a></li>
</ul>
<p>If you’d like to code along with this tutorial, check out <a href="/elm-geocoding-and-darksky-pt-1-setup-elm-and-proxy-servers.html">part
1</a> and <a href="/elm-geocoding-and-darksky-pt-2-fetching-the-current-weather.html">part
2</a> first to
get set up.</p>
<p><em>Note: to learn more about the Elm language and syntax, check out the <a href="https://www.elm-tutorial.org/en/">Elm
Tutorial</a>, the <a href="https://egghead.io/courses/start-using-elm-to-build-web-applications">EggHead.io Elm
course</a>,
subscribe to <a href="https://www.dailydrip.com/topics/elm">DailyDrip’s Elm Topic</a>,
<a href="http://courses.knowthen.com">James Moore’s Elm Courses</a> or check out <a href="http://exercism.io/languages/elm/about">Elm on
exercism.io</a>.</em></p>
<h2 id="overview">Overview</h2>
<p>In this post we will use Elm to fetch and display the current weather based on
the geocode data we receive from an input field.</p>
<h2 id="project-source-code">Project Source Code</h2>
<p>The project we’re making will be broken into parts here (branches will be named
for each part): <a href="https://github.com/rpearce/elm-geocoding-darksky/">https://github.com/rpearce/elm-geocoding-darksky/</a>.
Be sure to check out the other branches to see the other parts as they become
available.</p>
<p>The code for this part is located in the <code>pt-3</code> branch: <a href="https://github.com/rpearce/elm-geocoding-darksky/tree/pt-3">https://github.com/rpearce/elm-geocoding-darksky/tree/pt-3</a>.</p>
<h2 id="steps-for-today">Steps for Today</h2>
<ol>
<li>Understanding DarkSky’s response data</li>
<li>Modeling the DarkSky response data</li>
<li>Creating DarkSky JSON decoders</li>
<li>Writing our fetchWeather HTTP function</li>
<li>Calling fetchWeather and handling the response</li>
<li>Displaying the current weather in our view</li>
</ol>
<h2 id="1-understanding-darkskys-response-data">1. Understanding DarkSky’s response data</h2>
<p>Let’s get the weather data for Auckland, NZ (-36.8484597,174.7633315). If we
start up our <a href="https://github.com/rpearce/DarkSky-proxy">DarkSky proxy</a> and run</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ curl localhost:5051/forecast/-36.8484597,174.7633315</span></span></code></pre>
<p>then we will see response data like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nt">&#34;timezone&#34;</span><span class="pl-p">:</span> <span class="pl-s2">&#34;Pacific\/Auckland&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nt">&#34;currently&#34;</span><span class="pl-p">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&#34;summary&#34;</span><span class="pl-p">:</span> <span class="pl-s2">&#34;Overcast&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&#34;icon&#34;</span><span class="pl-p">:</span> <span class="pl-s2">&#34;cloudy&#34;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nt">&#34;temperature&#34;</span><span class="pl-p">:</span> <span class="pl-mf">61.42</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-err">...</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nt">&#34;hourly&#34;</span><span class="pl-p">:</span> <span class="pl-p">{</span> <span class="pl-err">...</span> <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nt">&#34;daily&#34;</span><span class="pl-p">:</span> <span class="pl-p">{</span> <span class="pl-err">...</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>While all we care about are the <code>summary</code>, <code>icon</code> and <code>temperature</code> properties
within the top-level <code>currently</code> property, we will only use <code>temperature</code> in
this part.</p>
<p>Disclaimer: DarkSky units are in <code>us</code> by default. You can specify other unit
types by appending a <code>units</code> query parameter to the end like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ curl localhost:5051/forecast/-36.8484597,174.7633315?units=si</span></span></code></pre>
<p>Read more about <a href="https://darksky.net/dev/docs/forecast">DarkSky request parameters in the DarkSky
docs</a> to customize your response data.</p>
<p>Now that we’ve got our data in the correct units, let’s model this data in Elm!</p>
<h2 id="2-modeling-the-darksky-response-data">2. Modeling the DarkSky response data</h2>
<p>Based on our DarkSky response, let’s list out what we’re looking at:</p>
<ul>
<li>an object, <code>currently</code>, which has 3 notable properties:
<ul>
<li>a string, <code>summary</code></li>
<li>a string, <code>icon</code></li>
<li>a float, <code>temperature</code></li>
</ul></li>
</ul>
<p>Since we have two levels of data, <code>currently</code> and its child properties, let’s
create two type aliases to represent this data.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kr">alias</span> <span class="pl-kt">Weather</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">currently</span> <span class="pl-nf">:</span> <span class="pl-kt">WeatherCurrently</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kr">alias</span> <span class="pl-kt">WeatherCurrently</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">icon</span> <span class="pl-nf">:</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">summary</span> <span class="pl-nf">:</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">temperature</span> <span class="pl-nf">:</span> <span class="pl-kt">Float</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span></span></span></code></pre>
<p>And now we can add a property to our <code>Model</code> type alias that can be of our
<code>Weather</code> type:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kr">alias</span> <span class="pl-kt">Model</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">address</span> <span class="pl-nf">:</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">coords</span> <span class="pl-nf">:</span> <span class="pl-kt">Coords</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">weather</span> <span class="pl-nf">:</span> <span class="pl-kt">Weather</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span></span></span></code></pre>
<p>Uh oh! Our <code>Model</code> has a defaults function called <code>initialModel</code>, and now that
we’ve added <code>weather</code> into the mix, we’ll need to give that default values,
as well:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialModel</span> <span class="pl-nf">:</span> <span class="pl-kt">Model</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialModel</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">address</span> <span class="pl-nf">=</span> <span class="pl-s">&#34;&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">coords</span> <span class="pl-nf">=</span> <span class="pl-p">(</span> <span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-mi">0</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">weather</span> <span class="pl-nf">=</span> <span class="pl-nv">initialWeather</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialWeather</span> <span class="pl-nf">:</span> <span class="pl-kt">Weather</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialWeather</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">currently</span> <span class="pl-nf">=</span> <span class="pl-nv">initialWeatherCurrently</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialWeatherCurrently</span> <span class="pl-nf">:</span> <span class="pl-kt">WeatherCurrently</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialWeatherCurrently</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">icon</span> <span class="pl-nf">=</span> <span class="pl-s">&#34;–&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">summary</span> <span class="pl-nf">=</span> <span class="pl-s">&#34;–&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">temperature</span> <span class="pl-nf">=</span> <span class="pl-mi">0</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span></span></span></code></pre>
<p>These are defaults that we provide in the event that we have no data to work
with (initially or if something goes wrong).</p>
<h2 id="3-creating-darksky-json-decoders">3. Creating DarkSky JSON decoders</h2>
<p>Just as we did in the <a href="/elm-geocoding-and-darksky-pt-2-geocoding-an-address.html#4-creating-json-decoders">geocoding post section on JSON
decoding</a>,
we want to leverage <a href="https://github.com/NoRedInk/elm-decode-pipeline">NoRedInk’s
elm-decode-pipeline</a> to define
how our JSON response should be structured and thus parsed.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeWeather</span> <span class="pl-nf">:</span> <span class="pl-kt">Decoder</span> <span class="pl-kt">Weather</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeWeather</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">decode</span> <span class="pl-kt">Weather</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;currently&#34;</span> <span class="pl-nv">decodeWeatherCurrently</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeWeatherCurrently</span> <span class="pl-nf">:</span> <span class="pl-kt">Decoder</span> <span class="pl-kt">WeatherCurrently</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeWeatherCurrently</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">decode</span> <span class="pl-kt">WeatherCurrently</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;icon&#34;</span> <span class="pl-nv">string</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;summary&#34;</span> <span class="pl-nv">string</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;temperature&#34;</span> <span class="pl-nv">float</span></span></span></code></pre>
<p>While we could use <a href="http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Decode#at">Json.Decode.at</a>
to potentially have less code, there is absolutely nothing wrong with being
verbose if it leads to clarity.</p>
<h2 id="4-writing-our-fetchweather-http-function">4. Writing our fetchWeather HTTP function</h2>
<p>We know that we’re going to have to send latitude and longitude <code>Coords</code> to our
<a href="https://github.com/rpearce/DarkSky-proxy">DarkSky proxy server</a>, as well as any
additional options, so let’s define the URL for that and the fetching function
<a href="/elm-geocoding-and-darksky-pt-2-geocoding-an-address.html#8-making-our-request">just like we did for geocoding</a>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">weatherUrl</span> <span class="pl-nf">:</span> <span class="pl-kt">Coords</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">weatherUrl</span> <span class="pl-p">(</span> <span class="pl-nv">lat</span><span class="pl-p">,</span> <span class="pl-nv">lng</span> <span class="pl-p">)</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s">&#34;http://localhost:5051/forecast/&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">++</span> <span class="pl-p">(</span><span class="pl-nv">toString</span> <span class="pl-nv">lat</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">++</span> <span class="pl-s">&#34;,&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">++</span> <span class="pl-p">(</span><span class="pl-nv">toString</span> <span class="pl-nv">lng</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-c1">-- this is where you can add your query params</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">fetchWeather</span> <span class="pl-nf">:</span> <span class="pl-kt">Coords</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">Cmd</span> <span class="pl-kt">Msg</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">fetchWeather</span> <span class="pl-nv">coords</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kt">Http</span><span class="pl-nf">.</span><span class="pl-nv">get</span> <span class="pl-p">(</span><span class="pl-nv">weatherUrl</span> <span class="pl-nv">coords</span><span class="pl-p">)</span> <span class="pl-nv">decodeWeather</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-kt">Http</span><span class="pl-nf">.</span><span class="pl-nv">send</span> <span class="pl-kt">ReceiveWeather</span></span></span></code></pre>
<p>To define an HTTP request in Elm, we need
* ✅ a URL to point to
* ✅ a package like Http to help us build the request
* ✅ a decoder to handle parsing the response data
* 🤷 a <code>Msg</code> type that our <code>update</code> function can pattern match on</p>
<p>Right! We can’t forget to add <code>ReceiveWeather</code> as a <code>Msg</code> type. It should be
almost the same as <code>ReceiveGeocoding</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kt">Msg</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">=</span> <span class="pl-kt">UpdateAddress</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">|</span> <span class="pl-kt">SendAddress</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">|</span> <span class="pl-kt">ReceiveGeocoding</span> <span class="pl-p">(</span><span class="pl-kt">Result</span> <span class="pl-kt">Http</span><span class="pl-nf">.</span><span class="pl-kt">Error</span> <span class="pl-kt">GeoModel</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">|</span> <span class="pl-kt">ReceiveWeather</span> <span class="pl-p">(</span><span class="pl-kt">Result</span> <span class="pl-kt">Http</span><span class="pl-nf">.</span><span class="pl-kt">Error</span> <span class="pl-kt">Weather</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">|</span> <span class="pl-kt">NoOp</span></span></span></code></pre>
<h2 id="5-calling-fetchweather-and-handling-the-response">5. Calling fetchWeather and handling the response</h2>
<p>When we <a href="/elm-geocoding-and-darksky-pt-2-geocoding-an-address.html#9-handling-the-geocode-response">handled our geocode response in the prior
post</a>,
inside of <code>ReceiveGeocoding</code> we returned <code>( newModel, Cmd.none )</code>, for we had no
further actions to take. Instead of our action in this tuple being <code>Cmd.none</code>,
let’s instead call our <code>fetchWeather</code> function and pass it our geocoded
coordinates:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">update</span> <span class="pl-nf">:</span> <span class="pl-kt">Msg</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">Model</span> <span class="pl-nf">-&gt;</span> <span class="pl-p">(</span> <span class="pl-kt">Model</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span> <span class="pl-kt">Msg</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">update</span> <span class="pl-nv">msg</span> <span class="pl-nv">model</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kr">case</span> <span class="pl-nv">msg</span> <span class="pl-kr">of</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-c1">-- ...removed for brevity</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kt">ReceiveGeocoding</span> <span class="pl-p">(</span><span class="pl-kt">Ok</span> <span class="pl-p">{</span> <span class="pl-nv">results</span><span class="pl-p">,</span> <span class="pl-nv">status</span> <span class="pl-p">})</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-kr">let</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-nv">newModel</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-kr">in</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">(</span> <span class="pl-nv">newModel</span><span class="pl-p">,</span> <span class="pl-nv">fetchWeather</span> <span class="pl-nv">newModel</span><span class="pl-nf">.</span><span class="pl-nv">coords</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-c1">-- ...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kt">ReceiveWeather</span> <span class="pl-p">(</span><span class="pl-kt">Ok</span> <span class="pl-nv">resp</span><span class="pl-p">)</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">(</span> <span class="pl-p">{</span> <span class="pl-nv">model</span> <span class="pl-nf">|</span> <span class="pl-nv">weather</span> <span class="pl-nf">=</span> <span class="pl-p">{</span> <span class="pl-nv">currently</span> <span class="pl-nf">=</span> <span class="pl-nv">resp</span><span class="pl-nf">.</span><span class="pl-nv">currently</span> <span class="pl-p">}</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">,</span> <span class="pl-kt">Cmd</span><span class="pl-nf">.</span><span class="pl-nv">none</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kt">ReceiveWeather</span> <span class="pl-p">(</span><span class="pl-kt">Err</span> <span class="pl-nv">_</span><span class="pl-p">)</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">(</span> <span class="pl-nv">model</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span><span class="pl-nf">.</span><span class="pl-nv">none</span> <span class="pl-p">)</span></span></span></code></pre>
<p>Again, at the end of <code>ReceiveGeocoding</code>, we return our <code>newModel</code> as well as the
command to go and fetch the weather with the coordinates we’re storing on our
<code>newModel</code>.</p>
<p>Whenever the HTTP request and decoding gives us back a result with the <code>Msg</code>
type of <code>ReceiveWeather</code>, we then update the weather property on our model
record to have the <code>currently</code> data parsed from the decoder.</p>
<h2 id="6-displaying-the-current-weather-in-our-view">6. Displaying the current weather in our view</h2>
<p>Finally, to make sure we’re doing each step correctly, let’s add the temperature
to our view:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">view</span> <span class="pl-nf">:</span> <span class="pl-kt">Model</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">Html</span> <span class="pl-kt">Msg</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">view</span> <span class="pl-nv">model</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">div</span> <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">[</span> <span class="pl-nv">form</span> <span class="pl-p">[</span> <span class="pl-nv">onSubmit</span> <span class="pl-kt">SendAddress</span> <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">[</span> <span class="pl-nv">input</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">[</span> <span class="pl-nv">type_</span> <span class="pl-s">&#34;text&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">,</span> <span class="pl-nv">placeholder</span> <span class="pl-s">&#34;City&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">,</span> <span class="pl-nv">value</span> <span class="pl-nv">model</span><span class="pl-nf">.</span><span class="pl-nv">address</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">,</span> <span class="pl-nv">onInput</span> <span class="pl-kt">UpdateAddress</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-nv">p</span> <span class="pl-p">[]</span> <span class="pl-p">[</span> <span class="pl-nv">text</span> <span class="pl-p">(</span><span class="pl-s">&#34;Coords: &#34;</span> <span class="pl-nf">++</span> <span class="pl-p">(</span><span class="pl-nv">toString</span> <span class="pl-nv">model</span><span class="pl-nf">.</span><span class="pl-nv">coords</span><span class="pl-p">))</span> <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-nv">p</span> <span class="pl-p">[]</span> <span class="pl-p">[</span> <span class="pl-nv">text</span> <span class="pl-p">(</span><span class="pl-s">&#34;Weather: &#34;</span> <span class="pl-nf">++</span> <span class="pl-p">(</span><span class="pl-nv">toString</span> <span class="pl-p">(</span><span class="pl-nv">round</span> <span class="pl-nv">model</span><span class="pl-nf">.</span><span class="pl-nv">weather</span><span class="pl-nf">.</span><span class="pl-nv">currently</span><span class="pl-nf">.</span><span class="pl-nv">temperature</span><span class="pl-p">)))</span> <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">]</span></span></span></code></pre>
<p>Here we use <a href="http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#round">Basics.round</a>
because an approximation is alright for weather.</p>
<p>Now, when you rebuild your code with <code>./build</code>, open <code>index.html</code> and submit a
city/address name, you’ll first see the <code>Coords</code> update on the page and then see
the <code>Weather</code> result once it’s done.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Hooray! We can geocode an address and fetch the weather via two different proxy
servers and display a result! That’s great, but our <code>Main.elm</code> file is getting
quite large, so stay tuned for the next part where we pull our code into smaller
chunks without losing clarity.</p>
<p>If you’d like to check out the code from this part, it is located here:
<a href="https://github.com/rpearce/elm-geocoding-darksky/tree/pt-3">https://github.com/rpearce/elm-geocoding-darksky/tree/pt-3</a>.</p>
<p>Until next time,
<br>
Robert</p>]]></summary>
</entry>
<entry>
    <title>Elm, Geocoding &amp; DarkSky: Pt. 2 – Geocoding an Address</title>
    <link href="https://robertwpearce.com/elm-geocoding-darksky-pt-2-geocoding-an-address.html" />
    <id>https://robertwpearce.com/elm-geocoding-darksky-pt-2-geocoding-an-address.html</id>
    <published>2017-07-30T00:00:00Z</published>
    <updated>2017-07-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is part 2 of a multipart series where we will be building a small weather
forecast app using <a href="http://elm-lang.org/">Elm</a>, <a href="https://developers.google.com/maps/documentation/geocoding/start">Google’s Geocoding
API</a> and the
<a href="https://darksky.net/dev/">DarkSky API</a>. Instead of doing everything in one
massive post, I’ve broken the steps down into parts of a series. Here is the
series plan:</p>
<ul>
<li><a href="/elm-geocoding-and-darksky-pt-1-setup-elm-and-proxy-servers.html">Pt. 1 – Setup Elm &amp; Proxy Servers</a></li>
<li>Pt. 2 – Geocoding an Address</li>
<li><a href="/elm-geocoding-and-darksky-pt-3-fetching-the-current-weather.html">Pt. 3 – Fetching the Current Weather</a></li>
<li><a href="/elm-geocoding-and-darksky-pt-4-extracting-our-elm-code.html">Pt. 4 – Extracting Our Elm Code</a></li>
</ul>
<p>If you’d like to code along with this tutorial, check out <a href="/elm-geocoding-and-darksky-pt-1-setup-elm-and-proxy-servers.html">part
1</a> first to
get set up.</p>
<p><em>Note: to learn more about the Elm language and syntax, check out the <a href="https://www.elm-tutorial.org/en/">Elm
Tutorial</a>, the <a href="https://egghead.io/courses/start-using-elm-to-build-web-applications">EggHead.io Elm
course</a>,
subscribe to <a href="https://www.dailydrip.com/topics/elm">DailyDrip’s Elm Topic</a>,
<a href="http://courses.knowthen.com">James Moore’s Elm Courses</a> or check out <a href="http://exercism.io/languages/elm/about">Elm on
exercism.io</a>.</em></p>
<h2 id="overview">Overview</h2>
<p>Before we can send a weather forecast request to DarkSky, we need to geocode an
address to get its latitude and longitutde. In this post, we’re going to use Elm
and our geocoding server from <a href="/elm-geocoding-and-darksky-pt-1-setup-elm-and-proxy-servers.html">Part
1</a> to geocode
an address based on a user’s input in a text box.</p>
<p>Warning: this is a hefty post.</p>
<h2 id="project-source-code">Project Source Code</h2>
<p>The project we’re making will be broken into parts here (branches will be named
for each part): <a href="https://github.com/rpearce/elm-geocoding-darksky/">https://github.com/rpearce/elm-geocoding-darksky/</a>.
Be sure to check out the other branches to see the other parts as they become available.</p>
<p>The code for this part is located in the <code>pt-2</code> branch:
<a href="https://github.com/rpearce/elm-geocoding-darksky/tree/pt-2">https://github.com/rpearce/elm-geocoding-darksky/tree/pt-2</a>.</p>
<h2 id="steps-for-today">Steps for Today</h2>
<p>What we want to do with our program today is create an HTTP GET request with an
address that is input by a user and returns the latitude and longitude. These
steps will get us there:</p>
<ol>
<li>Defining our primary data model</li>
<li>Understanding Google’s geocode response data</li>
<li>Modeling the geocode response data</li>
<li>Creating JSON decoders</li>
<li>Building our view and listening for events</li>
<li>Adding message types</li>
<li>Writing our update function</li>
<li>Making our request</li>
<li>Handling the geocode response</li>
<li>Final wiring up with the main function &amp; defaults</li>
</ol>
<h2 id="1-defining-our-primary-data-model">1: Defining our primary data model</h2>
<p>At the top level for our app, we only care about an address and latitude and
longitude coordinates. While the address’ type will definitely be
<a href="http://package.elm-lang.org/packages/elm-lang/core/latest/String">String</a>, we
can choose between a <a href="https://guide.elm-lang.org/core_language.html#records">record</a>
or <a href="https://guide.elm-lang.org/core_language.html#tuples">tuple</a> to house our
coordinates; however, each of these values must be a <code>Float</code> type, as
coordinates come in decimal format. For no particular reason, we’re going to use
a tuple.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kr">alias</span> <span class="pl-kt">Model</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">address</span> <span class="pl-nf">:</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">coords</span> <span class="pl-nf">:</span> <span class="pl-kt">Coords</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kr">alias</span> <span class="pl-kt">Coords</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">(</span> <span class="pl-kt">Float</span><span class="pl-p">,</span> <span class="pl-kt">Float</span> <span class="pl-p">)</span></span></span></code></pre>
<p>I like to keep my models/type aliases fairly clean and primed for re-use in type
definitions, so I created a separate type alias, <code>Coords</code>, to represent
<code>( Float, Float )</code>.</p>
<h2 id="2-understanding-googles-geocode-response-data">2: Understanding Google’s geocode response data</h2>
<p>Let’s take a look at what a geocoding request’s response data for <code>Auckland</code>
looks like so we can understand what we’re working with.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;results&#34;</span><span class="pl-o">:</span> <span class="pl-p">[</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-s2">&#34;geometry&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-s2">&#34;location&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-s2">&#34;lat&#34;</span><span class="pl-o">:</span> <span class="pl-o">-</span><span class="pl-mf">36.8484597</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-s2">&#34;lng&#34;</span><span class="pl-o">:</span> <span class="pl-mf">174.7633315</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>      <span class="pl-p">},</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">],</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;status&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;OK&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>If you’ve set up your <a href="/node-js-geocoding-proxy-with-paperplane.html">geocoding
proxy</a>, you can see these same
results by running this command:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ curl localhost:5050/geocode/Auckland</span></span></code></pre>
<p>We can see here that we get back a <code>status</code> string and a <code>results</code> list where
one of the results contains a <code>geometry</code> object, and inside of that, we find
<code>location</code> and finally, our quarry: <code>lat</code> and <code>lng</code>. If we were searching for
this with JavaScript, we might find this data like so:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">response</span><span class="pl-p">.</span><span class="pl-nx">results</span><span class="pl-p">.</span><span class="pl-nx">find</span><span class="pl-p">(</span><span class="pl-nx">x</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">x</span><span class="pl-p">[</span><span class="pl-s1">&#39;geometry&#39;</span><span class="pl-p">]).</span><span class="pl-nx">geometry</span><span class="pl-p">.</span><span class="pl-nx">location</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// { lat: -36.8484597, lng: 174.7633315 }
</span></span></span></code></pre>
<p>What would happen in vanilla JavaScript if there were no results, or those
object keys didn’t exist? Elm steps up to help us solve for the unexpected.</p>
<h2 id="3-modeling-the-geocode-response-data">3: Modeling the geocode response data</h2>
<p>Based on the geocoding response, let’s list out what we’re looking at:</p>
<ul>
<li>a string, <code>status</code></li>
<li>a list of <code>results</code></li>
<li>each result has a <code>geometry</code> object</li>
<li>a <code>geometry</code> object has a <code>location</code> object</li>
<li>a <code>location</code> object has both <code>lat</code> and <code>lng</code> properties, each of which use
decimal points</li>
</ul>
<p>Since we’re going to need decode these bits of data and reuse the types a few
times, let’s create type aliases for each of these concepts (prefixed with
<code>Geo</code>):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kr">alias</span> <span class="pl-kt">GeoModel</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">status</span> <span class="pl-nf">:</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">results</span> <span class="pl-nf">:</span> <span class="pl-kt">List</span> <span class="pl-kt">GeoResult</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kr">alias</span> <span class="pl-kt">GeoResult</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">geometry</span> <span class="pl-nf">:</span> <span class="pl-kt">GeoGeometry</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kr">alias</span> <span class="pl-kt">GeoGeometry</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">location</span> <span class="pl-nf">:</span> <span class="pl-kt">GeoLocation</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kr">alias</span> <span class="pl-kt">GeoLocation</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">lat</span> <span class="pl-nf">:</span> <span class="pl-kt">Float</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">lng</span> <span class="pl-nf">:</span> <span class="pl-kt">Float</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span></span></span></code></pre>
<p>If you’re not sure what <code>type alias</code> means, read more about <a href="https://guide.elm-lang.org/types/type_aliases.html">type aliases in
<em>An Introduction to Elm</em></a>.</p>
<h2 id="4-creating-json-decoders">4: Creating JSON decoders</h2>
<p>There are a number of ways to decode JSON in Elm, and <a href="https://www.brianthicks.com">Brian
Hicks</a> has <a href="https://www.brianthicks.com/post/2016/08/22/decoding-large-json-objects-a-summary/">written about
this</a>
(and has a <a href="https://www.brianthicks.com/json-survival-kit/">short book on decoding JSON</a>),
and so have many others, such as <a href="https://robots.thoughtbot.com/decoding-json-structures-with-elm">Thoughtbot</a>.
Today, we’re going to be working with <a href="https://github.com/NoRedInk/elm-decode-pipeline">NoRedInk’s elm-decode-pipeline</a>.</p>
<p>First, we install the package into our project:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ elm package install NoRedInk/elm-decode-pipeline</span></span></code></pre>
<p>In our <code>Main.elm</code> file, we can import what we’ll need from Elm’s <a href="">core
Json-Decode module</a> as well as the package we’ve just installed.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- Importing from elm core.</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- We know from our type aliases that all we&#39;re working</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- with right now are floats, lists and strings.</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kn">import </span><span class="pl-nc">Json.Decode</span> <span class="pl-nv">exposing</span> <span class="pl-p">(</span><span class="pl-nv">float</span><span class="pl-p">,</span> <span class="pl-nv">list</span><span class="pl-p">,</span> <span class="pl-nv">string</span><span class="pl-p">,</span> <span class="pl-kt">Decoder</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- importing from elm-decode-pipeline</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kn">import </span><span class="pl-nc">Json.Decode.Pipeline</span> <span class="pl-nv">exposing</span> <span class="pl-p">(</span><span class="pl-nv">decode</span><span class="pl-p">,</span> <span class="pl-nv">required</span><span class="pl-p">)</span></span></span></code></pre>
<p>Now we can write our decoders!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeGeo</span> <span class="pl-nf">:</span> <span class="pl-kt">Decoder</span> <span class="pl-kt">GeoModel</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeGeo</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">decode</span> <span class="pl-kt">GeoModel</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;status&#34;</span> <span class="pl-nv">string</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;results&#34;</span> <span class="pl-p">(</span><span class="pl-nv">list</span> <span class="pl-nv">decodeGeoResult</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeGeoResult</span> <span class="pl-nf">:</span> <span class="pl-kt">Decoder</span> <span class="pl-kt">GeoResult</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeGeoResult</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">decode</span> <span class="pl-kt">GeoResult</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;geometry&#34;</span> <span class="pl-nv">decodeGeoGeometry</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeGeoGeometry</span> <span class="pl-nf">:</span> <span class="pl-kt">Decoder</span> <span class="pl-kt">GeoGeometry</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeGeoGeometry</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">decode</span> <span class="pl-kt">GeoGeometry</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;location&#34;</span> <span class="pl-nv">decodeGeoLocation</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeGeoLocation</span> <span class="pl-nf">:</span> <span class="pl-kt">Decoder</span> <span class="pl-kt">GeoLocation</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeGeoLocation</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">decode</span> <span class="pl-kt">GeoLocation</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;lat&#34;</span> <span class="pl-nv">float</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-nv">required</span> <span class="pl-s">&#34;lng&#34;</span> <span class="pl-nv">float</span></span></span></code></pre>
<p>Here we declare that we’d like to decode the JSON string according to our type
aliases, such as <code>GeoModel</code>, and we expect certain keys to have certain value
types. In the case of <code>status</code>, that’s just a string; however, with <code>results</code>,
we actually have a list of some other type of data, <code>GeoResult</code>, and so we
create another decoder function down the line until we dig deep enough to find
what we’re looking for. In short, we’re opting for functions and type-checking
over deep nesting.</p>
<p>Why does this feel so verbose? Personally, I’m not yet comfortable using
<a href="http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Decode#at">Json.Decode.at</a>,
which might look like</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">decodeString</span> <span class="pl-p">(</span><span class="pl-nv">at</span> <span class="pl-p">[</span> <span class="pl-s">&#34;results&#34;</span> <span class="pl-p">]</span> <span class="pl-p">(</span><span class="pl-nv">list</span> <span class="pl-p">(</span><span class="pl-nv">at</span> <span class="pl-p">[</span> <span class="pl-s">&#34;geometry&#34;</span><span class="pl-p">,</span> <span class="pl-s">&#34;location&#34;</span> <span class="pl-p">]</span> <span class="pl-p">(</span><span class="pl-nv">keyValuePairs</span> <span class="pl-nv">float</span><span class="pl-p">))))</span> <span class="pl-nv">jsonString</span></span></span></code></pre>
<p>But with the former approach, we get to be <em>very</em> specific with exactly what we
are expecting our data to be shaped like while maintaining clarity.</p>
<h2 id="5-building-our-view-and-listening-for-events">5: Building our view and listening for events</h2>
<p>It’s time to add our <code>view</code> function. All we’re going for today is</p>
<ul>
<li>a text input that will keep track of the <code>address</code> by responding to the
<code>onInput</code> event</li>
<li>a form around the input that listens for the <code>onSubmit</code> event</li>
<li>a paragraph to display the coordinates; for example, <code>Coords: (123, 456)</code></li>
</ul>
<p>As usual, let’s download <a href="https://github.com/elm-lang/html">the official elm-lang/html
package</a>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ elm package install elm-lang/html</span></span></code></pre>
<p>Then let’s import what we need from it:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kn">import </span><span class="pl-nc">Html</span> <span class="pl-nv">exposing</span> <span class="pl-p">(</span><span class="pl-kt">Html</span><span class="pl-p">,</span> <span class="pl-nv">div</span><span class="pl-p">,</span> <span class="pl-nv">form</span><span class="pl-p">,</span> <span class="pl-nv">input</span><span class="pl-p">,</span> <span class="pl-nv">p</span><span class="pl-p">,</span> <span class="pl-nv">text</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kn">import </span><span class="pl-nc">Html.Attributes</span> <span class="pl-nv">exposing</span> <span class="pl-p">(</span><span class="pl-nv">placeholder</span><span class="pl-p">,</span> <span class="pl-nv">type_</span><span class="pl-p">,</span> <span class="pl-nv">value</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kn">import </span><span class="pl-nc">Html.Events</span> <span class="pl-nv">exposing</span> <span class="pl-p">(</span><span class="pl-nv">onInput</span><span class="pl-p">,</span> <span class="pl-nv">onSubmit</span><span class="pl-p">)</span></span></span></code></pre>
<p>Each import is a function that we can use to help generate HTML5 elements which Elm then works with behind the scenes.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">view</span> <span class="pl-nf">:</span> <span class="pl-kt">Model</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">Html</span> <span class="pl-kt">Msg</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">view</span> <span class="pl-nv">model</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">div</span> <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">[</span> <span class="pl-nv">form</span> <span class="pl-p">[</span> <span class="pl-nv">onSubmit</span> <span class="pl-kt">SendAddress</span> <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">[</span> <span class="pl-nv">input</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">[</span> <span class="pl-nv">type_</span> <span class="pl-s">&#34;text&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">,</span> <span class="pl-nv">placeholder</span> <span class="pl-s">&#34;City&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">,</span> <span class="pl-nv">value</span> <span class="pl-nv">model</span><span class="pl-nf">.</span><span class="pl-nv">address</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">,</span> <span class="pl-nv">onInput</span> <span class="pl-kt">UpdateAddress</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">[]</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-nv">p</span> <span class="pl-p">[]</span> <span class="pl-p">[</span> <span class="pl-nv">text</span> <span class="pl-p">(</span><span class="pl-s">&#34;Coords: &#34;</span> <span class="pl-nf">++</span> <span class="pl-p">(</span><span class="pl-nv">toString</span> <span class="pl-nv">model</span><span class="pl-nf">.</span><span class="pl-nv">coords</span><span class="pl-p">))</span> <span class="pl-p">]</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">]</span></span></span></code></pre>
<p>Our <code>view</code> function takes in our model and uses Elm functions to then render
output. Great! But what are <code>SendAdress</code> and <code>UpdateAddress</code>? If you’re coming
from JavaScript, you might think these are callbacks or higher-order functions,
but they are not. They are custom message types (that we’ll define momentarily)
that will be used in our <code>update</code> function to determine what flow our
application should take next.</p>
<h2 id="6-adding-message-types">6: Adding message types</h2>
<p>Thus far, we know of two message types, <code>Update</code> and <code>SendAddress</code>, but how do
we define them? If you look at our <code>view</code> function again, you’ll see the return
type <code>Html Msg</code>. The second part of this will be the <code>type</code> that we create, and
our custom message types will be a part of that! This is something called a
<a href="https://guide.elm-lang.org/types/union_types.html">union type</a>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kt">Msg</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">=</span> <span class="pl-kt">UpdateAddress</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">|</span> <span class="pl-kt">SendAddress</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">|</span> <span class="pl-kt">NoOp</span></span></span></code></pre>
<p>We will be adding more to this shortly, but this is all we have come across thus
far.</p>
<h2 id="7-writing-our-update-function">7: Writing our update function</h2>
<p>Staying consistent with <a href="https://guide.elm-lang.org/architecture/">The Elm
Architecture</a>, we’ll define our
<code>update</code> function in order to update our data and fire off any commands that
need happen. If you’re familiar with Redux, this is where the idea for a
“reducer” came from.</p>
<p>This is tough to do in a blog post, so please be patient, and we’ll walk through
this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">update</span> <span class="pl-nf">:</span> <span class="pl-kt">Msg</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">Model</span> <span class="pl-nf">-&gt;</span> <span class="pl-p">(</span> <span class="pl-kt">Model</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span> <span class="pl-kt">Msg</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">update</span> <span class="pl-nv">msg</span> <span class="pl-nv">model</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kr">case</span> <span class="pl-nv">msg</span> <span class="pl-kr">of</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kt">UpdateAddress</span> <span class="pl-nv">text</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">(</span> <span class="pl-p">{</span> <span class="pl-nv">model</span> <span class="pl-nf">|</span> <span class="pl-nv">address</span> <span class="pl-nf">=</span> <span class="pl-nv">text</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">,</span> <span class="pl-kt">Cmd</span><span class="pl-nf">.</span><span class="pl-nv">none</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kt">SendAddress</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">(</span> <span class="pl-nv">model</span><span class="pl-p">,</span> <span class="pl-nv">sendAddress</span> <span class="pl-nv">model</span><span class="pl-nf">.</span><span class="pl-nv">address</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-c1">-- more code here shortly...</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nv">_</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">(</span> <span class="pl-nv">model</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span><span class="pl-nf">.</span><span class="pl-nv">none</span> <span class="pl-p">)</span></span></span></code></pre>
<p>Let’s walk through this step-by-step:</p>
<ul>
<li>if the message type is <code>UpdateAddress</code>, then
<ol>
<li>we’re expecting a <code>string</code> (defined in our union type)</li>
<li>we’ll call the argument <code>text</code></li>
<li>we’ll then return a tuple of our updated model and a <code>Cmd</code> to essentially
do nothing else (it’ll pass through the union type and settle on the
<code>NoOp</code>)</li>
</ol></li>
<li>if the message type is <code>SendAddress</code>, then
<ol>
<li>we’ll accept <em>no</em> parameters</li>
<li>we’ll return a tuple of our model <em>with no changes</em> and a command that we
haven’t defined yet. This is where we call the function that will actually
go and get our geocode data!</li>
</ol></li>
</ul>
<h2 id="8-making-our-request">8: Making our request</h2>
<p>In order to build and send HTTP requests, we’ll need to make sure we download
the <a href="https://github.com/elm-lang/http">elm-lang/http</a> package:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ elm package install elm-lang/http</span></span></code></pre>
<p>and import it:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kn">import </span><span class="pl-nc">Http</span></span></span></code></pre>
<p>In our <code>update</code> function, we referenced a function named <code>sendAddress</code> and
passed it our model’s address as a parameter. This function should accept a
string, initiate our HTTP request and return a command with a message.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">sendAddress</span> <span class="pl-nf">:</span> <span class="pl-kt">String</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">Cmd</span> <span class="pl-kt">Msg</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">sendAddress</span> <span class="pl-nv">address</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kt">Http</span><span class="pl-nf">.</span><span class="pl-nv">get</span> <span class="pl-p">(</span><span class="pl-nv">geocodingUrl</span> <span class="pl-nv">address</span><span class="pl-p">)</span> <span class="pl-nv">decodeGeo</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nf">|&gt;</span> <span class="pl-kt">Http</span><span class="pl-nf">.</span><span class="pl-nv">send</span> <span class="pl-kt">ReceiveGeocoding</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">geocodingUrl</span> <span class="pl-nf">:</span> <span class="pl-kt">String</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">geocodingUrl</span> <span class="pl-nv">address</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-s">&#34;http://localhost:5050/geocode/&#34;</span> <span class="pl-nf">++</span> <span class="pl-nv">address</span></span></span></code></pre>
<p>Our <code>sendAddress</code> function does this:</p>
<ol>
<li>it builds a GET request using two arguments: a URL (derived from
<code>geocodingUrl</code>) and our <code>decodeGeo</code> decoder function</li>
<li>it then pipes the return value from <code>Http.get</code> to be the second argument for
<code>Http.send</code></li>
</ol>
<p>Note that <code>Http.send</code>’s first argument is a <code>Msg</code> that we haven’t defined yet,
so let’s add that to our <code>Msg</code> union type:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">type</span> <span class="pl-kt">Msg</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">=</span> <span class="pl-kt">UpdateAddress</span> <span class="pl-kt">String</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">|</span> <span class="pl-kt">SendAddress</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">|</span> <span class="pl-kt">ReceiveGeocoding</span> <span class="pl-p">(</span><span class="pl-kt">Result</span> <span class="pl-kt">Http</span><span class="pl-nf">.</span><span class="pl-kt">Error</span> <span class="pl-kt">GeoModel</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nf">|</span> <span class="pl-kt">NoOp</span></span></span></code></pre>
<p>Basically, we’ll either get back an HTTP error or a data structure in the shape
of our <code>GeoModel</code>.</p>
<h2 id="9-handling-the-geocode-response">9: Handling the geocode response</h2>
<p>Finally, we now need to handle the successful and erroneous responses in our
update function:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nv">update</span> <span class="pl-nf">:</span> <span class="pl-kt">Msg</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">Model</span> <span class="pl-nf">-&gt;</span> <span class="pl-p">(</span> <span class="pl-kt">Model</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span> <span class="pl-kt">Msg</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">update</span> <span class="pl-nv">msg</span> <span class="pl-nv">model</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kr">case</span> <span class="pl-nv">msg</span> <span class="pl-kr">of</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kt">UpdateAddress</span> <span class="pl-nv">text</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">(</span> <span class="pl-p">{</span> <span class="pl-nv">model</span> <span class="pl-nf">|</span> <span class="pl-nv">address</span> <span class="pl-nf">=</span> <span class="pl-nv">text</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">,</span> <span class="pl-kt">Cmd</span><span class="pl-nf">.</span><span class="pl-nv">none</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kt">SendAddress</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">(</span> <span class="pl-nv">model</span><span class="pl-p">,</span> <span class="pl-nv">sendAddress</span> <span class="pl-nv">model</span><span class="pl-nf">.</span><span class="pl-nv">address</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kt">ReceiveGeocoding</span> <span class="pl-p">(</span><span class="pl-kt">Ok</span> <span class="pl-p">{</span> <span class="pl-nv">results</span><span class="pl-p">,</span> <span class="pl-nv">status</span> <span class="pl-p">})</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-kr">let</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-nv">result</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-kr">case</span> <span class="pl-nv">status</span> <span class="pl-kr">of</span>
</span></span><span class="pl-line"><span class="pl-cl">                        <span class="pl-s">&#34;OK&#34;</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">                            <span class="pl-nv">results</span>
</span></span><span class="pl-line"><span class="pl-cl">                                <span class="pl-nf">|&gt;</span> <span class="pl-kt">List</span><span class="pl-nf">.</span><span class="pl-nv">head</span>
</span></span><span class="pl-line"><span class="pl-cl">                                <span class="pl-nf">|&gt;</span> <span class="pl-kt">Maybe</span><span class="pl-nf">.</span><span class="pl-nv">withDefault</span> <span class="pl-nv">initialGeoResult</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">                        <span class="pl-nv">_</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">                            <span class="pl-nv">initialGeoResult</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-nv">location</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-nv">result</span><span class="pl-nf">.</span><span class="pl-nv">geometry</span><span class="pl-nf">.</span><span class="pl-nv">location</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-nv">newModel</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">                    <span class="pl-p">{</span> <span class="pl-nv">model</span> <span class="pl-nf">|</span> <span class="pl-nv">coords</span> <span class="pl-nf">=</span> <span class="pl-p">(</span> <span class="pl-nv">location</span><span class="pl-nf">.</span><span class="pl-nv">lat</span><span class="pl-p">,</span> <span class="pl-nv">location</span><span class="pl-nf">.</span><span class="pl-nv">lng</span> <span class="pl-p">)</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-kr">in</span>
</span></span><span class="pl-line"><span class="pl-cl">                <span class="pl-p">(</span> <span class="pl-nv">newModel</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span><span class="pl-nf">.</span><span class="pl-nv">none</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kt">ReceiveGeocoding</span> <span class="pl-p">(</span><span class="pl-kt">Err</span> <span class="pl-nv">_</span><span class="pl-p">)</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">(</span> <span class="pl-nv">model</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span><span class="pl-nf">.</span><span class="pl-nv">none</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nv">_</span> <span class="pl-nf">-&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">(</span> <span class="pl-nv">model</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span><span class="pl-nf">.</span><span class="pl-nv">none</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- This should go with other `init`s</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- but is placed here for relevance</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialGeoResult</span> <span class="pl-nf">:</span> <span class="pl-kt">GeoResult</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialGeoResult</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">geometry</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">{</span> <span class="pl-nv">location</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">{</span> <span class="pl-nv">lat</span> <span class="pl-nf">=</span> <span class="pl-mi">0</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">,</span> <span class="pl-nv">lng</span> <span class="pl-nf">=</span> <span class="pl-mi">0</span>
</span></span><span class="pl-line"><span class="pl-cl">            <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span></span></span></code></pre>
<p>Instead of having success/error logic inside one <code>ReceiveGeocoding</code> case match,
we use Elm’s pattern matching to allow us to match on the message and <code>Ok</code> or
<code>Err</code> <a href="http://package.elm-lang.org/packages/elm-lang/core/latest/Result">results</a>.</p>
<p>Again, let’s do this step-by-step:</p>
<ul>
<li><code>ReceiveGeocoding</code> is <code>OK</code>
<ol>
<li>we destructure the response into <code>results</code> and <code>status</code> variables</li>
<li>we check the value of <code>status</code> from the response to make sure all is well</li>
<li>if status is <code>"OK"</code>, we try to get the first item in the <code>results</code> list and
fallback to <code>initialGeoResult</code> if there are no results (I love Elm for
enforcing this)</li>
<li>if status is <em>not</em> <code>"OK"</code>, we fall back to the <code>initialGeoResult</code></li>
<li>we then access the <code>location</code> record, build an updated model record, and
return it</li>
</ol></li>
<li><code>ReceiveGeocoding</code> is <code>Err</code>
<ol>
<li>we simply return the model</li>
</ol></li>
</ul>
<h2 id="10-final-wiring-up-with-the-main-function--defaults">10: Final wiring up with the main function &amp; defaults</h2>
<p>Now that we’re through the core of the application’s contents, we can wire up
the remaining bits and get it to compile:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- Define our HTML program</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">main </span><span class="pl-nf">:</span> <span class="pl-kt">Program</span> <span class="pl-kt">Never</span> <span class="pl-kt">Model</span> <span class="pl-kt">Msg</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">main </span><span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kt">Html</span><span class="pl-nf">.</span><span class="pl-nv">program</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">{</span> <span class="pl-nv">init</span> <span class="pl-nf">=</span> <span class="pl-nv">init</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-nv">view</span> <span class="pl-nf">=</span> <span class="pl-nv">view</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-nv">update</span> <span class="pl-nf">=</span> <span class="pl-nv">update</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">,</span> <span class="pl-nv">subscriptions</span> <span class="pl-nf">=</span> <span class="pl-nv">subscriptions</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- Here is our initial model</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">init</span> <span class="pl-nf">:</span> <span class="pl-p">(</span> <span class="pl-kt">Model</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span> <span class="pl-kt">Msg</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">init</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">(</span> <span class="pl-nv">initialModel</span><span class="pl-p">,</span> <span class="pl-kt">Cmd</span><span class="pl-nf">.</span><span class="pl-nv">none</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialModel</span> <span class="pl-nf">:</span> <span class="pl-kt">Model</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">initialModel</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">{</span> <span class="pl-nv">address</span> <span class="pl-nf">=</span> <span class="pl-s">&#34;&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">,</span> <span class="pl-nv">coords</span> <span class="pl-nf">=</span> <span class="pl-p">(</span> <span class="pl-mi">0</span><span class="pl-p">,</span> <span class="pl-mi">0</span> <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- We&#39;re not using any subscriptions,</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">-- so we&#39;ll define none</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">subscriptions</span> <span class="pl-nf">:</span> <span class="pl-kt">Model</span> <span class="pl-nf">-&gt;</span> <span class="pl-kt">Sub</span> <span class="pl-kt">Msg</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nv">subscriptions</span> <span class="pl-nv">model</span> <span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kt">Sub</span><span class="pl-nf">.</span><span class="pl-nv">none</span></span></span></code></pre>
<p>Remember that you can look at the <a href="https://github.com/rpearce/elm-geocoding-darksky/tree/pt-2">source code for this
part</a> as a guide.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>This has been a massive post on simply fetching geocode data from an API. I’ve
found it’s difficult to write posts on Elm in little bits, for you have to have
everything in the right place and defined before it’ll work. Subsequent posts in
this series will be shorter, as we’ll have already done the heavy-lifting.</p>
<p>Until next time,
<br>
Robert</p>]]></summary>
</entry>
<entry>
    <title>Elm, Geocoding &amp; DarkSky: Pt. 1 – Setup Elm &amp; Proxy Servers</title>
    <link href="https://robertwpearce.com/elm-geocoding-darksky-pt-1-setup-elm-proxy-servers.html" />
    <id>https://robertwpearce.com/elm-geocoding-darksky-pt-1-setup-elm-proxy-servers.html</id>
    <published>2017-07-22T00:00:00Z</published>
    <updated>2017-07-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is part 1 of a multipart series where we will be building a small weather
forecast app using <a href="http://elm-lang.org/">Elm</a>, <a href="https://developers.google.com/maps/documentation/geocoding/start">Google’s Geocoding
API</a> and the
<a href="https://darksky.net/dev/">DarkSky API</a>. Instead of doing everything in one
massive post, I’ve broken the steps down into parts of a series. Here is the
series plan:</p>
<ul>
<li>Pt. 1 – Setup Elm &amp; Proxy Servers</li>
<li><a href="/elm-geocoding-and-darksky-pt-2-geocoding-an-address.html">Pt. 2 – Geocoding an Address</a></li>
<li><a href="/elm-geocoding-and-darksky-pt-3-fetching-the-current-weather.html">Pt. 3 – Fetching the Current Weather</a></li>
<li><a href="/elm-geocoding-and-darksky-pt-4-extracting-our-elm-code.html">Pt. 4 – Extracting Our Elm Code</a></li>
</ul>
<h2 id="overview">Overview</h2>
<p>This post will cover setting up <a href="http://elm-lang.org/">Elm</a>, a <a href="/node-js-geocoding-proxy-with-paperplane.html">geocoding
proxy</a>, and a <a href="https://github.com/rpearce/DarkSky-proxy/">DarkSky
proxy</a>. We’ll need all of these
things set up in order to get our weather app to work and not sacrifice our API
keys.</p>
<p>By the end of this post, you will have a “Hello, world!” Elm app with a simple
<code>./build</code> command, and you should be able to <code>cURL</code> both your geocoding and
DarkSky proxies to receive response data that we will use in the coming lessons.</p>
<h2 id="project-source-code">Project Source Code</h2>
<p>The project we’re making will be broken into parts here (branches will be named
for each part): <a href="https://github.com/rpearce/elm-geocoding-darksky/">https://github.com/rpearce/elm-geocoding-darksky/</a>.
Be sure to check out the other branches to see the other parts as they become
available.</p>
<p>The code for this part is located in the <code>pt-1</code> branch: <a href="https://github.com/rpearce/elm-geocoding-darksky/tree/pt-1">https://github.com/rpearce/elm-geocoding-darksky/tree/pt-1</a>.</p>
<h2 id="pre-requisites">Pre-requisites</h2>
<p>This tutorial assumes that you already have installed Node.js (I use <a href="https://github.com/creationix/nvm">NVM</a> for managing Node versions and am using <code>v8.3</code>).</p>
<p>Once you’ve got Node installed, we can begin.</p>
<h2 id="project-setup">Project Setup</h2>
<p>From your favorite project folder, let’s create a new project folder named
<code>elm-geocoding-darksky</code> and change the current working directory to be the new
folder:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ mkdir elm-geocoding-darksky
</span></span><span class="pl-line"><span class="pl-cl">λ cd elm-geocoding-darksky</span></span></code></pre>
<h2 id="elm">Elm</h2>
<h3 id="installing-elm">Installing Elm</h3>
<p>You can install elm via any of the methods on the <a href="https://guide.elm-lang.org/install.html">elm install
page</a> or by one of these methods:</p>
<ul>
<li>Homebrew: <code>brew install elm</code></li>
<li>Node.js: <code>npm i elm -g</code> for a global binary or <code>npm init -y &amp;&amp; npm i elm</code> to
create a <code>package.json</code> file and install <code>elm</code> to it; you’ll have to run this
latter method via <code>npx elm</code>, as it’ll be looking for the binary in your
<code>./node_modules/.bin/</code> directory)</li>
</ul>
<h3 id="elm-format">elm-format</h3>
<p>I’ve found that having a tool re-format my Elm code to an agreed-upon format
makes me more efficient and makes it easier for others to read my code. Check
out these projects for more on how to do this:</p>
<ul>
<li><a href="https://github.com/avh4/elm-format">https://github.com/avh4/elm-format</a></li>
<li><a href="https://github.com/ElmCast/elm-vim">elm-vim</a></li>
</ul>
<h3 id="adding-elm-to-a-webpage">Adding Elm to a Webpage</h3>
<p>Our goal here is to compile our elm project to an <code>elm.js</code> file and include that
on a webpage (which we’ll make in a minute).</p>
<p>First, let’s create a <code>src/</code> directory to house our source code and a <code>Main.elm</code>
file within it:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ mkdir src
</span></span><span class="pl-line"><span class="pl-cl">λ touch src/Main.elm</span></span></code></pre>
<p>Next, we want to install Elm’s HTML package so that so that we can access its
HTML-related functions:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ elm package install elm-lang/html</span></span></code></pre>
<p>Within the <code>Main.elm</code> file, add the following:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kn">module </span><span class="pl-nc">Main</span> <span class="pl-nv">exposing</span> <span class="pl-nf">(..)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kn">import </span><span class="pl-nc">Html</span> <span class="pl-nv">exposing</span> <span class="pl-p">(</span><span class="pl-nv">text</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">main </span><span class="pl-nf">=</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nv">text</span> <span class="pl-s">&#34;Hello, world!&#34;</span></span></span></code></pre>
<p>Here, we import the <code>Html</code> package that we installed, specifically expose the
<code>text</code> function from it and then use that function to tell Elm that we want some
HTML-friendly text.</p>
<p><em>Note: to learn more about the Elm language and syntax, check out the <a href="https://www.elm-tutorial.org/en/">Elm
Tutorial</a>, the <a href="https://egghead.io/courses/start-using-elm-to-build-web-applications">EggHead.io Elm
course</a>,
subscribe to <a href="https://www.dailydrip.com/topics/elm">DailyDrip’s Elm Topic</a>,
<a href="http://courses.knowthen.com">James Moore’s Elm Courses</a> or check out <a href="http://exercism.io/languages/elm/about">Elm on
exercism.io</a>.</em></p>
<p>We can then compile this and output it to <code>elm.js</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ elm make src/Main.elm --output=elm.js</span></span></code></pre>
<p>You should now have a (quite large) file, <code>elm.js</code>, in your project’s root.
We’re almost done!</p>
<p>Finally, create a new file, <code>index.html</code>, and add the following to it:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">html</span> <span class="pl-na">lang</span><span class="pl-o">=</span><span class="pl-s">&#34;en&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">title</span><span class="pl-p">&gt;</span>Weather<span class="pl-p">&lt;/</span><span class="pl-nt">title</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">meta</span> <span class="pl-na">charset</span><span class="pl-o">=</span><span class="pl-s">&#34;utf-8&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">meta</span> <span class="pl-na">name</span><span class="pl-o">=</span><span class="pl-s">&#34;viewport&#34;</span> <span class="pl-na">content</span><span class="pl-o">=</span><span class="pl-s">&#34;width=device-width, initial-scale=1&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">type</span><span class="pl-o">=</span><span class="pl-s">&#34;text/javascript&#34;</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;elm.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">(</span><span class="pl-kd">function</span><span class="pl-p">(</span><span class="pl-nx">global</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kd">var</span> <span class="pl-nx">node</span> <span class="pl-o">=</span> <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">createElement</span><span class="pl-p">(</span><span class="pl-s1">&#39;div&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">body</span><span class="pl-p">.</span><span class="pl-nx">appendChild</span><span class="pl-p">(</span><span class="pl-nx">node</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-kd">var</span> <span class="pl-nx">app</span> <span class="pl-o">=</span> <span class="pl-nx">Elm</span><span class="pl-p">.</span><span class="pl-nx">Main</span><span class="pl-p">.</span><span class="pl-nx">embed</span><span class="pl-p">(</span><span class="pl-nx">node</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">global</span><span class="pl-p">.</span><span class="pl-nx">app</span> <span class="pl-o">=</span> <span class="pl-nx">app</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">})(</span><span class="pl-nb">window</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>If you run <code>λ open index.html</code>, you should be able to view the file in the
browser and see <code>Hello, world!</code>. Congrats! You’re primed and ready to start
building.</p>
<h3 id="creating-a-build-file">Creating a Build File</h3>
<p>If you’re lazy like me, you can create an executable file, <code>build</code>, that will
perform our <code>elm make ...</code> command for us:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ touch build
</span></span><span class="pl-line"><span class="pl-cl">λ chmod +x build
</span></span><span class="pl-line"><span class="pl-cl">λ cat &lt;&lt;EOF &gt; ./build
</span></span><span class="pl-line"><span class="pl-cl">#!/bin/bash
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">elm-make src/Main.elm --output ./elm.js
</span></span><span class="pl-line"><span class="pl-cl">EOF</span></span></code></pre>
<p>This executable can now handle whatever build options and processes we’ll add
for the future (such as JavaScript minification &amp; uglifying):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ ./build
</span></span><span class="pl-line"><span class="pl-cl">Success! Compiled 1 module.
</span></span><span class="pl-line"><span class="pl-cl">Successfully generated ./elm.js</span></span></code></pre>
<h2 id="proxies">Proxies</h2>
<p>In order to not expose our API keys for geocoding and weather forecasts, we’ll
be using a separate proxy server for each service. I wrote recently wrote a post
entitled <a href="/node-js-geocoding-proxy-with-paperplane.html">Node.js Geocoding Proxy with
Paperplane</a> where you can see a
full explanation of what we’re doing and how to do it. If you don’t care about
the how and why about setting up these little servers, then just continue on!</p>
<h3 id="setting-up-your-geocoding-proxy">Setting Up Your Geocoding Proxy</h3>
<p>First, you’ll need to get a Google Maps API Key from here: <a href="https://developers.google.com/maps/documentation/geocoding/start#get-a-key">https://developers.google.com/maps/documentation/geocoding/start#get-a-key</a>.</p>
<p>Once you’ve done that, go ahead and clone or download <a href="https://github.com/rpearce/geocoding-proxy">the geocoding-proxy
project on GitHub</a> and follow the
directions to get set up. Given you’ve got Node installed, you’ve copied over
the <code>.env</code> file and set your API key in there, then running <code>λ node index.js</code>
should start the server. From another command-line tab, run this and see if you
get a similar result:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ curl localhost:5050/geocode/Auckland
</span></span><span class="pl-line"><span class="pl-cl">{&#34;results&#34;:[...]}</span></span></code></pre>
<p>If so, congrats! If you get stuck, create an issue on the <a href="https://github.com/rpearce/geocoding-proxy/issues">geocoding-proxy
issues page</a>, and I’ll see if
I can help.</p>
<h3 id="setting-up-your-darksky-proxy">Setting Up Your DarkSky Proxy</h3>
<p>(This is almost exactly like the geocoding proxy setup.)</p>
<p>First, you’ll need to get a DarkSky API Key from here: <a href="https://darksky.net/dev/">https://darksky.net/dev/</a>.</p>
<p>Once you’ve done that, go ahead and clone or download <a href="https://github.com/rpearce/DarkSky-proxy">the DarkSky-proxy project
on GitHub</a> and follow the directions
to get set up. Given you’ve got Node installed, you’ve copied over the <code>.env</code>
file and set your API key in there, then running <code>λ node index.js</code> should start
the server. From another command-line tab, run this and see if you get a similar
result:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ curl http://localhost:5051/forecast/37.8267,-122.4233
</span></span><span class="pl-line"><span class="pl-cl">{&#34;latitude&#34;:37.8267,&#34;longitude&#34;:-122.4233,...}</span></span></code></pre>
<p>If so, congrats! If you get stuck, create an issue on the <a href="https://github.com/rpearce/DarkSky-proxy/issues">DarkSky-proxy issues
page</a>, and I’ll see if I can
help.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>Thank you for reading this far! Now that we’ve got our Elm app build process set
up and your proxy servers ready to work, we can start constructing our
application piece-by-piece in the next article in the series.</p>
<p>If you’d like to be notified of when articles are published, subscribe!</p>
<p>Until next time,
<br>
Robert</p>]]></summary>
</entry>
<entry>
    <title>Node.js Geocoding Proxy with Paperplane</title>
    <link href="https://robertwpearce.com/node-js-geocoding-proxy-with-paperplane.html" />
    <id>https://robertwpearce.com/node-js-geocoding-proxy-with-paperplane.html</id>
    <published>2017-06-22T00:00:00Z</published>
    <updated>2017-07-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>tl;dr =&gt; use a proxy server when private API keys are involved;
<a href="https://github.com/articulate/paperplane">paperplane</a> is a great functional
server framework.</em></p>
<p>Converting addresses, cities and other locations to latitude and logitude and
back again is something that is expected in the software application world
today. Whether someone is asking for directions, <a href="http://www.brewpublik.com">plotting optimal beer delivery
routes</a> or tagging a photo of their cronut in a local
cafe, managing location data is an important skillset for developers to have.
Numerous services, typically in the form of <a href="https://en.wikipedia.org/wiki/Application_programming_interface">application programming
interfaces</a>
(APIs), exist to provide folks with ways of accessing this data. Today we’ll be
using the <a href="https://developers.google.com/maps/documentation/geocoding/start">Google Maps Geocoding API</a>
to complete the task of acquiring the geo-data for any place name; however, we
will be creating a <a href="https://nodejs.org">Node.js</a> server as a proxy (a
go-between) for our request instead of embedding this request in a browser.</p>
<h2 id="why-a-proxy-server">Why A Proxy Server?</h2>
<p>If you are granted an API key for a service that is private and mapped to you,
it is a good idea to keep it that way. If you commit this API key to source
control or expose it via your frontend code, then someone could take your key
and pretend to be you. In order to avoid this, it is recommended that you keep
such keys hidden, for example, as environment variables set on a server. Thus,
we are going to create a small server to act as a proxy between the client (a
web browser, app or cURL) and the API in question: the Google Maps Geocoding
API.</p>
<h2 id="why-paperplane-as-a-nodejs-server-framework">Why Paperplane as a Node.js Server Framework?</h2>
<p>It is possible to do everything you need with Node’s <code>http</code> package, but I like
the approach <a href="https://github.com/articulate/paperplane">paperplane</a> takes with
viewing the request and response aspects of handling an HTTP request as a pure
function where the request is the input and the response is what is returned
from it:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kt">Request</span> <span class="pl-ow">-&gt;</span> <span class="pl-kt">Response</span></span></span></code></pre>
<p>whereas many Node frameworks’ handlers accept a function with the request and
response as two arguments and not utilizing a return value, yielding the
signature:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">(</span><span class="pl-kt">IncomingMessage</span><span class="pl-p">,</span> <span class="pl-kt">ServerResponse</span><span class="pl-p">)</span> <span class="pl-ow">-&gt;</span> <span class="pl-nb">()</span></span></span></code></pre>
<p>The paperplane approach makes a good deal more sense to me. You can read more
about the “why” on <a href="https://github.com/articulate/paperplane/blob/master/docs/getting-started.md">paperplane’s getting started
guide</a>.</p>
<h2 id="project-source-code">Project Source Code</h2>
<p>The project we’ll be making can be seen in its entirety here: <a href="https://github.com/rpearce/geocoding-proxy/">https://github.com/rpearce/geocoding-proxy/</a>.</p>
<h2 id="pre-requisites">Pre-requisites</h2>
<p><em>Note: what we’ll be making is by no means a production-level application, as
that would be outside the scope of this post. However, there are some slightly
advanced tangential topics that I will be glossing over (sometimes providing
links to) in order to not write a book. Send me an email if I can be clearer in
certain areas.</em></p>
<p>This tutorial assumes that you already have installed Node.js (I use
<a href="https://github.com/creationix/nvm">NVM</a> for managing Node versions and am
using <code>v8.1</code>) and optionally the <a href="https://yarnpkg.com/lang/en/docs/install/">yarn package
manager</a>.</p>
<p>Once you’ve got Node and yarn installed, we can begin.</p>
<h2 id="project-setup">Project Setup</h2>
<p>From your favorite project folder, let’s create a new project folder named
<code>geocoding-proxy</code> and change the current working directory to be the new folder:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ mkdir geocoding-proxy
</span></span><span class="pl-line"><span class="pl-cl">λ cd geocoding-proxy</span></span></code></pre>
<h3 id="installing-dependencies">Installing Dependencies</h3>
<p>Once we’re in the project folder, let’s initialize a <code>package.json</code> file to make
it easy to manage and hang on to our project’s dependencies:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ npm init -y</span></span></code></pre>
<p>or if you have yarn installed:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ yarn init -y</span></span></code></pre>
<p>You should now have a <code>package.json</code> file with some JSON values in it.</p>
<p>Next, let’s install the tools that we’re going to use:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ npm install --save axios dotenv paperplane ramda</span></span></code></pre>
<p>or</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ yarn add axios dotenv paperplane ramda</span></span></code></pre>
<h3 id="get-a-google-maps-geocoding-api-key">Get A Google Maps Geocoding API Key</h3>
<p>You can get yourself an API key from <a href="https://developers.google.com/maps/documentation/geocoding/get-api-key">this
page</a>.
Once you’ve done this, you’ll need to copy the <code>.env.example</code> file at your
project’s root (<code>λ cp .env.example .env</code>) and replace the value of the <code>GEO_KEY</code>
with your API key. Your <code>.env</code> file should look like</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">GEO_KEY=abcdefg-hijklmn-op
</span></span><span class="pl-line"><span class="pl-cl">PORT=5050</span></span></code></pre>
<h2 id="hello-world-with-paperplane">Hello, World! With Paperplane</h2>
<p>Once your dependencies are installed, let’s create a server to see if we can get
things working. First, create <code>index.js</code> at your project’s root and open it in
your favorite text editor.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ touch index.js</span></span></code></pre>
<p>Next, let’s import the packages we’ll be using and create a basic “Hello,
World!” server:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Make our .env configuration file available
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;dotenv&#39;</span><span class="pl-p">).</span><span class="pl-nx">config</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Import libraries
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">http</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;http&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">compose</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;ramda&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">json</span><span class="pl-p">,</span> <span class="pl-nx">logger</span><span class="pl-p">,</span> <span class="pl-nx">methods</span><span class="pl-p">,</span> <span class="pl-nx">mount</span><span class="pl-p">,</span> <span class="pl-nx">parseJson</span><span class="pl-p">,</span> <span class="pl-nx">routes</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;paperplane&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Application-specific code
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">endpoints</span> <span class="pl-o">=</span> <span class="pl-nx">routes</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;/&#39;</span><span class="pl-o">:</span> <span class="pl-nx">methods</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">GET</span><span class="pl-o">:</span> <span class="pl-nx">req</span> <span class="pl-p">=&gt;</span> <span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nb">Promise</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">.</span><span class="pl-nx">resolve</span><span class="pl-p">(</span><span class="pl-s1">&#39;hello world&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">json</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">app</span> <span class="pl-o">=</span> <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">endpoints</span><span class="pl-p">,</span> <span class="pl-nx">parseJson</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Server options
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">opts</span> <span class="pl-o">=</span> <span class="pl-p">{</span> <span class="pl-nx">errLogger</span><span class="pl-o">:</span> <span class="pl-nx">logger</span><span class="pl-p">,</span> <span class="pl-nx">logger</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">port</span> <span class="pl-o">=</span> <span class="pl-nx">process</span><span class="pl-p">.</span><span class="pl-nx">env</span><span class="pl-p">.</span><span class="pl-nx">PORT</span> <span class="pl-o">||</span> <span class="pl-mi">3000</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">listening</span> <span class="pl-o">=</span> <span class="pl-nx">err</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">err</span> <span class="pl-o">?</span> <span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">error</span><span class="pl-p">(</span><span class="pl-nx">err</span><span class="pl-p">)</span> <span class="pl-o">:</span> <span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">info</span><span class="pl-p">(</span><span class="pl-sb">`Listening on port: </span><span class="pl-si">${</span><span class="pl-nx">port</span><span class="pl-si">}</span><span class="pl-sb">`</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Start the server
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">http</span><span class="pl-p">.</span><span class="pl-nx">createServer</span><span class="pl-p">(</span><span class="pl-nx">mount</span><span class="pl-p">(</span><span class="pl-nx">app</span><span class="pl-p">,</span> <span class="pl-nx">opts</span><span class="pl-p">)).</span><span class="pl-nx">listen</span><span class="pl-p">(</span><span class="pl-nx">port</span><span class="pl-p">,</span> <span class="pl-nx">listening</span><span class="pl-p">)</span></span></span></code></pre>
<p><em>(Read up more on how paperplane works on its <a href="https://github.com/articulate/paperplane/blob/master/docs/getting-started.md">getting started
page</a>
or by taking a look at <a href="https://github.com/articulate/paperplane/blob/master/demo/index.js">the demo application</a>.
Also check out <a href="http://ramdajs.com/docs/#compose">Ramda’s compose function</a> to
learn about effective function composition.)</em></p>
<p>We can start the server in a terminal window by running</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ node index.js
</span></span><span class="pl-line"><span class="pl-cl">Listening on port: 5050</span></span></code></pre>
<p>From another terminal window, let’s use cURL to see if this works:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ curl localhost:5050
</span></span><span class="pl-line"><span class="pl-cl">&#34;hello world&#34;</span></span></code></pre>
<p>It works!</p>
<h2 id="hello-location">Hello, Location</h2>
<p>Now that we know our server works, let’s see if we can get it to echo back a
location/address parameter we send it at a route we’ll create called <code>/geocode</code>.
Let’s remove our <code>'/'</code> endpoint and “hello, world!” code and add some for
geocoding:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">endpoints</span> <span class="pl-o">=</span> <span class="pl-nx">routes</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;/geocode/:address&#39;</span><span class="pl-o">:</span> <span class="pl-nx">methods</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">GET</span><span class="pl-o">:</span> <span class="pl-nx">req</span> <span class="pl-p">=&gt;</span> <span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nb">Promise</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">.</span><span class="pl-nx">resolve</span><span class="pl-p">(</span><span class="pl-nx">req</span><span class="pl-p">.</span><span class="pl-nx">params</span><span class="pl-p">.</span><span class="pl-nx">address</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">json</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span></span></span></code></pre>
<p>The <code>req</code> object gives us a <code>params</code> object with the key <code>address</code>, since that
was what we specified we’d like our parameter to be named by setting the
<code>/geocode/:address</code> key in the <code>routes</code> function argument.</p>
<p>With the new endpoint added, save the file, restart your server (stop it with
<code>Ctrl + C</code>), and run cURL with a city name this time:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ curl localhost:5050/geocode/Auckland
</span></span><span class="pl-line"><span class="pl-cl">&#34;Auckland&#34;</span></span></code></pre>
<h2 id="sending-to-the-geocoding-api">Sending to the Geocoding API</h2>
<p>We’re almost there! Instead of echoing back whatever address the server
receives, let’s instead make an HTTP GET request to the geocode API using the
<code>axios</code> package:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">endpoints</span> <span class="pl-o">=</span> <span class="pl-nx">routes</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;/geocode/:address&#39;</span><span class="pl-o">:</span> <span class="pl-nx">methods</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">GET</span><span class="pl-o">:</span> <span class="pl-nx">req</span> <span class="pl-p">=&gt;</span> <span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">axios</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">method</span><span class="pl-o">:</span> <span class="pl-s1">&#39;GET&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">url</span><span class="pl-o">:</span> <span class="pl-s1">&#39;https://maps.googleapis.com/maps/api/geocode/json&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">params</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-nx">key</span><span class="pl-o">:</span> <span class="pl-nx">process</span><span class="pl-p">.</span><span class="pl-nx">env</span><span class="pl-p">.</span><span class="pl-nx">GEO_KEY</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-nx">address</span><span class="pl-o">:</span> <span class="pl-nx">req</span><span class="pl-p">.</span><span class="pl-nx">params</span><span class="pl-p">.</span><span class="pl-nx">address</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">json</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span></span></span></code></pre>
<p>In this code, we are using the JavaScript Promise-based axios tool to create a
GET request to the geocode API. Take note of our <code>params</code> object here; since
we’re using the <code>dotenv</code> package and configuring that above, we get access to
the <code>GEO_KEY</code> value in our <code>.env</code> file, and we separately get to pass on the
<code>address</code> param, as well. When this request is sent, the <code>url</code> will look like:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">https://maps.googleapis.com/maps/api/geocode/json?key=abcdefg&amp;address=Auckland</span></span></code></pre>
<p>After restarting your server, run <code>λ curl localhost:5050/geocode/Auckland</code>
again.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ curl localhost:5050/geocode/Auckland
</span></span><span class="pl-line"><span class="pl-cl">{&#34;message&#34;:&#34;Converting circular structure to JSON&#34;,&#34;name&#34;:&#34;TypeError&#34;}</span></span></code></pre>
<p>Uh oh! If we log the axios result, we’ll see a big response object that we don’t
care too much about right now. The only key we want right now from this big
response is the <code>data</code> key, so we can use <a href="http://ramdajs.com/docs/#prop">Ramda’s prop
method</a> to simply access this object key and pass
its return value down the chain:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// add `prop` to the require statement
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">compose</span><span class="pl-p">,</span> <span class="pl-nx">prop</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;ramda&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">endpoints</span> <span class="pl-o">=</span> <span class="pl-nx">routes</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;/geocode/:address&#39;</span><span class="pl-o">:</span> <span class="pl-nx">methods</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">GET</span><span class="pl-o">:</span> <span class="pl-nx">req</span> <span class="pl-p">=&gt;</span> <span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">axios</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">method</span><span class="pl-o">:</span> <span class="pl-s1">&#39;GET&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">url</span><span class="pl-o">:</span> <span class="pl-s1">&#39;https://maps.googleapis.com/maps/api/geocode/json&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-nx">params</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-nx">key</span><span class="pl-o">:</span> <span class="pl-nx">process</span><span class="pl-p">.</span><span class="pl-nx">env</span><span class="pl-p">.</span><span class="pl-nx">GEO_KEY</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">          <span class="pl-nx">address</span><span class="pl-o">:</span> <span class="pl-nx">req</span><span class="pl-p">.</span><span class="pl-nx">params</span><span class="pl-p">.</span><span class="pl-nx">address</span>
</span></span><span class="pl-line"><span class="pl-cl">        <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;data&#39;</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">json</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span></span></span></code></pre>
<p>If all the stars have aligned and you restart and rerun the command again, you
should see</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">λ curl localhost:5050/geocode/Auckland
</span></span><span class="pl-line"><span class="pl-cl">{&#34;results&#34;:[{&#34;address_components&#34;:[{&#34;long_name&#34;:&#34;Auckland&#34;,&#34;short_name&#34;:&#34;Auckland&#34;,&#34;types&#34;:[&#34;locality&#34;,&#34;political&#34;]},{&#34;long_name&#34;:&#34;Auckland&#34;,&#34;short_name&#34;:&#34;Auckland&#34;,&#34;types&#34;:[&#34;administrative_area_level_1&#34;,&#34;political&#34;]},{&#34;long_name&#34;:&#34;New Zealand&#34;,&#34;short_name&#34;:&#34;NZ&#34;,&#34;types&#34;:[&#34;country&#34;,&#34;political&#34;]}],&#34;formatted_address&#34;:&#34;Auckland, New Zealand&#34;,&#34;geometry&#34;:{&#34;bounds&#34;:{&#34;northeast&#34;:{&#34;lat&#34;:-36.660571,&#34;lng&#34;:175.2871371},&#34;southwest&#34;:{&#34;lat&#34;:-37.0654751,&#34;lng&#34;:174.4438016}},&#34;location&#34;:{&#34;lat&#34;:-36.8484597,&#34;lng&#34;:174.7633315},&#34;location_type&#34;:&#34;APPROXIMATE&#34;,&#34;viewport&#34;:{&#34;northeast&#34;:{&#34;lat&#34;:-36.660571,&#34;lng&#34;:175.2871371},&#34;southwest&#34;:{&#34;lat&#34;:-37.0654751,&#34;lng&#34;:174.4438016}}},&#34;place_id&#34;:&#34;ChIJ--acWvtHDW0RF5miQ2HvAAU&#34;,&#34;types&#34;:[&#34;locality&#34;,&#34;political&#34;]}],&#34;status&#34;:&#34;OK&#34;}</span></span></code></pre>
<p>Hooray! We now have geocode response data for Auckland like:</p>
<ul>
<li><code>"status":"OK"</code></li>
<li><code>"formatted_address":"Auckland, New Zealand"</code></li>
<li><code>"location":{"lat":-36.8484597,"lng":174.7633315}</code></li>
</ul>
<h2 id="refactoring-the-routes">Refactoring the Routes</h2>
<p>As you might imagine, having all of the request handling functions inside of
paperplane’s <code>routes</code> function might get difficult to follow and modularize.
With that in mind, let’s first pull the handler function out and into its own
function:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">geocode</span> <span class="pl-o">=</span> <span class="pl-nx">req</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">axios</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">method</span><span class="pl-o">:</span> <span class="pl-s1">&#39;GET&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">url</span><span class="pl-o">:</span> <span class="pl-s1">&#39;https://maps.googleapis.com/maps/api/geocode/json&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">params</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">key</span><span class="pl-o">:</span> <span class="pl-nx">process</span><span class="pl-p">.</span><span class="pl-nx">env</span><span class="pl-p">.</span><span class="pl-nx">GEO_KEY</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">address</span><span class="pl-o">:</span> <span class="pl-nx">req</span><span class="pl-p">.</span><span class="pl-nx">params</span><span class="pl-p">.</span><span class="pl-nx">address</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;data&#39;</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">json</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">endpoints</span> <span class="pl-o">=</span> <span class="pl-nx">routes</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;/geocode/:address&#39;</span><span class="pl-o">:</span> <span class="pl-nx">methods</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">GET</span><span class="pl-o">:</span> <span class="pl-nx">geocode</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span></span></span></code></pre>
<p>You could now abstract the <code>geocode</code> function to another file if you wanted to,
as well as the object that is passed to routes (think of a routes file that
requires in the different handlers it needs).</p>
<h3 id="leveraging-ramda">Leveraging Ramda</h3>
<p>We can refactor the code above even further and make it a bit more functional
and closer to being <a href="https://lucasmreis.github.io/blog/pointfree-javascript">“point-free”</a>
by including a few Ramda helpers:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">compose</span><span class="pl-p">,</span> <span class="pl-nx">composeP</span><span class="pl-p">,</span> <span class="pl-nx">curryN</span><span class="pl-p">,</span> <span class="pl-nx">path</span><span class="pl-p">,</span> <span class="pl-nx">prop</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;ramda&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Application-specific code
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getGeocode</span> <span class="pl-o">=</span> <span class="pl-nx">curryN</span><span class="pl-p">(</span><span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-p">(</span><span class="pl-nx">key</span><span class="pl-p">,</span> <span class="pl-nx">address</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">axios</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">method</span><span class="pl-o">:</span> <span class="pl-s1">&#39;GET&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">url</span><span class="pl-o">:</span> <span class="pl-s1">&#39;https://maps.googleapis.com/maps/api/geocode/json&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">params</span><span class="pl-o">:</span> <span class="pl-p">{</span> <span class="pl-nx">key</span><span class="pl-p">,</span> <span class="pl-nx">address</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;data&#39;</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">geocode</span> <span class="pl-o">=</span> <span class="pl-nx">compose</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">composeP</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">json</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">getGeocode</span><span class="pl-p">(</span><span class="pl-nx">process</span><span class="pl-p">.</span><span class="pl-nx">env</span><span class="pl-p">.</span><span class="pl-nx">GEO_KEY</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">path</span><span class="pl-p">([</span><span class="pl-s1">&#39;params&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;address&#39;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">endpoints</span> <span class="pl-o">=</span> <span class="pl-nx">routes</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;/geocode/:address&#39;</span><span class="pl-o">:</span> <span class="pl-nx">methods</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">GET</span><span class="pl-o">:</span> <span class="pl-nx">geocode</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">app</span> <span class="pl-o">=</span> <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">endpoints</span><span class="pl-p">,</span> <span class="pl-nx">parseJson</span><span class="pl-p">)</span></span></span></code></pre>
<p>This code accomplishes the same goal as before, but now we have accomplished a
few things:</p>
<ol>
<li>We no longer access <code>req.params.address</code> – what happens if any of those
returned <code>null</code> or <code>undefined</code>? Instead, we use Ramda’s <a href="http://ramdajs.com/docs/#path">path
helper</a>.</li>
<li>Ramda’s <a href="http://ramdajs.com/docs/#compose">compose</a> rears its head again,
allowing us to make a chain of functions. However, note the use of
<a href="http://ramdajs.com/docs/#composeP">composeP</a>. The <code>getGeocode</code> function
returns a <code>Promise</code> thanks to <code>axios</code>, so we need to use <code>composeP</code> to
compose our Promise-returning function.</li>
<li>We can use <a href="http://ramdajs.com/docs/#curryN">currying</a> to accept both <code>key</code>
and <code>address</code> parameters at separate times. This is handy, for we could
partially apply our <code>key</code> once, store that in a variable and reuse it over
and over with different <code>address</code>es.</li>
<li>We have decoupled the use of paperplane’s <code>json</code> helper from <code>getGeocode</code> and
<code>axios</code>, meaning that function can now be leveraged in other ways instead of
being hard-set to JSON.</li>
</ol>
<p>If this scares the hell out of you, fear not! Check out <a href="https://egghead.io/instructors/andrew-van-slaars">Andrew van Slaar’s
Ramda lessons on egghead.io</a>,
and if you’re liking what you’re seeing, <a href="https://github.com/MostlyAdequate/mostly-adequate-guide">Dr. Boolean’s “Mostly Adequate Guide
to Functional Programming”</a>.</p>
<h2 id="all-of-the-code">All of the Code</h2>
<p>The project itself can be found at <a href="https://github.com/rpearce/geocoding-proxy">https://github.com/rpearce/geocoding-proxy</a>,
but here is our <code>index.js</code> file in its entirety:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Make our .env configuration file available
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;dotenv&#39;</span><span class="pl-p">).</span><span class="pl-nx">config</span><span class="pl-p">()</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Import libraries
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">http</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;http&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">axios</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;axios&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">compose</span><span class="pl-p">,</span> <span class="pl-nx">composeP</span><span class="pl-p">,</span> <span class="pl-nx">curryN</span><span class="pl-p">,</span> <span class="pl-nx">path</span><span class="pl-p">,</span> <span class="pl-nx">prop</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;ramda&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">json</span><span class="pl-p">,</span> <span class="pl-nx">logger</span><span class="pl-p">,</span> <span class="pl-nx">methods</span><span class="pl-p">,</span> <span class="pl-nx">mount</span><span class="pl-p">,</span> <span class="pl-nx">parseJson</span><span class="pl-p">,</span> <span class="pl-nx">routes</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;paperplane&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Application-specific code
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">getGeocode</span> <span class="pl-o">=</span> <span class="pl-nx">curryN</span><span class="pl-p">(</span><span class="pl-mi">2</span><span class="pl-p">,</span> <span class="pl-p">(</span><span class="pl-nx">key</span><span class="pl-p">,</span> <span class="pl-nx">address</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">axios</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">method</span><span class="pl-o">:</span> <span class="pl-s1">&#39;GET&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">url</span><span class="pl-o">:</span> <span class="pl-s1">&#39;https://maps.googleapis.com/maps/api/geocode/json&#39;</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">params</span><span class="pl-o">:</span> <span class="pl-p">{</span> <span class="pl-nx">key</span><span class="pl-p">,</span> <span class="pl-nx">address</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">.</span><span class="pl-nx">then</span><span class="pl-p">(</span><span class="pl-nx">prop</span><span class="pl-p">(</span><span class="pl-s1">&#39;data&#39;</span><span class="pl-p">))</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">geocode</span> <span class="pl-o">=</span> <span class="pl-nx">compose</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">composeP</span><span class="pl-p">(</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">json</span><span class="pl-p">,</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">getGeocode</span><span class="pl-p">(</span><span class="pl-nx">process</span><span class="pl-p">.</span><span class="pl-nx">env</span><span class="pl-p">.</span><span class="pl-nx">GEO_KEY</span><span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">),</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">path</span><span class="pl-p">([</span><span class="pl-s1">&#39;params&#39;</span><span class="pl-p">,</span> <span class="pl-s1">&#39;address&#39;</span><span class="pl-p">])</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">endpoints</span> <span class="pl-o">=</span> <span class="pl-nx">routes</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s1">&#39;/geocode/:address&#39;</span><span class="pl-o">:</span> <span class="pl-nx">methods</span><span class="pl-p">({</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">GET</span><span class="pl-o">:</span> <span class="pl-nx">geocode</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">app</span> <span class="pl-o">=</span> <span class="pl-nx">compose</span><span class="pl-p">(</span><span class="pl-nx">endpoints</span><span class="pl-p">,</span> <span class="pl-nx">parseJson</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Server options
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">opts</span> <span class="pl-o">=</span> <span class="pl-p">{</span> <span class="pl-nx">errLogger</span><span class="pl-o">:</span> <span class="pl-nx">logger</span><span class="pl-p">,</span> <span class="pl-nx">logger</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">port</span> <span class="pl-o">=</span> <span class="pl-nx">process</span><span class="pl-p">.</span><span class="pl-nx">env</span><span class="pl-p">.</span><span class="pl-nx">PORT</span> <span class="pl-o">||</span> <span class="pl-mi">3000</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">listening</span> <span class="pl-o">=</span> <span class="pl-nx">err</span> <span class="pl-p">=&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">err</span> <span class="pl-o">?</span> <span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">error</span><span class="pl-p">(</span><span class="pl-nx">err</span><span class="pl-p">)</span> <span class="pl-o">:</span> <span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">info</span><span class="pl-p">(</span><span class="pl-sb">`Listening on port: </span><span class="pl-si">${</span><span class="pl-nx">port</span><span class="pl-si">}</span><span class="pl-sb">`</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Start the server
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">http</span><span class="pl-p">.</span><span class="pl-nx">createServer</span><span class="pl-p">(</span><span class="pl-nx">mount</span><span class="pl-p">(</span><span class="pl-nx">app</span><span class="pl-p">,</span> <span class="pl-nx">opts</span><span class="pl-p">)).</span><span class="pl-nx">listen</span><span class="pl-p">(</span><span class="pl-nx">port</span><span class="pl-p">,</span> <span class="pl-nx">listening</span><span class="pl-p">)</span></span></span></code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Tools like Node.js with paperplane make it very easy to create proxy servers to
handle your requests in a safe fashion, so use them and always keep your API
keys secret!</p>
<h2 id="update-2017-07-30">Update: 2017-07-30</h2>
<p>I’ve seen a some feedback asking about CORS (cross-origin resource sharing), so
here’s how you can do it (useful for running things on localhost):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-p">{</span> <span class="pl-nx">cors</span><span class="pl-p">,</span> <span class="pl-p">...</span> <span class="pl-p">}</span> <span class="pl-o">=</span> <span class="pl-nx">require</span><span class="pl-p">(</span><span class="pl-s1">&#39;paperplane&#39;</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Server options
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">corsOpts</span> <span class="pl-o">=</span> <span class="pl-p">{</span> <span class="pl-nx">methods</span><span class="pl-o">:</span> <span class="pl-s1">&#39;GET&#39;</span> <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kr">const</span> <span class="pl-nx">corsApp</span> <span class="pl-o">=</span> <span class="pl-nx">cors</span><span class="pl-p">(</span><span class="pl-nx">app</span><span class="pl-p">,</span> <span class="pl-nx">corsOpts</span><span class="pl-p">)</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// ...
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Start the server
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">http</span><span class="pl-p">.</span><span class="pl-nx">createServer</span><span class="pl-p">(</span><span class="pl-nx">mount</span><span class="pl-p">(</span><span class="pl-nx">corsApp</span><span class="pl-p">,</span> <span class="pl-nx">opts</span><span class="pl-p">)).</span><span class="pl-nx">listen</span><span class="pl-p">(</span><span class="pl-nx">port</span><span class="pl-p">,</span> <span class="pl-nx">listening</span><span class="pl-p">)</span></span></span></code></pre>
<p>Read more about paperplane’s CORS API in <a href="https://github.com/articulate/paperplane/blob/master/docs/API.md#cors">paperplane’s CORS
docs</a>.</p>]]></summary>
</entry>
<entry>
    <title>Behaviour &amp; Your Team</title>
    <link href="https://robertwpearce.com/behaviour-your-team.html" />
    <id>https://robertwpearce.com/behaviour-your-team.html</id>
    <published>2017-06-02T00:00:00Z</published>
    <updated>2017-06-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is a talk I gave back in February at the <a href="http://conference.javascript.org.nz/">New Zealand JavaScript
Conference</a> on <em>Behaviour &amp; Your Team</em>.</p>
<iframe
  allowfullscreen
  frameborder="0"
  height="315"
  loading="lazy"
  src="https://www.youtube.com/embed/tkdT41EMzbc"
  width="560"
  style="margin-top:2rem;"
>
</iframe>]]></summary>
</entry>
<entry>
    <title>Travel Ruminations</title>
    <link href="https://robertwpearce.com/travel-ruminations.html" />
    <id>https://robertwpearce.com/travel-ruminations.html</id>
    <published>2017-02-20T00:00:00Z</published>
    <updated>2017-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Travel is a way of discarding what you know and embracing that which is strange;
a way of unburdening the comforts of life in search of a truth about which you
cannot quite say, but you know it exists.</p>
<p>But it is as important to remember yourself and your values as you explore
strange new lands. Frodo quoted Bilbo in <em>The Lord of the Rings</em>,</p>
<blockquote>
<p>It’s a dangerous business, Frodo, going out your door.
You step onto the road, and if you don’t keep your feet,
there’s no knowing where you might be swept off to.</p>
</blockquote>
<p>Thus, travel is as much about discovering wonderful new places and customs as it
is holding on to what makes you who you are, hoping that the “you” that makes it
back home isn’t the stranger you encountered on the road but a combination of
the best aspects of both you and it.</p>]]></summary>
</entry>
<entry>
    <title>Turning A New Leaf</title>
    <link href="https://robertwpearce.com/turning-a-new-leaf.html" />
    <id>https://robertwpearce.com/turning-a-new-leaf.html</id>
    <published>2016-02-22T00:00:00Z</published>
    <updated>2016-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Two weeks ago today, I quit a rewarding and lucrative job without having another
gig lined up. Oh, sh*t.</p>
<h2 id="the-immediate-aftermath">The Immediate Aftermath</h2>
<p>The following day consisted of my mind completely shutting down after being
unable to answer the following questions:</p>
<ul>
<li>What do I do about health &amp; dental insurance?</li>
<li>How am I going to pay for life?
<ul>
<li>rent (in London)</li>
<li>food/house supplies</li>
<li>transportation</li>
<li>what if I break my leg?</li>
<li>what if I get <a href="http://www.medicaldaily.com/55000-snake-bite-has-uninsured-maryland-woman-jules-weiss-searching-options-anti-venom-costs-more">bit by a snake like Jules
Weiss</a>
and get footed a $55,000 bill?</li>
</ul></li>
<li>Should I start looking for a new job?</li>
<li>Should I get an actual undergrad degree in the industry I’m in? (how to afford
this without debt?)</li>
<li>Should I go to business school? (how to afford this without debt?)</li>
<li>Am I in the right industry?</li>
<li>Should I start over?</li>
</ul>
<p>Apple’s Healthkit app on my phone told me I walked <em>10 steps</em> that day and not
many more the next. Clearly, something had to be done.</p>
<h2 id="organizing-my-concerns">Organizing My Concerns</h2>
<p>After a few days of lethargy and absorption of what I’d done and what had
happened, my mind became restless and went back in to “solve all the things!”
mode. When something feels like too big of a task, I remember what my father has
asked me since childhood, <em>How do you eat an elephant? One bite at a time.</em> Now,
I am not advocating for the consumption of elephants, but you get the point. It
was time to break the problem of “What do I do next?” in to many smaller,
solvable problems.</p>
<p><em>Disclaimer: I am not an healthcare nor life expert; this is a story.</em></p>
<h3 id="healthcare--retirement-accounts">Healthcare &amp; Retirement Account(s)</h3>
<p>When it comes to the unknown, humility is an asset, for you cannot possibly know
everything about everything, so it’s okay to ask people for help. If you’re in
this position, make sure you listen to your human resources contact at the
company you’re leaving, specifically</p>
<ul>
<li>how long your healthcare is covered for under their plan</li>
<li>the details about making the COBRA election to extend your healthcare at your
own cost</li>
<li>if you have a high-deductible healthcare plan and have a health savings
account (HSA) of your own, what can you do with this? How does that work, and
where do I go from here with it? It is yours, but their advice is valuable.</li>
<li>how you can rollover your retirement accounts in to other ones? (I have my
own, managed via Schwab)</li>
</ul>
<p>Additionally, consult your bank/brokerage firm/family/life liason about what
your options are and what they think you need to do to ensure you are handling
these things correctly. This is what I have been doing, and it is such a relief
when someone can help you down your path.</p>
<h3 id="paying-for-life">Paying for Life</h3>
<p>Naturally, since I have no income until I either sell a product or do freelance
work, expenses have had to be slashed. Eating out, pubs, entertainment, etc.,
are not great expenses until I add up their cost over a year. Rent, healthcare
and car insurance are the major killers. There’s no way I’d be able to even be
thinking this way with a family to support, so I’ve got it relatively easy.
Luckily, I saved up a bit of money before quitting, so I am cushioned for a
little bit.</p>
<p>However, frugal is the word.</p>
<h3 id="what-do-i-want-and-need">What Do I Want and Need?</h3>
<p>Once I got past the immediate financial and health issues I was able to start
tackling the next question: <em>what do I want and need?</em></p>
<p>I came up with potential paths to go down, sought advice from family and
friends, and came up with the things I need in my life:</p>
<ul>
<li>be where I need to be (with my significant other after a year apart)</li>
<li>recover from the mindset I’ve been in for the last 6 months and allow myself
to change and not be defined by it</li>
<li>level-up my programming skills and algorithmic knowledge</li>
<li>make something that matters and which matters <em>to me</em></li>
<li>work for myself for a bit</li>
</ul>
<p>There were so many other contenders that, after examing what mattered to me and
defining what was just outside my sphere of knowledge and influence, didn’t make
sense for right now.</p>
<h2 id="turning-a-new-leaf">Turning a New Leaf</h2>
<p>Currently, I am spending my days focused on learning and working. Here’s my
routine:</p>
<ul>
<li>wake up, brew some tea or coffee</li>
<li>light exercise</li>
<li>solve coding problems on <a href="http://www.codewars.com/">CodeWars</a></li>
<li>work on basic algebra/trig/geometry/calculus skills that I either don’t
remember or never learned via worksheets</li>
<li>spend 4-5 hours on a MOOC (massive open online course)</li>
<li>exercise</li>
<li>spend the rest of the working day working on my own projects (or, eventually,
freelance work)</li>
<li>play my guitar and record music or a potential podcast</li>
<li>enjoy life and friends</li>
</ul>
<p>This daily routine allows me to get things done that matter to me, cut out the
things that don’t and make sure I stop and smell the flowers along the way.</p>
<h2 id="thank-yous">Thank Yous</h2>
<p>Thank you Emily, my family, <a href="https://www.linkedin.com/in/javanderslice">Jason Vanderslice</a>,
<a href="https://twitter.com/bauermarty">Marty Bauer</a>,
<a href="https://twitter.com/jamesdabbs">James Dabbs</a> and the rest of you (you know who
you are) for your guidance, encouragement and friendship.</p>]]></summary>
</entry>
<entry>
    <title>Missing Those We Love</title>
    <link href="https://robertwpearce.com/missing-those-we-love.html" />
    <id>https://robertwpearce.com/missing-those-we-love.html</id>
    <published>2016-02-02T00:00:00Z</published>
    <updated>2016-02-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Perspective is a strange thing. It rips us out of our frame of thought, showing
us our lives from a different point of view, forcing an evolution of ourselves
for which we may not have asked. One such perspective I’ve encountered numerous
times and resisted is the fact that those whom I care about will not always be
around; they won’t always be back home; they won’t always be alive; they won’t
always wait for me to return. This naturally leads to questions like <em>where am I
now, and what am I really doing here? Why? Is it worth all the lost time with
those you care about?</em> You hope so. You hope to live without regret and to have
lived life to the fullest. But then perspective grabs hold, and while the
whiplash is still fresh, turns you on your head.</p>
<p>It is never too late until it is. Right this very instant, no matter what your
logical brain thinks, you can go home, bake a cake with grandma, ride bikes with
your aunt, watch the sun set with a sibling and/or make dinner with old friends
who are now married and settling down.</p>
<p>Make sure you ask yourself, if you are away, <em>why</em> you are doing what you are
doing. If there is no good answer, act on it before the feeling passes. If there
is a good answer, then stop what you’re doing and give someone you miss a call.</p>]]></summary>
</entry>
<entry>
    <title>Freelancing</title>
    <link href="https://robertwpearce.com/freelancing.html" />
    <id>https://robertwpearce.com/freelancing.html</id>
    <published>2015-10-14T00:00:00Z</published>
    <updated>2015-10-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Sandy beaches; downhill skiing; coffee shop Hugh Grant-esque romance. When
people imagine themselves leaving their corporate jobs and becoming their own
boss, moving from project to project as a knife through butter, they envision
themselves living the good life and doing so <em>on their terms</em>. This is
absolutely possible to achieve, but as with anything, freelancing isn’t all
rainbows and unicorns! But we want rainbows; we want unicorns. How can we get to
this point? Let’s start at the bottom.</p>
<h2 id="freelancing-is-tough">Freelancing is Tough</h2>
<p>As soon as you leave your large organization, there is a very strange sensation
that is exhilarating and terrifying all at once: <em>I am now responsible for
everything, and if I fail at any one thing in this chain, I fail.</em> What is
encompassed by “everything?” Let’s take a look at what we’ll talk about for the
rest of the post: software freelancing.</p>
<ul>
<li>Marketing</li>
<li>Sales</li>
<li>Strategy</li>
<li>Research</li>
<li>Development
<ul>
<li>Frontend: UI, UX, prototyping, information architecture, functionality,
QA/testing</li>
<li>Backend: API, server architecture, data stores, scaling, QA/testing</li>
<li>Or both</li>
</ul></li>
<li>Invoicing</li>
</ul>
<p>Here’s some very basic logic based off of these responsibilities:</p>
<ul>
<li>If you cannot market yourself and your skills, you cannot get in the door.</li>
<li>If you cannot sell, you cannot close a deal.</li>
<li>If you cannot build the product in a timely fashion and deliver what you
promised, you’ll be in trouble.</li>
<li>If you cannot collect money from clients, your business does not get paid.</li>
<li>If any of these steps fail, the path to getting paid is closed.</li>
</ul>
<p>What’s more, how do you know if the client you are selling is a client you
actually want to work with? How can both parties vet one another?</p>
<h2 id="building-relationships">Building Relationships</h2>
<p>One way to get around many of the issues you run in to while freelancing that
are related more to the business side than what you actually create is to foster
relationships with businesses locally (or remotely, if you can manage that
across the Internet). Attending meetups, lectures, happy hours, conferences,
hackathons, open houses and the like are great ways to meet folks in your
community and get to know them and their businesses. The more knowledgeable all
parties are with one another, the more they can suss out whether or not they
want to work with each other. Once someone has a good experience with you, it is
more likely that they will come to you again to solve their problems.</p>
<p>If you can build enough relationships, you may not need to go outside of your
local community for work. But what if your city doesn’t have enough work for you
or you travel regularly? What if you want to expand your freelance reach to a
national level?</p>
<h2 id="finding-non-local-work">Finding Non-Local Work</h2>
<p>Without an agency or consultancy brand name behind you, finding work from
organizations outside of your network could be difficult. There are a number of
services which help you, such as <a href="https://www.elance.com/">Elance</a> and
<a href="https://gun.io/">Gun.io</a>, but the one that really caught my eye was
<a href="https://www.toptal.com">toptal</a>.</p>
<p>What really stuck out to me was the concept of their only accepting what they
call the <a href="http://www.toptal.com/top-3-percent">“top 3%”</a> of people that apply.
Their rigid screening process ensures that only quality developers are admitted
to their community. To me, this guarantees prestige and sets the bar very high.
This also means that, as a marketplace, toptal would need to ensure that clients
are legit and responsible, as well. In sum, toptal</p>
<ul>
<li>connects you (freelancer) with vetted, great employers</li>
<li>gives businesses an elite group of A+ players from which to choose for their business’ needs</li>
<li>handles the money</li>
</ul>
<p>and much more.</p>
<p>I want to work with the best clients, and I want clients to receive the best
work possible. I have just started the process for joining <a href="http://www.toptal.com/web">the toptal Web
developers network</a> to pick up additional work, look
forward to the challenges of the screening process and hope to make it through!</p>
<h2 id="do-what-works-for-you">Do What Works For You</h2>
<p>If you enjoy working in your local area, then get to work building relationships
and a pipeline of backed up work as far as the eye can see with people in your
area! But if you plan on going national/international, consider giving
<a href="https://www.toptal.com">toptal</a> a shot and show them what you’re made of.</p>]]></summary>
</entry>
<entry>
    <title>Simple Variadic Behavior</title>
    <link href="https://robertwpearce.com/simple-variadic-behavior.html" />
    <id>https://robertwpearce.com/simple-variadic-behavior.html</id>
    <published>2015-10-13T00:00:00Z</published>
    <updated>2015-10-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p style="text-decoration:line-through;">
  Recently, I have started working on my own static site generator,
  <a href="https://github.com/rpearce/react-static">react-static</a>, to
  accomodate my markdown blog posting & static site needs. Another benefit is that
  I get to work on my Node.js and ES2015+ JavaScript skills. While I am
  reinventing the wheel on some levels, it is good practice.
</p>
<p><strong>Update</strong>: I made a library, <a href="https://www.npmjs.com/package/parse-md">parse-md</a>,
out of some of this behavior in order to address the need of parsing metadata
from markdown files.</p>
<p>My latest problem to solve was how, once I had a <code>.md</code> (Markdown) file’s
contents, to go about parsing out the blog post’s metadata (see below: the
key/value pairs between the two <code>---</code>s).</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">---
</span></span><span class="pl-line"><span class="pl-cl">title: This is a test
</span></span><span class="pl-line"><span class="pl-cl">description: Once upon a time, there was a test...
</span></span><span class="pl-line"><span class="pl-cl">---
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gh"># Title of my great post
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gh"></span>Lorem ipsum dolor...
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gu">## Some heading
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-gu"></span>Bacon ipsum...</span></span></code></pre>
<p>Once I <code>split</code> this file based on newlines, I needed a way of finding the
indices of the metadata boundary, <code>---</code>, so that I could <code>splice</code> the array in
to two pieces and be on my way. My first attempt at getting the indices looked
like this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">getMetadataIndices</span><span class="pl-p">(</span><span class="pl-nx">lines</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kd">var</span> <span class="pl-nx">arr</span> <span class="pl-o">=</span> <span class="pl-p">[];</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">lines</span><span class="pl-p">.</span><span class="pl-nx">forEach</span><span class="pl-p">((</span><span class="pl-nx">line</span><span class="pl-p">,</span> <span class="pl-nx">i</span><span class="pl-p">)</span> <span class="pl-p">=&gt;</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-sr">/^---/</span><span class="pl-p">.</span><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-nx">line</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">      <span class="pl-nx">arr</span><span class="pl-p">.</span><span class="pl-nx">push</span><span class="pl-p">(</span><span class="pl-nx">i</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">});</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">arr</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getMetadataIndices</span><span class="pl-p">(</span><span class="pl-nx">lines</span><span class="pl-p">);</span> <span class="pl-c1">// [0, 3]
</span></span></span></code></pre>
<p>This is a simple solution that any junior dev can do, and it accomplishes the
task… but it doesn’t feel right. I am iterating over each item, testing each
line and mutating an array variable when a condition is true. While it doesn’t
look like much, that is a good bit going on all at once. Instinct tells me that
each action could be its own simple method. I also don’t want to use a temporary
variable that I mutate. However, this removes <code>forEach</code> from our options, as
<code>forEach</code> returns the original array. <code>map()</code> to the rescue! (or so we think).</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">getMetadataIndices</span><span class="pl-p">(</span><span class="pl-nx">lines</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">lines</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">testForBoundary</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">testForBoundary</span><span class="pl-p">(</span><span class="pl-nx">item</span><span class="pl-p">,</span> <span class="pl-nx">i</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-sr">/^---/</span><span class="pl-p">.</span><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-nx">item</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">i</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getMetadataIndices</span><span class="pl-p">(</span><span class="pl-nx">lines</span><span class="pl-p">);</span> <span class="pl-c1">// [0, undefined, undefined, 3, undefined, undefined, undefined, undefined, undefined, undefined]
</span></span></span></code></pre>
<p>Crap. Because I only return when the test is true, <code>map</code> doesn’t know what to
return, so it returns <code>undefined</code> and moves on. It would be nice if we could
clean out these <code>undefined</code>s!</p>
<h2 id="cleaning-up-our-array">Cleaning Up Our Array</h2>
<p>How can we achieve the following desired functionality?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">getMetadataIndices</span><span class="pl-p">(</span><span class="pl-nx">lines</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">lines</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">testForBoundary</span><span class="pl-p">).</span><span class="pl-nx">clean</span><span class="pl-p">(</span><span class="pl-kc">undefined</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">getMetadataIndices</span><span class="pl-p">(</span><span class="pl-nx">lines</span><span class="pl-p">);</span> <span class="pl-c1">// [0, 3]
</span></span></span></code></pre>
<p>Let’s make a function on the <code>prototype</code> of <code>Array</code> called <code>clean</code>:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">clean</span> <span class="pl-o">=</span> <span class="pl-kd">function</span><span class="pl-p">(</span><span class="pl-nx">trash</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">};</span></span></span></code></pre>
<p>Here, we access <code>Array</code>’s <code>prorotype</code> and add our own custom method, <code>clean</code> and
pass it one argument. Next, we need to <code>filter</code> out all of the <code>undefined</code>s in
our array.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">clean</span> <span class="pl-o">=</span> <span class="pl-kd">function</span><span class="pl-p">(</span><span class="pl-nx">trash</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-k">this</span><span class="pl-p">.</span><span class="pl-nx">filter</span><span class="pl-p">(</span><span class="pl-nx">item</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">item</span> <span class="pl-o">!==</span> <span class="pl-nx">trash</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">};</span></span></span></code></pre>
<p>But what if we need to clean more than one value out? What if we need to clean
<code>null</code>, <code>""</code> and <code>undefined</code>?</p>
<h2 id="variadic-behavior">Variadic Behavior</h2>
<p>In JavaScript, <em>variadic behavior</em> is a fancy term applied to functions that can
accept and handle any number of arguments, and these are typically accessed
within the function via the <code>arguments</code> object, which looks like an <code>Array</code> but
is <em>not</em>. For example, this code will give you an error about <code>indexOf</code> not
being defined on <code>arguments</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">clean</span> <span class="pl-o">=</span> <span class="pl-kd">function</span><span class="pl-p">(</span><span class="pl-nx">trash</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-k">this</span><span class="pl-p">.</span><span class="pl-nx">filter</span><span class="pl-p">(</span><span class="pl-nx">item</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">arguments</span><span class="pl-p">.</span><span class="pl-nx">indexOf</span><span class="pl-p">(</span><span class="pl-nx">item</span><span class="pl-p">)</span> <span class="pl-o">===</span> <span class="pl-o">-</span><span class="pl-mi">1</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">};</span></span></span></code></pre>
<p>Drats! <code>arguments</code> is very similar to an array — how can we get this to work? <code>slice</code> to the rescue!</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">clean</span> <span class="pl-o">=</span> <span class="pl-kd">function</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">args</span> <span class="pl-o">=</span> <span class="pl-p">[].</span><span class="pl-nx">slice</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">(</span><span class="pl-nx">arguments</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-k">this</span><span class="pl-p">.</span><span class="pl-nx">filter</span><span class="pl-p">(</span><span class="pl-nx">item</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">args</span><span class="pl-p">.</span><span class="pl-nx">indexOf</span><span class="pl-p">(</span><span class="pl-nx">item</span><span class="pl-p">)</span> <span class="pl-o">===</span> <span class="pl-o">-</span><span class="pl-mi">1</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">};</span></span></span></code></pre>
<p>Without any additional arguments, <code>slice</code> makes a copy of an array and allows us
to provide a custom receiver of array-like functionality: <code>arguments</code>. What is
returned from the second line above is an array-ized <em>copy</em> of <code>arguments</code>. Now
that <code>args</code> is an array of all the arguments that are passed to <code>clean</code>, we can
pass as many options as we would like to clean out our array!</p>
<p>Here is more example usage of such a method:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// Usage
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kr">const</span> <span class="pl-nx">arr</span> <span class="pl-o">=</span> <span class="pl-p">[</span><span class="pl-s2">&#34;&#34;</span><span class="pl-p">,</span> <span class="pl-kc">undefined</span><span class="pl-p">,</span> <span class="pl-mi">3</span><span class="pl-p">,</span> <span class="pl-s2">&#34;yes&#34;</span><span class="pl-p">,</span> <span class="pl-kc">undefined</span><span class="pl-p">,</span> <span class="pl-kc">undefined</span><span class="pl-p">,</span> <span class="pl-s2">&#34;&#34;</span><span class="pl-p">];</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">arr</span><span class="pl-p">.</span><span class="pl-nx">clean</span><span class="pl-p">(</span><span class="pl-kc">undefined</span><span class="pl-p">);</span> <span class="pl-c1">// [&#34;&#34;, 3, &#34;yes&#34;, &#34;&#34;];
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-nx">arr</span><span class="pl-p">.</span><span class="pl-nx">clean</span><span class="pl-p">(</span><span class="pl-kc">undefined</span><span class="pl-p">,</span> <span class="pl-s2">&#34;&#34;</span><span class="pl-p">);</span> <span class="pl-c1">// [3, &#34;yes&#34;];
</span></span></span></code></pre>
<h2 id="all-together">All Together</h2>
<p>In attempting to refactor some fairly simple, though multiple-responsibility
code, we end up creating a few reusable functions that will benefit us in the
future, and we make our code more maintainable, testable and readable in the
end. Here it is once we have finished:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">getMetadataIndices</span><span class="pl-p">(</span><span class="pl-nx">lines</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">lines</span><span class="pl-p">.</span><span class="pl-nx">map</span><span class="pl-p">(</span><span class="pl-nx">testForBoundary</span><span class="pl-p">).</span><span class="pl-nx">clean</span><span class="pl-p">(</span><span class="pl-kc">undefined</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">testForBoundary</span><span class="pl-p">(</span><span class="pl-nx">item</span><span class="pl-p">,</span> <span class="pl-nx">i</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-sr">/^---/</span><span class="pl-p">.</span><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-nx">item</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-k">return</span> <span class="pl-nx">i</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nb">Array</span><span class="pl-p">.</span><span class="pl-nx">prototype</span><span class="pl-p">.</span><span class="pl-nx">clean</span> <span class="pl-o">=</span> <span class="pl-kd">function</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kr">const</span> <span class="pl-nx">args</span> <span class="pl-o">=</span> <span class="pl-p">[].</span><span class="pl-nx">slice</span><span class="pl-p">.</span><span class="pl-nx">call</span><span class="pl-p">(</span><span class="pl-nx">arguments</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-k">this</span><span class="pl-p">.</span><span class="pl-nx">filter</span><span class="pl-p">(</span><span class="pl-nx">item</span> <span class="pl-p">=&gt;</span> <span class="pl-nx">args</span><span class="pl-p">.</span><span class="pl-nx">indexOf</span><span class="pl-p">(</span><span class="pl-nx">item</span><span class="pl-p">)</span> <span class="pl-o">===</span> <span class="pl-o">-</span><span class="pl-mi">1</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">};</span></span></span></code></pre>
<p>But could this be done <em>even</em> simpler?</p>
<h2 id="ps-use-reduce-next-time">p.s. Use reduce next time</h2>
<p>You may have been wondering why we didn’t use <code>reduce</code> like this from the start:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-nx">lines</span><span class="pl-p">.</span><span class="pl-nx">reduce</span><span class="pl-p">(</span><span class="pl-kd">function</span><span class="pl-p">(</span><span class="pl-nx">mem</span><span class="pl-p">,</span> <span class="pl-nx">item</span><span class="pl-p">,</span> <span class="pl-nx">i</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-sr">/^---/</span><span class="pl-p">.</span><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-nx">item</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">mem</span><span class="pl-p">.</span><span class="pl-nx">push</span><span class="pl-p">(</span><span class="pl-nx">i</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">mem</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">});</span></span></span></code></pre>
<p>or, cleaned up a bit,</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-kd">function</span> <span class="pl-nx">getMetadataIndices</span><span class="pl-p">(</span><span class="pl-nx">mem</span><span class="pl-p">,</span> <span class="pl-nx">item</span><span class="pl-p">,</span> <span class="pl-nx">i</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">if</span> <span class="pl-p">(</span><span class="pl-sr">/^---/</span><span class="pl-p">.</span><span class="pl-nx">test</span><span class="pl-p">(</span><span class="pl-nx">item</span><span class="pl-p">))</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">mem</span><span class="pl-p">.</span><span class="pl-nx">push</span><span class="pl-p">(</span><span class="pl-nx">i</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">mem</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">lines</span><span class="pl-p">.</span><span class="pl-nx">reduce</span><span class="pl-p">(</span><span class="pl-nx">getMetadataIndices</span><span class="pl-p">,</span> <span class="pl-p">[]);</span></span></span></code></pre>
<p>Surprise! We totally could have, but since <code>reduce</code> was not our first thought
when refactoring, we managed to solve our problem in another way. There are 1000
ways to solve problems, and sometimes you don’t think of the best one first, but
you can still make the best with what you have at the time and refactor later.</p>]]></summary>
</entry>
<entry>
    <title>Immediate Functions</title>
    <link href="https://robertwpearce.com/immediate-functions.html" />
    <id>https://robertwpearce.com/immediate-functions.html</id>
    <published>2015-10-06T00:00:00Z</published>
    <updated>2015-10-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>This article is intended for JavaScript beginners.</em></p>
<p>The browser environment is one big JavaScript <code>closure</code> that will encapsulate in
its <code>scope</code> all of the code that is to be run. Because of this, any functions or
variables that are created in <code>&lt;script&gt;</code> tags or external <code>.js</code> files that are
<em>not</em> defined within a function will end up as global variables! And we all know
that global varibles are bad. Let’s dig in to this some more.</p>
<p>Every time you define a function and then define a variable with <code>var</code> inside of
that function, that variable <em>only</em> exists inside of that function. For example,
what is the value of <code>result</code> that is logged to the console?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// app.js
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kd">function</span> <span class="pl-nx">kelvinToFahrenheit</span><span class="pl-p">(</span><span class="pl-nx">kelvin</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kd">var</span> <span class="pl-nx">result</span> <span class="pl-o">=</span> <span class="pl-nb">Math</span><span class="pl-p">.</span><span class="pl-nx">round</span><span class="pl-p">(</span><span class="pl-nx">kelvin</span> <span class="pl-o">*</span> <span class="pl-p">(</span><span class="pl-mi">9</span><span class="pl-o">/</span><span class="pl-mi">5</span><span class="pl-p">)</span> <span class="pl-o">-</span> <span class="pl-mf">459.67</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-k">return</span> <span class="pl-nx">result</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">kelvinToFahrenheit</span><span class="pl-p">(</span><span class="pl-mf">274.3</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-nx">console</span><span class="pl-p">.</span><span class="pl-nx">log</span><span class="pl-p">(</span><span class="pl-nx">result</span><span class="pl-p">);</span></span></span></code></pre>
<p>The correct answer would be <code>undefined</code> (with a nice error), for <code>result</code> only
exists within the <code>scope</code> of the <code>kelvinToFahrenheit</code> function. However, the
function <code>kelvinToFahrenheit</code> now exists globally.</p>
<p>Why does this matter? Well, when you include a script on to a web page, its code
now becomes part of this global closure. So if you define
<code>function kelvinToFahrenheit()</code> without giving it a separate closure or
namespace (more on namespaces in a second), then it is now a “global function,”
meaning that it exists in the global namespace. If any other library you ever
include uses a variable called <code>router</code>, your variable (or that library’s) is
going to overwrite whichever came before it and cause massive issues. The same
thing is true for variables:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// app.js
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-kd">var</span> <span class="pl-nx">currentTempInKelvin</span> <span class="pl-o">=</span> <span class="pl-mf">294.11</span><span class="pl-p">;</span></span></span></code></pre>
<p>So what are your options?</p>
<h2 id="immediately-invoked-function-expressions-iifes">Immediately Invoked Function Expressions (IIFEs)</h2>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// app.js
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">;(</span><span class="pl-kd">function</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-c1">// your code here
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">})();</span></span></span></code></pre>
<p>The semi-colon here is a defensive technique used for when files are
concatenated together–if somebody in one file forgets to close their
file/library/definition out with a semi-colon, then your code is going to be an
extension of theirs.</p>
<p>The <code>()</code> towards the end is nothing more than the invocation of the immediate
function we’ve defined.</p>
<p>Thus, when you write</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// app.js
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">;(</span><span class="pl-kd">function</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kd">var</span> <span class="pl-nx">currentTempInKelvin</span> <span class="pl-o">=</span> <span class="pl-mf">294.11</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})();</span></span></span></code></pre>
<p>and then you try to <code>console.log(currentTempInKelvin);</code> from the browser’s
JavaScript console, you will get <code>undefined</code>, for <code>currentTempInKelvin</code> now only
exists within that anonymous function’s scope. Hurray! No more globals.</p>
<hr />
<p>But what if we want to access something in a global fashion? We know about the
problems of name-clashing, so let’s also try to reduce that. Let’s combine what
you did with the immediate function and do global variables in a less-bad way
using <em>namespacing</em>.</p>
<h2 id="namespacing">Namespacing</h2>
<p>Namespacing allows us to limit our use of global variables to one global by
nesting all of our functionality within one global object that we’ll call
<code>WeatherApp</code>.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// app.js
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// No var declaration means global!
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">;(</span><span class="pl-kd">function</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">WeatherApp</span> <span class="pl-o">=</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">kelvinToFahrenheit</span><span class="pl-o">:</span> <span class="pl-p">{}</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">};</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})();</span></span></span></code></pre>
<p>or</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// app.js
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">;(</span><span class="pl-kd">function</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">WeatherApp</span> <span class="pl-o">=</span> <span class="pl-p">{};</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">WeatherApp</span><span class="pl-p">.</span><span class="pl-nx">kelvinToFahrenheit</span> <span class="pl-o">=</span> <span class="pl-p">{};</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})();</span></span></span></code></pre>
<p>or (better)</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// app.js
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">;(</span><span class="pl-kd">function</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">WeatherApp</span> <span class="pl-o">=</span> <span class="pl-p">{};</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">WeatherApp</span><span class="pl-p">.</span><span class="pl-nx">kelvinToFahrenheit</span> <span class="pl-o">=</span> <span class="pl-p">{};</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})();</span></span></span></code></pre>
<p>or (recommended)</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-c1">// app.js
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span><span class="pl-p">;(</span><span class="pl-kd">function</span><span class="pl-p">(</span><span class="pl-nx">scope</span><span class="pl-p">)</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">scope</span><span class="pl-p">.</span><span class="pl-nx">WeatherApp</span> <span class="pl-o">=</span> <span class="pl-p">{};</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nx">scope</span><span class="pl-p">.</span><span class="pl-nx">WeatherApp</span><span class="pl-p">.</span><span class="pl-nx">router</span> <span class="pl-o">=</span> <span class="pl-p">{};</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">})(</span><span class="pl-k">this</span><span class="pl-p">);</span></span></span></code></pre>
<p>This last method allows you to use this code and pass in any contextual scope.
Since <code>this</code> is equivalent to <code>window</code> at the global level, when you run this in
the browser, <code>this</code> is <code>window</code>, so <code>WeatherApp</code> will be added to the <code>window</code>
global.</p>
<p>When you leave out the <code>var</code>, you create a global variable, so be careful! I
recommend being explicit with to what object you are adding a <code>namespace</code>. If
you’re going the global variable route, then you should nest every single thing
you’re doing inside of your <code>WeatherApp</code> namespace in order to avoid having more
than 1 global variable.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This is a great pattern to utilize when you have relatively simple JavaScript
you would like to add to a webpage and not have its contents clash with other
libraries &amp; code. If your code begins to get too complicated for this file, then
we can start to look at the <a href="http://wiki.commonjs.org/wiki/Modules/1.1">CommonJS module exporting &amp; requiring
pattern</a> that is currently
implemented by the wonderful <a href="http://browserify.org">Browserify</a> library (aka,
Node.js but in the browser). I may cover this in the future, but in the mean
time, leverage the power of immediate functions for great good!</p>]]></summary>
</entry>
<entry>
    <title>Asynchronously Loading Scripts</title>
    <link href="https://robertwpearce.com/asynchronously-loading-scripts.html" />
    <id>https://robertwpearce.com/asynchronously-loading-scripts.html</id>
    <published>2015-10-05T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>This article is intended for HTML &amp; JavaScript beginners.</em></p>
<p><em>2023 update: This article, while still good, doesn’t take into account the
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer">defer</a>,
attribute. <a href="https://javascript.info/script-async-defer">Here is a great javascript.info article on async vs.
defer</a>.</em></p>
<hr />
<p>Where do you place your <code>&lt;script&gt;</code> tags to load your JavaScript for your
website? If you’re doing this within the <code>&lt;head&gt;</code> element, you might
want to consider whether or not this is the best option for you.</p>
<h2 id="fetching-javascript-synchronously">Fetching JavaScript Synchronously</h2>
<p>So long as HTTP/1.1 is what your website is accessed via (which it will be
a long while), <code>&lt;script&gt;</code> tags will be used to fetch external JavaScript
files whose contents will be included on the page. These typically look
like <code>&lt;script src="app.js"&gt;&lt;/script&gt;</code>. <code>&lt;script&gt;</code> tags are by default
“blocking,” meaning that the web page has to pause its download &amp; render cycle,
fetch and load the JavaScript and then continue on. Here is what this looks
like:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;app.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>My Website<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>The worst thing you can do is load multiple scripts in this blocking fashion:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;jquery.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;jquery.lightbox.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;some_file.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;app.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>My Website<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>so make sure you combine (concatenate) all your JavaScript files in to one file.
But this is still not ideal, for you have a blocking script that will have to
download before anything else happens.</p>
<p>When we throw <code>&lt;script&gt;</code> tags at the end of the <code>&lt;body&gt;</code>, we allow for the page
to paint and then go and fetch the JS synchronously (this lets the user see and
utilize the page, but the scripts still haven’t finished loading).</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">head</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>My Website<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;app.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>However, since the page is still loading, search engines might punish you for a
long(er) loading time. What we might need, instead, is the ability to
asynchronously fetch the JavaScript <em>after</em> the page is finished
loading.</p>
<h2 id="fetching-javascript-asynchronously">Fetching JavaScript Asynchronously</h2>
<p>There are two popular methods for fetch JavaScript in an asynchronous
manner.</p>
<p>The first is to simply include the HTML5 <code>async</code> property:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;app.js&#34;</span> <span class="pl-na">async</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Or, if you need to support older browsers, add an event listener to the window’s
<code>load</code> function to dynamically build a script tag and append it to the page
(note how I do not use <code>window.onload =</code>):</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-nb">window</span><span class="pl-p">.</span><span class="pl-nx">addEventListener</span><span class="pl-p">(</span><span class="pl-s1">&#39;load&#39;</span><span class="pl-p">,</span> <span class="pl-nx">buildScriptTag</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-kd">function</span> <span class="pl-nx">buildScriptTag</span><span class="pl-p">()</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-kd">var</span> <span class="pl-nx">script</span> <span class="pl-o">=</span> <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">createElement</span><span class="pl-p">(</span><span class="pl-s1">&#39;script&#39;</span><span class="pl-p">);</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nx">script</span><span class="pl-p">.</span><span class="pl-nx">src</span> <span class="pl-o">=</span> <span class="pl-s1">&#39;app.js&#39;</span><span class="pl-p">;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-nb">document</span><span class="pl-p">.</span><span class="pl-nx">body</span><span class="pl-p">.</span><span class="pl-nx">appendChild</span><span class="pl-p">(</span><span class="pl-nx">script</span><span class="pl-p">);</span> <span class="pl-c1">// append it wherever you want
</span></span></span><span class="pl-line"><span class="pl-cl"><span class="pl-c1"></span>  <span class="pl-p">}</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Why didn’t I use <code>window.onload =</code> here? When you assign a browser callback
trigger a value, it can only have one value! When you add an event listener, you
allow the window’s load functionality to have more values in the future.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If your app/website is architected to rely on JavaScript before it
renders anything, then you can utilize this asynchronous
technique with a “Loading…” graphic that is removed when the
JavaScript loads. Ultimately, you want to decrease the amount of time it
takes for a web page to perform an initial load so that the user can get
started using your project as quickly as possible. With asynchronous
loading of JavaScript, you enable your users to get going ASAP and then
allow for them to have a fancier experience once things load in the
background.</p>]]></summary>
</entry>
<entry>
    <title>Long-Distance Movie Night</title>
    <link href="https://robertwpearce.com/long-distance-movie-night.html" />
    <id>https://robertwpearce.com/long-distance-movie-night.html</id>
    <published>2015-09-26T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p><img
  alt="Wooden unicorn wall mount"
  decoding="async"
  height="300"
  src="/images/movie-night-cary-grant.webp"
  width="615"
/></p>
<p>In a long-distance relationship? I currently am, and it sucks, but that will
change someday. My SO (significant other), who is an ocean away and five hours
ahead, and I were recently celebrating the passing of time and wanted to share
a movie night. How were we to do this?</p>
<p>There are many options out there that we explored, such as
<a href="https://letsgaze.com">Gaze</a>, which has a great design (though a questionably
shaky platform), but only supports <code>.mp4</code>, <code>.ogg</code> and <code>.woff</code> files (even if you
alter the webpage to accept all file types). We had our movie in <code>.avi</code> and
<code>.mov</code>, so this wasn’t going to work.</p>
<p>We also tried a few other services but to no avail, so we put our thinking caps
on and solved the problem with these simple steps:</p>
<ol>
<li>Make sure you and your SO each have a copy of the movie (sharing it via
<a href="https://www.dropbox.com">Dropbox</a> is a <em>big</em> help here)</li>
<li>Use Skype to video call your SO</li>
<li>Open wine</li>
<li>Do a countdown (3…2…1) for when each of you should click play</li>
<li>Turn on the mute button when you’re not talking/commenting so that his/her
movie’s sound doesn’t come over the speakers</li>
</ol>
<p>This was surprisingly easy, and Skype lets you keep a small version of the
person you’re video calling on top of all other screens, so I put her on the top
left of my screen and presto! Long-distance movie night.</p>]]></summary>
</entry>
<entry>
    <title>Delegate; Don't Dump</title>
    <link href="https://robertwpearce.com/delegate-dont-dump.html" />
    <id>https://robertwpearce.com/delegate-dont-dump.html</id>
    <published>2015-09-21T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A fellow employee, Margaret, contacts you and asks, "Do you know anything
about [problem] and how I might be able to solve it?" You respond, "Oh,
yeah, Jane is handling that now." You are a busy person being crushed under
the weight of your duties, and you have just helped someone. Having now pushed
something off of your plate, it is time to address the next thing!</p>
<p>But then Margaret comes back to you and says that Jane isn’t sure why you said
she could solve this problem. Jane is confused, you are confused and Margaret is
left floating in ambiguity without any direction nor answer and must go ask
someone else and begin this cycle again. If this conversation happens via email,
expect it to take multiple days and span multiple threads.</p>
<p>Why did this happen?</p>
<h2 id="you-are-the-hinge">You are the hinge</h2>
<p>When someone reaches out to you and asks a question, and you believe someone
else has the answer, then you are now effectively a hinge between these 2 people.</p>
<p>You are what connects that person’s problem with his/her solution. When you do
not <em>act</em> as a hinge does and connect the two different parties, then both
remain separate (read: you will now spend significantly more time than you would
have originally spent figuring out a solution).</p>
<h2 id="delegate-like-a-leader">Delegate Like a Leader</h2>
<p>Delegating responsibility and empowering others are pivotal skills for
leadership of any sort. How does it feel when you ask someone for their
assistance, and they are incredibly helpful in getting you where you need to go?
It feels pretty darn good. Why? Because you have a guide that either knows the
way or knows someone who does. You know that you are in safe hands and that your
problem will be solved. <em>You have a clear path to a solution and are thus
empowered.</em></p>
<h2 id="what-to-do-next-time">What To Do Next Time</h2>
<p>If someone asks you a question or comes to you with a problem, it is because
they believe you possess the solution. Instead of dumping them on to someone
else, it might be in everyone’s best interest to set up an introductory
email/Google Hangout/Skype call to act as the hinge you are and hand one person
off to another for safe-keeping. This way, you leave nothing to question, and if
there are any issues, your group will immediately be on the same page and be
able to find a solution much more quickly.</p>]]></summary>
</entry>
<entry>
    <title>Switching Jobs</title>
    <link href="https://robertwpearce.com/switching-jobs.html" />
    <id>https://robertwpearce.com/switching-jobs.html</id>
    <published>2015-06-04T00:00:00Z</published>
    <updated>2015-06-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Self-discipline can take you places you’ve never dreamed you would go.</p>
<p>I have recently switched from one dream job to another one. For the past 1.5
years, <a href="https://www.articulate.com">Articulate</a> has allowed me to roam from
Washington, DC to Charlotte to Charleston to Atlanta to Greenville to Miami to
Utah to London to Edinburgh to Berlin to northwest Spain to Denver and beyond.
Without such an opportunity, I would never have met many of the people nor had
the experiences that mean so much to me and helped me grow as a human being.
Hopefully I helped a few folks along the way, as well.</p>
<p>Now, however, I am shifting gears. <a href="http://theironyard.com">The Iron Yard</a> will
be my new home and might well take me to whole new levels of understanding,
inter-personal relationships and travel. I will be teaching software in an
accelerated course to highly motivated people who, of their own volition, are
willing to spend &gt;40 hours per week in my presence (the horror!). The first
course will be in Charleston, SC, and other courses will be taught in an
undisclosed location overseas (I don’t think it’s been officially announced).</p>
<blockquote>
<p><em>"But Robert! How does this help you travel?"</em></p>
</blockquote>
<p>I’m glad you asked! Each “cohort” (class) is 12 weeks, and apart from the travel
associated with being in different teaching locations, the work schedule goes
like this: <strong><em>3 months on, 1 month off</em></strong>.</p>
<p>I know—badass; time for travel, personal development and freelancing.</p>
<p>But what allowed me to get to this point, apart from dumb luck?
<em>Self-discipline</em>. If you have the self-discipline to find your way through the
boredom of working your back-side off day and night to not only learn new things
but explore, meet new people and foster relationships with human beings of every
race, gender and creed, you can do anything.</p>
<hr />
<p><em><a href="http://theironyard.com/locations/charleston">The Iron Yard - Charleston</a> is
still taking applications for the class starting June 15, 2015.
<a href="http://theironyard.com/apply">Apply here</a> and learn you some code.</em></p>]]></summary>
</entry>
<entry>
    <title>Stop Saying Silicon Harbor</title>
    <link href="https://robertwpearce.com/stop-saying-silicon-harbor.html" />
    <id>https://robertwpearce.com/stop-saying-silicon-harbor.html</id>
    <published>2015-03-23T00:00:00Z</published>
    <updated>2023-02-12T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Ever since <a href="https://twitter.com/natedapore">Nate DaPore</a> allegedly coined the
phrase <a href="http://charlestonmag.com/features/the_rise_of_silicon_harbor">“Silicon Harbor”</a>
for Charleston, South Carolina (even though other cities around the world already
used this term, such as <a href="https://twitter.com/siliconharbor">Hamburg, Germany</a>),
folks wanting to look like they know what they’re talking about have continued
to use the phrase “Silicon Harbor” <em><a href="http://www.fastcompany.com/1839445/introducing-silicon-harbor-charleston-sc-home-twitpic-and-amazons-createspace">ad</a>
<a href="http://www.charlestoncitypaper.com/charleston/silicon-harbor-is-becoming-a-major-player-in-the-nations-tech-scene/Content?oid=4604950">nauseam</a></em>.
If Charleston tech companies would like to move forward and be taken seriously
by other cities and players in this game, they need to stop emulating and start
innovating. This begins with a proper name.</p>
<p><img
  alt="Sandy path with Morris Island lighthouse and ocean in the background"
  decoding="async"
  height="393"
  loading="lazy"
  src="./images/stop-saying-sh-morris-island.webp"
  width="600"
/></p>
<p>“Silicon Valley,” the name that was copied and applied to Charleston as “Silicon
Harbor,” got its nickname from the concentration of companies who specialized in
making semiconductors and other computer-related products in the southern part
of the San Francisco Bay Area. Silicon, which itself is a metalloid that is the
most common element on our planet besides oxygen, is not unique to the Bay Area.
It is in that location that an entire economy and culture grew around the
semiconductor and then microprocessor and then software industries. Charleston,
however, has no such story to support calling itself “Silicon X.” Here is a list
of locations that have also called themselves “Silicon X” in the hopes of
getting the scraps from Silicon Valley:</p>
<ul>
<li>“Silicon Beach” - Bournemouth, England</li>
<li>“Silicon Docks” - Dublin, Ireland</li>
<li>“Silicon Harbor” - Hamburg, Germany</li>
<li>“Silicon Lagoon” - Lagos, Nigeria</li>
<li>“Silicon Peninsula” - Dailiar, China</li>
<li>“Silicon Savannah” - Nairobi, Kenya</li>
</ul>
<p>…and many more from the <a href="http://en.wikipedia.org/wiki/List_of_places_with_%22Silicon%22_names">List of Places with “Silicon”
Names</a>.</p>
<p>While this might all sound quite negative, it is necessary in order to break
folks out of their “Silicon Harbor” daydreaming and recognize that riding the
coattails of successful communities is not always the path to creating one.
A community should be able to stand on its own merits, be unique in the world
and at least strive to be its own unicorn-like entity.</p>
<p>Charleston has an <a href="http://boomtownroi.com/chstechmap">impressive number of technology and creative
companies</a>, as
<a href="http://boomtownroi.com">BoomTown’s</a> useful map compilation shows, given the
size of the city. Ask most anyone in the developed world what San Francisco
means to them and the answer will include “Silicon Valley,” “technology
companies” and “innovation.” Ask the same about Charleston and the answer will
include “beautiful architecture,” “great food,” “Southern Hospitality” and
<em>maybe</em> “Boeing.” Nowhere outside of South Carolina will you hear people speak
of Charleston’s technology scene.</p>
<p>Why is this? Is it a lack of employment opportunities offered by companies in
the area? Somewhat. Is it a lack of marketing? Partially. Is it a lack of
novelty and significance in global consumers’ lives? Definitely.</p>
<p>If Charleston is not going to be cranking out Apple/Google/???-ambitious tech,
then it needs to learn to compete on other fronts. Human resource software,
real estate software, healthcare software and assistive financial software are
all important industries and employ a great number of people in the Charleston
area. They also benefit their community and all give back in innumerable ways.
However, there have yet to be any ground-breaking technologies to come out of
Charleston since <a href="http://www.atdesk.com">Automated Trading Desk</a>, formerly led
by <a href="http://sb.cofc.edu/officeofthedean/boardofgovernors/swanson.php">Steve Swanson</a>,
busted on to the scene in the late 80s through the late 2000s with its
utilization of high-frequency trading, a technology that revolutionized the
stock trading industry. If Charleston dares to be great, then it should lead by
example.</p>
<p>Personally, I am not as successful as the current folks <a href="https://en.wikipedia.org/wiki/Joseph_P._Riley,_Jr.">Mayor Joe
Riley</a> courts and supports
as drivers of community growth. I have nothing to show. But what I do have is an
outside view of the community while still maintaining my membership of it and
participation in it. What I see is a city that has many of the traits of a
progressive city on the rise but which constantly compares itself to others
instead of charging forward as a leader.</p>
<p>It is in this light that I suggest Charleston abandon the overused and cliché
“Silicon X” tag and adopt a new nickname (sorry to all you organizations who
have named yourself “Silicon Harbor X”). Nobody uses it outside of the
Charleston tech community, and nobody will (just as you don’t call Baltimore, MD
the “Digital Harbor”). It’s time to move on.</p>
<p>This new nickname should represent the vast presence of technology companies as
well as evoke all the right emotions for emphasizing that Charleston is a
fantastic place to work, live and raise a family. But it should, above all else,
represent the location and culture, itself, without having to rely on an
overused, 60-year old term from the other side of the country.</p>]]></summary>
</entry>
<entry>
    <title>Mobile Device Etiquette</title>
    <link href="https://robertwpearce.com/mobile-device-etiquette.html" />
    <id>https://robertwpearce.com/mobile-device-etiquette.html</id>
    <published>2015-03-09T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A friend and colleague of mine, <a href="https://www.linkedin.com/in/javanderslice">Jason
Vanderslice</a>, and I recently
discussed the state of mobile devices with regard to their place in various
settings and within our interpersonal relationships. While I would not presume
to speak for Jason on most subjects, we agree that mobile device etiquette is
something that needs to be taught, spread to others and repeated.</p>
<p>With the evolution of digital, mobile devices came a million new ways to
distract ourselves. Every new Twitter mention, Facebook tag, Instagram #hashtag,
email, text and push notification is a jarring intrusion in to whatever we are
doing that yearns for our attention and ultimate dismissal. Ignoring the vanity
associated with thinking that we are important enough that our responses cannot
wait (I’m not talking about you, doctors; you have a free pass with your 13
pagers), there is another aspect with which so many of us are tied to our
phones: we want to clear messages and push notifications out of our lives as
quickly as possible in order to avoid the stress of having so many of them build
up. Everyone loathes the feeling of a mountain of emails crushing down on them.
Everyone feels guilty about not returning that email their boss sent them at
11pm about XYZ big important project of the quarter. But something is
lost—ignored, even: the consideration of those around us. Instead of focusing on
the anxiety these acts alone cause us, I would like you to consider the effects
your actions have on those around you.</p>
<h2 id="being-present">Being Present</h2>
<p>I want to tell you about a man who changed my life by setting an example.
<a href="https://twitter.com/paulsingh">Paul Singh</a>, former partner at <a href="http://500.co">500
Startups</a> and founder of <a href="http://www.disruption.vc">Disruption
Corporation</a>, is a very well-known investor in the
tech world and <a href="http://www.crystalcity.org/innovative/crystal-tech-fund">single-handedly transforms
cities</a> economically.
You can safely bet that his phone is constantly buzzing with the latest killer
app ideas, city construction issues and other problems that require his
attention.</p>
<p>I was fortunate enough to get to spend a day with Paul, <a href="https://twitter.com/bauermarty">Marty
Bauer</a> and heaps of other great folks at <a href="http://theironyard.com">The
Iron Yard</a> in Greenville, SC, last year, where Paul came
to speak about what he was doing in Crystal City, Arlington, VA. We picked him
up at the GSP airport and, after a night’s rest, three of us met Paul at <a href="http://www.coffeeunderground.info">Coffee
Underground</a> for breakfast and coffee. While
we sat there discussing life, the universe and everything, I was surprised how
attentive and conversational Paul was. He listened to every word someone had to
say, waited for them to finish, thought for a moment and then provided a
relevant response and/or follow-up question.</p>
<p>So what’s the big deal? Most people are taught from childhood how to have a
conversation. Let’s hear more.</p>
<p>During his presentation, an attendee was most disrespectful, hijacking the
presentation to seemingly blame Paul for the Industrial Revolution and
subsequent child labor issues. As one would imagine, this had nothing to do with
his presentation, but instead of putting the attendee down, Paul listened and
responded to the attendee with respect while he received none. When it was clear
there was to be no resolution to the original question, he closed the subject
elegantly and continued his talk without skipping a beat.</p>
<p>What do these two personal acedotes have to do with mobile device etiquette?</p>
<p><em>Everything.</em></p>
<p>You see, Paul Singh, whether at the coffee shop or giving a talk or speaking
with attendees afterwards, was <em>present</em>. He was there with each person in each
moment. When I confronted him about his persona and charisma, he mentioned a
book, <a href="http://www.amazon.com/The-Charisma-Myth-Personal-Magnetism/dp/1591845947">The Charisma Myth</a>,
which I of course purchased soon thereafter. This book explained, broke down and
reinforced principles of interactions with others that had been taught to me in
my youth, but behind which I had never fully understood the “why”. While the
book is a gold mine of information, there is a very large emphasis, with regard
to exuding charisma, on presence. In short, <strong>if you are distracted and not
paying attention to someone you are with, this person will consciously or
unconsciously believe that they are not important enough for your attention and
will thus likely stop seeking to be in your presence simply because of the way
you make them feel.</strong></p>
<p>Think about that.</p>
<p>How many times have you been distracted by something, not just devices, when you
have been with someone? How many times have you not answered their questions
because something your mind deemed more important grabbed your attention? You
may not be able to recall these instances, for they mean nothing to you. But now
that you have read this far, you will undoubtedly begin to notice <em>others</em>
acting this way towards you. Don’t worry, for seeing negative habits in others
is the first step to changing your own.</p>
<h2 id="you-might-be-distracted-if">You Might Be Distracted If…</h2>
<ul>
<li>you are sitting at the dinner table with your phone out</li>
<li>you are walking down the street with someone or a group with your phone out</li>
<li>you are making love and answer the phone</li>
<li>you are at a sporting event and Facebook just can’t wait to know about how
great your day is going</li>
<li>you ever have your phone/ipad/smart watch/digital dingus in hand while you are
with another human being</li>
</ul>
<h2 id="kids-these-days">Kids These Days</h2>
<p>Most folks these days know not what they do. The younger generation doesn’t know
a life without phonepads, and the older generation didn’t know to ubiquitously
enforce an etiquette around them. I believe there will eventually be a pendulum
swing away from the current state of device affairs where mobile device
etiquette becomes a standard, and considerations for this will continue to show
up in new device features.</p>
<p>In the mean time, an interesting “game” has popped up among 20-somethings where
everyone at dinner places their phones in the middle of the table, one on top of
another. If anyone retrieves their phone during dinner, that person must then
pick up the tab. Gamification… who would have thought? This is a great start.</p>
<h2 id="so-what-can-you-do">So What Can You Do?</h2>
<h3 id="step-1-catch-it">Step 1: Catch It</h3>
<p>If you have to ask yourself,</p>
<blockquote>
<p><em>"Is it appropriate to take out my phone?"</em></p>
</blockquote>
<p>then the answer is probably no.</p>
<h3 id="step-2-dont-be-a-jerk">Step 2: Don’t Be A Jerk</h3>
<p>When your friends are all tweeting about how much fun they’re having during your
birthday party at the pub, be careful with bringing attention to the subject.
Not only will they be ashamed when they realize you are right, but they will
also resent you for calling them out. However, being passive aggressive and
hinting at their poor manners isn’t the answer, either.</p>
<p>It is said that when you point at someone, you’re pointing three fingers back at
yourself. Instead, focus on making yourself better rather than being quick to
judge others.</p>
<h3 id="step-3-set-the-example">Step 3: Set the Example</h3>
<p>When you go to hang out with your little cousins or when you fly to give a talk
to a group of strangers, turn your phone on silent (or Airplane Mode) and either
keep it in your pocket at all times or even leave it in the car. If you have a
necessary business meeting, plan it accordingly and if you must, take the call
outside. Remember that every single person you come in to contact with is
affected by the actions you take and the way you make them feel while they
interact with you. Set the example and pass on good habits.</p>]]></summary>
</entry>
<entry>
    <title>Life in Colorado</title>
    <link href="https://robertwpearce.com/life-in-colorado.html" />
    <id>https://robertwpearce.com/life-in-colorado.html</id>
    <published>2015-03-03T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p>One month ago, with an entire world to travel at my fingertips, I chose to
temporarily move to Denver, Colorado. For years I have heard great things about
the people, hiking, skiing and beer, so I decided to give them a try.</p>
<h2 id="the-people">The People</h2>
<p>The following statement may cause me a bit of flack in the South, but</p>
<blockquote>
<p><em>"Denver has the most welcoming population I’ve ever come across
in my travels."</em></p>
</blockquote>
<p>Never in my life have I met such a warm, trusting, "do good" people
who have a blind affinity for strangers of all shapes, colors and creeds. Since
my first day here, I have questioned whether I simply haven’t met enough people
or experienced enough of the city to see its faults. But my initial premise is
supported day after day and experience after experience.</p>
<p>One can tell much about the culture of a city by a few things:</p>
<ul>
<li>the attitude of its drivers towards foot traffic</li>
<li>the treatment of and by service industry workers</li>
<li>its beer</li>
</ul>
<h3 id="foot-traffic">Foot Traffic</h3>
<p>Drivers consistently stop for pedestrians to cross the street. Who would have
thought this a novel concept? Additionally, if a driver pulls their car in to a
cross-walk, 9 times out of 10 that person will wave, apologize and attempt to
back their car up so folks on foot have space to walk. This alone speaks reams
about a community.</p>
<h3 id="service-industry-workers">Service Industry Workers</h3>
<p>I am a harsh judge of patrons’ character when it comes to their interactions
with service industry workers. Is it right to judge people? No. Does doing so
help me guage not only the person I’m speaking with, but a community as a whole?
Yes, for watching an unnecessarily rude man be put in his place by other
restaurant-goers is something special.</p>
<p>On the other side of the coin, I have yet to meet a rude person providing me
food &amp; bev service. A great example is at <a href="http://renegadebrewing.com/">Renegade
Brewing</a>. The bar tenders here struck up
conversation while I was having a beer and burger, alone, on Valentine’s Day.
After a few minutes of conversation, I was introduced to some of their friends
across the bar, and we had great conversation and beer before parting ways.</p>
<h3 id="the-beer">The Beer</h3>
<p>There are &gt;200 breweries in Denver. ’Nuff said. These people like to have a
good time.</p>
<h2 id="remote-working">Remote Working</h2>
<p>My employer, <a href="https://www.articulate.com/">Articulate</a>, has paid for me to work
three days per week out of the <a href="http://densitycoworking.com/">Density CoWorking</a>
spot. Density is located in a fun neighborhood about one block from the <a href="http://marczykfinefoods.com/">Marczyk
Food Market</a>. You know a place is cool when they
have wall-mounted unicorn decor:</p>
<p><img
  alt="Wooden unicorn wall mount"
  decoding="async"
  height="533"
  loading="lazy"
  src="./images/life-in-co-unicorn.webp"
  width="400"
/></p>
<p>There are heaps of unique and delicious coffee shops to work from, as well. My
favorite, thus far, is the <a href="http://denverbicyclecafe.com">Denver Bike Cafe</a> on
17th Street.</p>
<h2 id="skiing">Skiing</h2>
<p>While skiing in Denver could be fun after a heavy snow, the mountains are nearby
and ripe for adventure. I’ll let the pictures speak for themselves.</p>
<p><img
  alt="Top of Breckenridge, CO; mountains in snow"
  decoding="async"
  height="667"
  loading="lazy"
  src="./images/life-in-co-breck-tippy-top.webp"
  width="500"
/></p>
<p><img
  alt="USA flag with me next to it at the top of a mountain in Breckenridge, CO"
  decoding="async"
  height="667"
  loading="lazy"
  src="./images/life-in-co-breck-america.webp"
  width="500"
/></p>
<p><img
  alt="View over the edge down a treeless skip slope"
  decoding="async"
  height="375"
  loading="lazy"
  src="./images/life-in-co-breck-edge.webp"
  width="500"
/></p>
<h2 id="wrap-up">Wrap up</h2>
<p>I have only begun to scratch the surface with all that Denver has to offer and
look forward to another month here.</p>]]></summary>
</entry>
<entry>
    <title>RiotJS Example</title>
    <link href="https://robertwpearce.com/riotjs-example.html" />
    <id>https://robertwpearce.com/riotjs-example.html</id>
    <published>2015-01-28T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p>When I look at any of the myriad JavaScript UI libraries out there, I now ask
two questions:</p>
<ul>
<li>Does data flow in one direction?</li>
<li>Do updates to the UI happen intelligently?</li>
</ul>
<p>I am a fan of Facebook’s <a href="https://facebook.github.io/react/">ReactJS</a> library
because of its DOM diffing (via the “virtual DOM”) and one-way data binding.
React is a tool I use every day and have come to enjoy (sans-JSX), but I am
always on the lookout for way to do things simpler.</p>
<p>A colleague of mine recently shared the second iteration of
<a href="https://muut.com/riotjs/">RiotJS</a> with me. Of course, I was sucked in because
it compared itself with React (a bold statement). You can <a href="https://muut.com/riotjs/compare.html">view the comparisons
between Riot and React</a> for yourself.</p>
<p>One unfortunate fact about fledgling JS libraries is that they lack examples of
how to accomplish common goals for the web. This is an attempt to help out with
that.</p>
<h2 id="installation">Installation</h2>
<h3 id="project-specific">Project-Specific</h3>
<p>Given you have a <code>package.json</code> set up, you can easily install the Riot compiler
as a development dependency:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">npm install riot --save-dev</span></span></code></pre>
<p>and then set up Riot to run as an NPM script and watch for any changes</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-s2">&#34;scripts&#34;</span><span class="pl-o">:</span> <span class="pl-p">{</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-s2">&#34;watch:riot&#34;</span><span class="pl-o">:</span> <span class="pl-s2">&#34;riot -w src/ build/&#34;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">}</span></span></span></code></pre>
<p>which is then run by a simple</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">npm run watch:riot</span></span></code></pre>
<p>Alternatively, you can <a href="https://muut.com/riotjs/download.html">download the riot.js
library</a> via any of their recommended
methods.</p>
<h3 id="global-installation-alternative">Global Installation (alternative)</h3>
<p>If you don’t have a <code>package.json</code> and want to install Riot globally:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">npm install riot -g
</span></span><span class="pl-line"><span class="pl-cl">riot -w src/ build/</span></span></code></pre>
<h2 id="tab-example">Tab Example</h2>
<p>I decided to start small and make a tabbing example where clicking a tab shows
content related to it underneath. Here is the final product:</p>
<iframe
  class="iframe--example"
  frameborder="0"
  height="550"
  loading="async"
  src="https://rpearce.github.io/riotjs-examples/tabs.html"
>
</iframe>
<h3 id="step-1-start-with-markup">Step 1: Start With Markup</h3>
<p>Starting with a blank HTML document, add the <code>&lt;riot-tabs&gt;&lt;/riot-tabs&gt;</code> tag to
your document:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">head</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">head</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">html</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>As mentioned previously, we know we need the (very tiny) RiotJS library, so
don’t forget to include it:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;path/to/riot-2.0.1.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Easy enough, right? Given Riot doesn’t write our applications for us, we will
need to tell Riot to mount some component, which in this case is “tabs.”</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">script</span> <span class="pl-na">src</span><span class="pl-o">=</span><span class="pl-s">&#34;path/to/riot-2.0.1.js&#34;</span><span class="pl-p">&gt;&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span><span class="pl-nx">riot</span><span class="pl-p">.</span><span class="pl-nx">mount</span><span class="pl-p">(</span><span class="pl-s1">&#39;riot-tabs&#39;</span><span class="pl-p">)&lt;/</span><span class="pl-nt">script</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">body</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>When we run this code through the browser, we’re going to receive an error
telling us that <code>'tabs'</code> is not a thing. Congrats! Time for Step 2.</p>
<h3 id="step-2-creating-your-custom-tag">Step 2: Creating Your Custom Tag</h3>
<p>Riot’s NPM package, as mentioned earlier, allows us to write and compile
pseudo-markup mixed with a little JS. To get started, create a <code>src</code> folder and
add a <code>tabs.tag</code> file to it, then run</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">npm run watch:riot</span></span></code></pre>
<p>if you have an NPM script set up or</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl">riot -w src/ build/</span></span></code></pre>
<p>to compile and watch for more changes to the file/folder.</p>
<p>Back in the <code>tabs.tag</code> file, add this:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>Tabs<span class="pl-p">&lt;/</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabItem:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>Tab 1<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabItem:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>Tab 2<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabItem:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>Tab 3<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>That looks almost exactly like vanilla HTML, save for the conditional class(es),
which we will use later with <code>is-active</code> classes. Also, they are way better than
concatenating <code>className</code> strings yourself.</p>
<p>Refreshing your browser will show you that you now have content that is nested
within a <code>&lt;riot-tabs&gt;&lt;/riot-tabs&gt;</code> tag.</p>
<p>Next up, we can add in the different tabs’ contents:</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>Tabs<span class="pl-p">&lt;/</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabItem:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>Tab 1<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabItem:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>Tab 2<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabItem:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>Tab 3<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabContent&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabContent__item:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>(1) Lorem ispum dolor...<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabContent__item:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>(2) Lorem ispum dolor...<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabContent__item:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>(3) Lorem ispum dolor...<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Okay, this is no big deal, so far.</p>
<p>Being software developers, we hate writing things over and over, so let’s start
with the tabs.</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>Tabs<span class="pl-p">&lt;/</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">each</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tab</span><span class="pl-err">,</span> <span class="pl-na">i</span> <span class="pl-na">in</span> <span class="pl-na">tabs</span> <span class="pl-err">}</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabItem:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>{tab.title}<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabContent&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabContent__item:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>(1) Lorem ispum dolor...<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabContent__item:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>(2) Lorem ispum dolor...<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tabContent__item:</span> <span class="pl-na">true</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>(3) Lorem ispum dolor...<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  this.tabs = [
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 1&#39; },
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 2&#39; },
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 3&#39; }
</span></span><span class="pl-line"><span class="pl-cl">  ]
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Riot has a nice each={ item, i in array } attribute, similar to JavaScript’s
for … in …</p>
<p>While we’re at it, why not iterate over the content items, as well?</p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>Tabs<span class="pl-p">&lt;/</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">each</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tab</span><span class="pl-err">,</span> <span class="pl-na">i</span> <span class="pl-na">in</span> <span class="pl-na">tabs</span> <span class="pl-err">}</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabItem&#34;</span><span class="pl-p">&gt;</span>{tab.title}<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabContent&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">each</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tab</span><span class="pl-err">,</span> <span class="pl-na">i</span> <span class="pl-na">in</span> <span class="pl-na">tabs</span> <span class="pl-err">}</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabContent__item&#34;</span><span class="pl-p">&gt;</span>{tab.content}<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  this.tabs = [
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 1&#39;, content: &#34;(1) Lorem ipsum dolor&#34; },
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 2&#39;, content: &#34;(2) Lorem ipsum dolor&#34; },
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 3&#39;, content: &#34;(3) Lorem ipsum dolor&#34; }
</span></span><span class="pl-line"><span class="pl-cl">  ]
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Next, we need to set a default “active tab” and “active content.”</p>
<h3 id="step-3-conditional-classes">Step 3: Conditional Classes</h3>
<p>We want to be able to specify a default tab and tab content. This is
accomplished via a conditional <code>is-active</code> class on both the <code>.tabItem</code> as well
as the corresponding <code>.tabContent__item</code>. To keep track of what tab/content is
active, we can</p>
<ul>
<li>add a property to the <code>this.tabs</code> array objects</li>
<li>set an <code>activeTab</code> property and</li>
<li>create a function to check if the currently iterated tab is the <code>activeTab</code></li>
</ul>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>Tabs<span class="pl-p">&lt;/</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">each</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tab</span><span class="pl-err">,</span> <span class="pl-na">i</span> <span class="pl-na">in</span> <span class="pl-na">tabs</span> <span class="pl-err">}</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabItem { is-active: parent.isActiveTab(tab.ref) }&#34;</span><span class="pl-p">&gt;</span>{tab.title}<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabContent&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">each</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tab</span><span class="pl-err">,</span> <span class="pl-na">i</span> <span class="pl-na">in</span> <span class="pl-na">tabs</span> <span class="pl-err">}</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabContent__item { is-active: parent.isActiveTab(tab.ref) }&#34;</span><span class="pl-p">&gt;</span>{tab.content}<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  this.tabs = [
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 1&#39;, ref: &#39;tab1&#39;, content: &#34;(1) Lorem ipsum dolor&#34; },
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 2&#39;, ref: &#39;tab2&#39;, content: &#34;(2) Lorem ipsum dolor&#34; },
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 3&#39;, ref: &#39;tab3&#39;, content: &#34;(3) Lorem ipsum dolor&#34; }
</span></span><span class="pl-line"><span class="pl-cl">  ]
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  this.activeTab = &#39;tab1&#39;
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  isActiveTab(tab) {
</span></span><span class="pl-line"><span class="pl-cl">    return this.activeTab === tab
</span></span><span class="pl-line"><span class="pl-cl">  }
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>Since these are <em>conditional</em> classes, they will either be evaluated as true or
false (I believe that anything that is not falsy is considered true; for
example, <code>new Date()</code> is considered <code>true</code>). Here, we create a function called
<code>isActiveTab</code> and call it from the item itself, but because the function is not
scoped to the item, we need to access the <code>parent</code> scope and call the function
on that.</p>
<p>Finally, we need a way to react to <em>events</em>.</p>
<h3 id="step-4-toggling-the-tabs">Step 4: Toggling the Tabs</h3>
<p>When we click on a tab, we want that tab to now be active, and we want the
corresponding tab content to be displayed. This can be done via an <code>onclick</code>
handler that calls a function on the parent called <code>toggleTab</code></p>
<pre class="pl-chroma"><code><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>Tabs<span class="pl-p">&lt;/</span><span class="pl-nt">h2</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">li</span> <span class="pl-na">each</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tab</span><span class="pl-err">,</span> <span class="pl-na">i</span> <span class="pl-na">in</span> <span class="pl-na">tabs</span> <span class="pl-err">}</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabItem { is-active: parent.isActiveTab(tab.ref) }&#34;</span> <span class="pl-na">onclick</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">parent</span><span class="pl-err">.</span><span class="pl-na">toggleTab</span> <span class="pl-err">}</span><span class="pl-p">&gt;</span>{tab.title}<span class="pl-p">&lt;/</span><span class="pl-nt">li</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">ul</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabContent&#34;</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">    <span class="pl-p">&lt;</span><span class="pl-nt">div</span> <span class="pl-na">each</span><span class="pl-o">=</span><span class="pl-s">{</span> <span class="pl-na">tab</span><span class="pl-err">,</span> <span class="pl-na">i</span> <span class="pl-na">in</span> <span class="pl-na">tabs</span> <span class="pl-err">}</span> <span class="pl-na">class</span><span class="pl-o">=</span><span class="pl-s">&#34;tabContent__item { is-active: parent.isActiveTab(tab.ref) }&#34;</span><span class="pl-p">&gt;</span>{tab.content}<span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">  <span class="pl-p">&lt;/</span><span class="pl-nt">div</span><span class="pl-p">&gt;</span>
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  this.tabs = [
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 1&#39;, ref: &#39;tab1&#39;, content: &#34;(1) Lorem ipsum dolor&#34; },
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 2&#39;, ref: &#39;tab2&#39;, content: &#34;(1) Lorem ipsum dolor&#34; },
</span></span><span class="pl-line"><span class="pl-cl">    { title: &#39;Tab 3&#39;, ref: &#39;tab3&#39;, content: &#34;(1) Lorem ipsum dolor&#34; }
</span></span><span class="pl-line"><span class="pl-cl">  ]
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  this.activeTab = &#39;tab1&#39;
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  isActiveTab(tab) {
</span></span><span class="pl-line"><span class="pl-cl">    return this.activeTab === tab
</span></span><span class="pl-line"><span class="pl-cl">  }
</span></span><span class="pl-line"><span class="pl-cl">
</span></span><span class="pl-line"><span class="pl-cl">  toggleTab(e) {
</span></span><span class="pl-line"><span class="pl-cl">    this.activeTab = e.item.tab.ref
</span></span><span class="pl-line"><span class="pl-cl">    return true
</span></span><span class="pl-line"><span class="pl-cl">  }
</span></span><span class="pl-line"><span class="pl-cl"><span class="pl-p">&lt;/</span><span class="pl-nt">riot-tabs</span><span class="pl-p">&gt;</span></span></span></code></pre>
<p>The <code>onclick</code> event handler receives an event object that is packed with
information. What we want is the current tab that we are clicking on, and this
is accessed through <code>e.item.tab.ref</code>, which is just the <code>ref</code> property on the
<code>tab</code> object of the currently iterated <code>item</code>.</p>
<p>According to the Riot docs, when an event handler is called, Riot will
automatically call <code>this.update()</code> and re-render the component. However, I found
that after I altered my data, I had to <code>return true</code>.</p>
<p>Once this event handler is completed and the component is re-rendered, the
correct tab and content will be displayed, and you will be happy.</p>
<h2 id="wrap-up">Wrap up</h2>
<p>In sum, playing with Riot was a mostly enjoyable experience, and I am thankful
to the <a href="https://muut.com/">Muut</a> folks for releasing it.</p>
<p>While there are quirks (single quote vs double quote issues, among others) and
opinions (neglecting the use of semi-colons, as well as <code>return</code>s), this is a
promising UI library that I am <em>definitely</em> going to consider vs. React in my
future projects.</p>]]></summary>
</entry>
<entry>
    <title>Use Bcc</title>
    <link href="https://robertwpearce.com/use-bcc.html" />
    <id>https://robertwpearce.com/use-bcc.html</id>
    <published>2015-01-19T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I have a new feature request for email applications: <strong>if there are a multitutde
of addresses in the “To:” field, recommend the author use Bcc</strong> (and give a
checkbox with the option to never ask this question again).</p>
<p>Let us begin with <a href="https://twitter.com/bauermarty/status/553279657890816001">this sage tweet from Marty
Bauer</a>:</p>
<blockquote>
<p>Sending a mass email and not bcc-ing everyone is like a kicker missing an
extra point. You had one job.</p>
</blockquote>
<h2 id="what-is-bcc">What is Bcc?</h2>
<p>For those of you who’ve never thought twice about this email field, it stands
for <em>blind carbon copy</em>. The addresses in this field will not be shared with the
other recipients of the email.</p>
<h2 id="mass-emails-are-obnoxious">Mass Emails are Obnoxious</h2>
<p>Nobody wants to read the 90 responses and side conversations from the folks that
love to always “Reply All.”</p>
<h2 id="mass-emails-hinder-recipient-privacy">Mass Emails Hinder Recipient Privacy</h2>
<p>Dear Startup Founder/Venture Fund Manager/Chamber of Commerce affiliate,</p>
<p>When you send out a mass email to a group of investors, you are forfeiting each
one of these people’s emails (and a bit of their privacy) to the other
recipients, as well as anyone to whom this email is forwarded. Don’t do this.</p>
<p>Love,</p>
<p>Responsible Users of the Internet</p>
<h2 id="its-okay-weve-all-done-it">It’s Okay; We’ve All Done It</h2>
<p>We’ve all made this mistake and (hopefully) learned from it. Don’t fret your
hideous tendancies of emails past. Go forth from this day and send your 50
person email—<em>using Bcc</em>—with the confidence that you are not being
a jerk.</p>]]></summary>
</entry>
<entry>
    <title>Be Better</title>
    <link href="https://robertwpearce.com/be-better.html" />
    <id>https://robertwpearce.com/be-better.html</id>
    <published>2015-01-15T00:00:00Z</published>
    <updated>2015-01-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>We are not always the people we strive to be. Many of us want to be better
versions of ourselves: wiser, kinder, stronger, skinnier. However, we often find
it is ourselves that get in the way of this.</p>
<p>Some time ago, I began removing things from my life that did not help me on the
path to being the person I desired to be. This is a very painful yet effective
attempt at a remedy. Unfortunately, it is only a piece of the puzzle. While
external factors influence our habits and tendencies a great deal, all decisions
have an ultimate decision-maker: you.</p>
<p>I could go on with this post for days. Instead, I’ll make it simple:</p>
<ul>
<li><p>Be kinder to the cashier at the grocery store.</p></li>
<li><p>Be someone whose positive attitude inspires others.</p></li>
<li><p>Be confident in accomplishing your goals or lifestyle changes.</p></li>
<li><p><strong>Be better than you were yesterday.</strong></p></li>
</ul>]]></summary>
</entry>
<entry>
    <title>On Working Remotely</title>
    <link href="https://robertwpearce.com/on-working-remotely.html" />
    <id>https://robertwpearce.com/on-working-remotely.html</id>
    <published>2014-10-15T00:00:00Z</published>
    <updated>2014-10-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Do you have a remote/virtual/telecommute job? I do. And it rocks.</p>
<p>A vast majority of the people in the States who inquire as to the nature of my
job share with me that they feel working remotely would make them feel isolated;
that they would lose their sense of team; that they would get bored.</p>
<h2 id="boredom-nope">Boredom? Nope</h2>
<p>Someone once said to me,</p>
<blockquote>
<p><em>"Only boring people get bored."</em></p>
</blockquote>
<p>Let that sink in for a second. Let yourself recognize that you might just be boring.
While you think about it, read this introduction on boredom from Wikipedia:</p>
<blockquote>
<p><em>"Boredom is an emotional state experienced when an individual is left
without anything in particular to do, and not interested in their
surroundings."</em></p>
</blockquote>
<p>Comma usage aside, this says <em>a lot</em> about people who get bored. If you have
nothing in particular to do, well, that’s great, but odds are that you do not
have a family or are not contributing to humanity (there’s much to do here).
Your choice. I would like to focus on the second point: <em>"and not
interested in their surroundings."</em></p>
<p>Working remotely allows you to work from wherever you want, given you can
accomplish your work goals. It doesn’t matter if you are an accountant, human
resource associate, technology professional or doctor. Thanks to the present-day
methods of communication, knowledge and data can be transferred in any number of
ways. Many remote workers choose to do their work from the comfort of their
homes where they can be nearer to family and friends and not waste their lives
away in commuter traffic. Others move to new locations as they please.
Regardless of what these people choose, one fact remains: <em>they can go wherever
they want,</em> or in another light, <em>have an infinite opportunity for new,
interesting surroundings</em>. If they were boring before, they now have the freedom
to never be bored again.</p>
<h2 id="isolated-no-sense-of-team-nope">Isolated? No sense of team? Nope</h2>
<p>Now that we’ve addressed the boredom fear, let’s focus on the isolation and
loss-of-team mentality.</p>
<p>I write software. You might associate this with sitting in a dark room, chugging
Coca-Cola, solving complex problems with microwavable fish sticks and living in
solitude. You wouldn’t be wrong about the fish sticks. But solitude? Can you say
that you spend six hours at work speaking with anywhere from 1 to 14 people at a
time? Physically, I might not be in the same room as someone, but by the end of
the day I am exhausted from the sheer amount of conversation and problem solving
I have with my colleagues. I just don’t have to smell them.</p>
<h2 id="how-i-am-living">How I Am Living</h2>
<p>One of the attractions to the job I’m working now is that the company,
<a href="http://www.articulate.com" title="Articulate">Articulate</a>, has no office and is
completely virtual. I recently learned that it is the <strong>2nd largest virtual
company in the world</strong>. This means that I have the guidance of an entire company
of remote workers. What sort of guidance do they offer?</p>
<blockquote>
<p><em>"Live your life, and do not waste the opportunities and time you
have."</em></p>
</blockquote>
<p>So I packed a bag and moved to London. I travel to different areas of town ~4-5
days a week, find wifi, do my work, explore, meet people, go find another place
to work and then go exercise at an outdoor gym. Oh, and I’ve been to Berlin and
have Spain, Scotland and Ireland all coming up in the next 1.5 months. And I
just got back from five days in Miami.</p>
<p>I am of the (generally agreed upon scientific) opinion that I shall not live
forever, so I’ll be damned if I regret one day.</p>
<h2 id="not-sure-where-to-start">Not sure where to start?</h2>
<p>There is a program starting next year, <a href="http://www.remoteyear.com" title="Remote Year">Remote
Year</a>, that involves ~100 remote
workers traveling to cities around the world for 2-5 weeks at a time. In each
city they will be working, exploring, absorbing the culture and then moving on
to the next city. I will be applying, and if you manage to find/have a remote
job, so should you.</p>
<p>Trust me; you won’t get bored.</p>]]></summary>
</entry>
<entry>
    <title>Exercising In Transit</title>
    <link href="https://robertwpearce.com/exercising-in-transit.html" />
    <id>https://robertwpearce.com/exercising-in-transit.html</id>
    <published>2014-09-29T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Many folks who travel are no strangers to a general decline in health (and bank
account funds!) while on their adventures. Apart from being less likely to cook
their own meals, the general lack of exercise people also experience while on
the move in new, unfamiliar places, creates a cycle of unhealthiness that is
difficult to break. Since I’ve moved to London, I have had to consider my
options and find a way to maintain a healthy diet while also getting regular,
meaningful exercise. Luckily, London itself has come to the rescue.</p>
<p>Since 2007, <a href="http://www.tgogc.com/Gyms" title="The Great Outdoor Gym Company">The Great Outdoor Gym
Company</a>, at the
behest of local councils, has installed hundreds of outdoor gyms &amp; obstacles
in parks all throughout the UK (notably London). There are surely other vendors,
but this is the only one of which I know.</p>
<p><img
  alt="Outdoor gym with pull-up bars in Clapham Common"
  decoding="async"
  height="450"
  loading="lazy"
  src="./images/exercising-outdoor-gym.webp"
  width="600"
/></p>
<p>The gyms sport everything from pullup &amp; parallel bars to vertical presses to
elliptical machines. Clapham Common, where I exercise, possesses at least three
outdoor gyms that are heavily used every day and have surprisingly low
maintenance plus resistance to the elements.</p>
<blockquote>
<p><em>"Great; loads of gyms! Now what?"</em></p>
</blockquote>
<p>The phrase <em>weary traveler</em> is fairly descriptive of the effects of travel on
people. Whether you are walking, sitting or sleeping for a long time, the
effects are similar: you are tired! And the last thing you want to do when
you’re tired is exercise. This needs to change.</p>
<p>Do you have a good work ethic? Are you rarely late to work or meetings? What is
it about these that make you attend and do so in a timely fashion? You probably
say, "This is something I have to do, so I am going to power through and do
it, even if I don’t want to." So why not treat exercise in this manner?</p>
<p>In short, you need to learn to <em>treat exercise like an unavoidable daily event</em>;
like a meeting. If you can do this, then all procrastination and "I’ll do
it when I feel like it" excuses go right out the door.</p>
<p>If you are worried about not having a place to work out in the area you are
traveling to, do a little research beforehand.</p>
<ul>
<li>Google for outdoor/indoor gyms in the area</li>
<li>Youtube exercises you can do in your hotel room</li>
<li>Use Yelp to find places where you can eat right — not lazily</li>
</ul>
<p>Ultimately, all of these decisions come down to you. Whether you are on a short
trip or are doing extensive traveling, if you take it upon yourself to strive
for a sound mind and body, you will find a way to better yourself while on the
road.</p>]]></summary>
</entry>
<entry>
    <title>Chief</title>
    <link href="https://robertwpearce.com/chief.html" />
    <id>https://robertwpearce.com/chief.html</id>
    <published>2014-09-23T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p><img
  alt="Old golden retriever lying in the back seat of a car"
  decoding="async"
  height="376"
  src="./images/chief.webp"
  width="800"
/></p>
<p>Tonight, I lost a dear friend.</p>
<p>On this day, 23 September 2014, my family lost a constant. Chief, a member of
our family, passed — by our hand — on account of aggressive cancer.</p>
<p>Chief made me better. Or, Chief made me make myself better.
I will never forget one moment, one line of his life, I swear.
He will always be my brother, my son, my guide.</p>
<p>I love you, man.</p>]]></summary>
</entry>
<entry>
    <title>Berlin</title>
    <link href="https://robertwpearce.com/berlin.html" />
    <id>https://robertwpearce.com/berlin.html</id>
    <published>2014-09-11T00:00:00Z</published>
    <updated>2023-02-04T18:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Traveling to Berlin for the first time, one cannot help but marvel at a city and
people so steeped in painful history. All Americans learn of the Berlin where
Hitler ruled, where the Russians paraded down the streets after they reached the
city before the other Allies could and where the Berlin Wall was erected and
felled. While this is not the city that exists today, there are bold, powerful
reminders hidden throughout the city that remind the populace and visitors of
what happened so that no one may ever forget. While I did not travel here under
the pretense of historical appreciation, the knowledge of past events and an
appreciation of its people made my trip all the more rich.</p>
<p>Three weeks ago, a business partner and I received an email invitation from an
event company, <a href="http://hy.co">hy!</a>, asking if we would like to attend and
participate in a mobility conference in Berlin. Naturally, we said “yes!”
without hesitation. After forgetting my passport, missing my first flight and
running in to <a href="http://www.wikiwand.com/en/Tyrion_Lannister">Tyrion Lannister (Peter
Dinklage)</a> in the Gatwick, London
airport, I finally made my way to Berlin.</p>
<p>The <a href="https://www.airbnb.com">AirBNB</a> accomodations were thankfully
booked by my business partner, Marty, who joined me on this trip. We stayed in a
clean studio apartment with a balcony near the <em>Uhlandstraße</em> train station.</p>
<p><img
  alt="Small flat with a couch, coffee table, kitchen, and bed"
  decoding="async"
  height="450"
  loading="lazy"
  src="./images/berlin-uhlandstrasse-apt.webp"
  width="600"
/></p>
<p><img
  alt="Looking over a balcony down to a city street"
  decoding="async"
  height="800"
  loading="lazy"
  src="./images/berlin-uhlandstrasse-balcony.webp"
  width="600"
/></p>
<p>Given Marty was no stranger to the area, my first night consisted of a walking
tour through the streets around our AirBNB with <em>0,5L</em>-sized beers in hand (this
is actually legal).</p>
<p>The following day consisted of attending the <em>hy! mobility</em> conference. In
attendence were representatives from very impressive companies, including</p>
<ul>
<li><a href="http://www.lufthansa.com">Lufthansa</a></li>
<li><a href="https://www.uber.com">Uber</a></li>
<li><a href="http://www.carpooling.com">carpooling.com</a></li>
</ul>
<p>and various other noteworthies. There were three group workshop sessions that
debated various trends, upcoming technologies, issues and recent regulatory
hurdles (<a href="http://www.ft.com/cms/s/0/c64c4b42-3279-11e4-a5a2-00144feabdc0.html">sorry, Uber</a>)
many of the companies face. I felt incredibly welcome during the conference and
was happy to be surrounded by so many passionate players in the mobility game.</p>
<p><img
  alt="Marty and Robert (RidePost) and Till (carpooling.com)"
  decoding="async"
  height="400"
  loading="lazy"
  src="./images/berlin-marty-till-robert.webp"
  width="600"
/></p>
<p>After the conference, the attendees of the conference were allowed to drive
brand new <a href="http://www.audiusa.com/models/audi-a4">Audi A4s</a> around
Berlin to the location of our dinner, <a href="http://www.berlin.de/orte/sehenswuerdigkeiten/tiergarten/index.en.php">Tiergarten</a>.
Sadly, neither I nor Marty possessed German drivers’ licenses, so we had to ride
in the back. Our "driver," John, and our Audi representative,
Kathleen, decided we would <em>not</em> be going straight to Tiergarten and would be
instead taking a slight detour to test the car’s capabilities along a more
scenic route. Kathleen was hilarious (a great saleswoman!), and John drove like
a pro.</p>
<p>The evening consisted of many half-liter beers, tons of food and fantastic
company at the restaurant in the heart of Tiergarten.</p>
<p><img
  alt="Picnic tables and water in Tiergarten"
  decoding="async"
  height="450"
  loading="lazy"
  src="./images/berlin-tiergarten-water.webp"
  width="600"
/></p>
<p>German beer plus a late night equals a very late start the following morning!
Once revived, Marty and I made our way to the headquarters of Berlin’s <a href="http://www.startupbootcamp.org/accelerator/berlin.html">Startup
Bootcamp</a> for Marty’s
meeting with the heads of a fellow GAN (Global Accelerator Network) accelerator
(backstory: Marty is the Managing Director of <a href="http://theironyard.com/accelerator">The Iron Yard
accelerator</a>, also part of the GAN family,
that is based in Greenville, SC). We arrived amidst a throng of camera crews
interviewing startups who were prepping for in-depth sessions with mentors.
Tanja (the co-MD) and Louise received us. While we were treated to free
cappuccino and lunch and had a nice time speaking with Louise and a few
startups, one thing I know from living in the South is that if you have guests
in your house, you should never leave them to wander and, instead, should keep
someone with them at all times. Meandering about someone’s home/open office
space can be an awkward experience. Alas, this was not the case with us while we
were guests, but I suppose they were simply too busy.</p>
<p><img
  alt="Startup Bootcamp location with people working in a well-used open office space"
  decoding="async"
  height="450"
  loading="lazy"
  src="./images/berlin-startup-bootcamp.webp"
  width="600"
/></p>
<p>The remainder of our day carried us all over Berlin. We consulted Google Maps
for our dinner and found a fantastic place, <a href="http://www.dicke-wirtin.de" title="Dicke Wirtin">Dicke
Wirtin</a>, near our AirBNB around the
corner from <em>Uhlandstraße</em>. We sat at a table with two middle-aged German men
who were nice as they could be, ate <em>shnitzel</em>, and drank. <strong>I absolutely
recommend visiting this place if you visit the area!</strong></p>
<p>Below are a few images from the day &amp; night.</p>
<p><img
  alt="Part of the Berlin Wall"
  decoding="async"
  height="800"
  loading="lazy"
  src="./images/berlin-the-wall.webp"
  width="600"
/></p>
<p><img
  alt="Nazi-Poland history outdoor exhibit"
  decoding="async"
  height="450"
  loading="lazy"
  src="./images/berlin-nazi-poland-history.webp"
  width="600"
/></p>
<p><img
  alt="Me with schnitzel in the Dicke Wirtin restaurant"
  decoding="async"
  height="800"
  loading="lazy"
  src="./images/berlin-dicke-wirtin.webp"
  width="600"
/></p>
<p>My time in Berlin was an odd mix of the new with the antiquated; the shiny with
the faded and dull; excitement for the future existing alongside the pain of the
past. I thoroughly enjoyed every moment of my time here. Now, having embraced
the friendliness of the people, tasted the delicious food and viewed marvelous
structures, I must visit Berlin again!</p>]]></summary>
</entry>
<entry>
    <title>Working In London</title>
    <link href="https://robertwpearce.com/working-in-london.html" />
    <id>https://robertwpearce.com/working-in-london.html</id>
    <published>2014-09-03T00:00:00Z</published>
    <updated>2014-09-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I spend the majority of my time writing software for
<a href="http://articulate.com">Articulate</a>. This isn’t the offical mantra, but it is
how I think of the company:</p>
<blockquote>
<p><em>"Work when you want, where you want; just don’t be a jerk."</em></p>
</blockquote>
<p>Sound too good to be true? It is true.</p>
<p>Articulate is a “remote” or “virtual” company, meaning it has no physical
offices anywhere in the world, and everyone works wherever they like. Many of my
colleagues work from home, whereas others tend to shift around a bit. It is this
freedom that was (and <em>is</em>) a primary driving force for me wanting to work with
this company.</p>
<h2 id="locations-thus-far">Locations Thus Far</h2>
<p>London is an expensive town, especially when you’re exchanging American Dollars
for British Pounds Sterling. <a href="http://nomadlist.io">NomadList.IO</a>,
a site that ranks cities to work remotely from, does not treat London kindly. At
the time of writing, London has a -89 reputation… on a scale where
positive is a good thing. While it is an expensive town, it is also incredibly
friendly, and there is no shortage of WiFi.</p>
<p>So, where have I worked over the past two days? For starters, I had a small
taste of <a href="https://www.google.co.uk/maps/place/South+Kensington/@51.49409,-0.17411,17z/data=!3m1!4b1!4m2!3m1!1s0x487605429cf5afd1:0xfef74f40edb435de?hl=en">South Kensington</a>.
I worked in a small coffee shop 2 blocks from the <a href="http://www.vam.ac.uk">Victoria and Albert
Museum</a>, and around lunch I took a stroll through a few of
the free galleries before receiving word that my roommate’s girlfriend was
locked <em>in</em> the apartment and could not get out. She was freed soon thereafter
when I returned home and unlocked the door.</p>
<p>Today was spent mostly near Clapham Junction (5-10 minute walk from our house)
in, first, a Starbucks and then in an Italian cafe up the hill from our house
(1-2 minute walk). Starbucks is fantastic for attempting to offer free WiFi to
their customers. I’m not sure who started that trend, but it is great. However,
in any big city I go to, Starbucks’ WiFi never actually works. It reminds me of
the $1/ticket Megabus WiFi in the States (in short, it doesn’t work). Thankful
as I am for even having access to the Internet, whereas so many people are
without, I require it for my job. And I need it to be fast. Luckily, the little
Italian cafe (ran by Francesca and, I believe, her son) have blazing fast
internet.</p>
<h2 id="the-experience">The Experience</h2>
<p>I love <em>not</em> working in an office. I love the freedom. I love being able to walk
and ride around and do what I want (or need) to do while still being a
contributing member of my team.</p>
<p>Many people I know ask me,</p>
<blockquote>
<p><em>"When are you going to get a real job?"</em></p>
</blockquote>
<p>I always respond with, “Oh, I don’t know…” But what I want to say is,</p>
<blockquote>
<p>"I have a real job. I have a salary, I have benefits and I have
responsibility. <strong>Just because your definition of a real job involves long
hours, living for weekends and generally hating life does not mean that it is
a universal truth by which all must abide.</strong>"</p>
</blockquote>
<p>Instead of spending loads of time during the workday perusing
<a href="http://www.cnn.com" title="CNN">CNN</a> or <a href="http://www.reddit.com" title="Reddit">Reddit</a> or
<a href="https://news.ycombinator.com" title="Hacker News">Hacker News</a>, I am out exploring
meeting new people and taking in as much as my limited time here will allow me.</p>
<p>London, so far, has been amazing and has allowed me to leave my comfort zone and
discover people, places and experiences that I would never have had if I would
have just stayed home.</p>]]></summary>
</entry>
<entry>
    <title>Moving To London</title>
    <link href="https://robertwpearce.com/moving-to-london.html" />
    <id>https://robertwpearce.com/moving-to-london.html</id>
    <published>2014-09-01T00:00:00Z</published>
    <updated>2023-02-04T13:00:00Z</updated>
    <summary type="html"><![CDATA[<p>2 months ago I decided I wanted to go to London for an indefinite amount of time.</p>
<p><img
  alt="Willow tree near water in London"
  decoding="async"
  src="./images/london-tree.webp"
  width="680"
  height="510"
/></p>
<p>There were no external driving factors behind this decision; no significant
other, no new job, no criminal charges, no desire to leave my home in
Charleston, SC.</p>
<p>I love my family, friends, beaches, the spartina grass (marshes), the plough
mud, and the odd—yet wonderful—assortment of personalities that
exist in Charleston.</p>
<blockquote>
<p><em>"If everything is so wonderful, why leave?"</em></p>
</blockquote>
<p>Because I can. Because of this list of things I don’t have:</p>
<ul>
<li>no wife</li>
<li>no kids</li>
<li>no house</li>
<li>no debt</li>
</ul>
<p>Here is another way to view this list:</p>
<ul>
<li>wife-free</li>
<li>kid-free</li>
<li>house-free</li>
<li>debt-free</li>
</ul>
<p>I understand that ¾ of the items on that list are desired by many folks,
and that what I have just described could also be classified as
"responsibility-free." Or, as I have understood before, that <em>the life
of the traveler is rootless and thereby does not bear the burden of creating
something lasting</em>. I find this statement accurate; however, I also find that
safety makes me complacent and breeds stagnation and settling: the opposite of
my battle and striving for excellence, or the Greek <em>areté</em>. Thus, in order to
better myself, I decided to shake things up a bit!</p>
<p>Additionally, and worthy of note, every single person I spoke with about
traveling this way said this:</p>
<blockquote>
<p><em>"If I were you, I’d be gone in a second."</em></p>
</blockquote>
<p>I will miss my grandparents, parents, siblings, my dogs, aunts, uncles, cousins,
surfing, and everything that makes Charleston great.</p>
<p>But I shall return!</p>
<h2 id="my-time-thus-far">My Time Thus far</h2>
<p>After serenading the Delta counter attendants in the Charleston airport with my
guitar and song, I had a sleepless and safe flight to London!</p>
<p>When I finished riding a number of trains and other ground transportation, I
arrived in <a href="https://www.google.com/maps/preview?q=clapham+london&amp;ie=UTF-8&amp;ei=ApsEVOSbJaeu0QXc84HYCw&amp;ved=0CAYQ_AUoAQ">Clapham</a>
at Sam’s house, where I was greeted with smiles, cheers, and Heineken.</p>
<p>Soon thereafter, I decided to get to know my new area better. My solution? <em>Go
on a run and get lost.</em> Here is my fitbit from that day:</p>
<p><img
  alt="My first day in London fitbit data"
  decoding="async"
  height="710"
  loading="lazy"
  src="./images/london-fitbit.webp"
  width="400"
/></p>
<p>You could say I got lost. I like to think I was "exploring."
Nevertheless, I had a fantastic time and look forward to many more.</p>]]></summary>
</entry>
<entry>
    <title>Your product doesn’t judge you; people do.</title>
    <link href="https://robertwpearce.com/your-product-doesn-t-judge-you-people-do.html" />
    <id>https://robertwpearce.com/your-product-doesn-t-judge-you-people-do.html</id>
    <published>2013-08-28T00:00:00Z</published>
    <updated>2023-02-04T13:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I ran in to <a href="http://www.infieldhealth.com/about-us/">Doug</a>, a fellow
entrepreneur in the <a href="http://1776dc.com/">1776 startup co-working space</a>, today
at the coffee/water/pb&amp;j oasis. After exchanging a few words, we somehow found
our way into a conversation about being in a small company and the battle
between focusing on <strong><em>sales</em></strong> and focusing on <strong><em>product</em></strong>.</p>
<p>What we agreed on was that being out in the wild, pounding pavement, selling
your product is exactly what every single startup founder and/or entrepreneur
should be doing. Doug told me that he likes my company,
<a href="https://www.ridepost.com/">RidePost</a>, because we are not hiding in our code,
adding this and that feature, saying, <em>"If we just add/change/remove this
one feature, people will start to buy our product!"</em></p>
<p>I know this has been written about 1 x 10^255 times, but he said something in
this conversation which really hit home:</p>
<blockquote>
<p><strong><em>"Your product doesn’t judge you; people do."</em></strong></p>
</blockquote>
<p>Fact: <strong>It is easier to hide in your product than take the beating that is the
outside world.</strong></p>
<p><strong>Selling sucks</strong>. You know that terrible feeling in middle school where you ask
the girl of your dreams if you can walk her home and she says no? Yeah, that.
Every day. Forever. Most developers would rather deal with failing unit tests
than deal with the anxiety and inevitable depression that is sales. However,
when you don’t have your very own sales team, you have got to learn to take
this. If you do not, then you should stop what you’re working on, return your
friends/family funding and go home.</p>
<p><strong>“But how will sales build the product I’m selling if I’m not focusing on
product?”</strong> First of all, sales will not only <em>allow</em> you to continue building
your product, but it will also <em>drive</em> what your product becomes. It is
pointless to build a product that people do not need and are not willing to buy.
For example: I can build a 100% gas-free, solar-powered lawn mower that leaves
zero carbon footprint and is super duper in every respect. But nobody is going
to buy this when gas-powered ones are cheaper and have worked fine for &gt;50
years. Regardless of how amazing your product is, if people don’t need it right
now, they are not going to buy it. Instead, let potential customers beat your
idea in to the ground. <strong>Take their blows, but also take notes.</strong> You will
likely see a pattern evolve after your dreams have been crushed in to the
ground for the thousandth time. Let these sales experiences drive (and fund)
what your product becomes.</p>
<p><strong>TL;DR</strong> =&gt; Stop hiding in a fantasy world of product and go out and sell
something first. When you’ve got customers beating down your door, then you can
go heads down.</p>]]></summary>
</entry>

</feed>
